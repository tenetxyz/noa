{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;ACAA;;;AAGA,GACA,IAAI,UAAU,CAAC,MAAM,CAAC,SAAS,EAC3B,MAAM,CAAC,SAAS,GAAG,OAAO,cAAc,CAAC;;CDA5C;;;;;;AEHD,IAAI,uCAAiB;IACjB,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;AACtB;AAEA,IAAI,wCAAkB;IAClB,WAAW;QAAC;QAAQ;KAAU;IAC9B,YAAY;QAAC;QAAQ;KAAY;IACjC,QAAQ;QAAC;QAAQ;KAAY;IAC7B,SAAS;QAAC;QAAQ;KAAa;IAC/B,QAAQ;IACR,YAAY;QAAC;QAAU;KAAO;IAC9B,YAAY;QAAC;QAAU;KAAO;IAC9B,QAAQ;AACZ;AA2BO,MAAM,kDAAe,CAAA,GAAA,iBAAS;IAEjC,cAAc,GACd,YAAY,GAAG,EAAE,IAAI,EAAE,OAAO,CAAE;QAC5B,OAAO,OAAO,OAAO,CAAC,GAAG,sCAAgB;QACzC,KAAK,CAAC,SAAS;QAEf,IAAI,IAAI,KAAK,YAAY;QACzB,IAAK,IAAI,QAAQ,EAAG;YAChB,IAAI,OAAO,MAAM,QAAQ,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,GAAG;gBAAC,CAAC,CAAC,KAAK;aAAC;YACvD,IAAI,CAAC,KAAK,SAAS;QACvB;IACJ;AACJ;;;;;ACnCO,MAAM,kDAAkB,CAAA,GAAA,mBAAW;IAEtC,cAAc,GACd,YAAY,GAAG,EAAE,IAAI,CAAE;QACnB,KAAK;QACL,OAAO,QAAQ,CAAC;QAEhB;;;QAGA,GACA,IAAI,CAAC,MAAM;QAEX,qCAAqC,GACrC,IAAI,QAAQ,KAAK,cAAc;QAC/B,IAAI,OAAO,UAAU,UACjB,QAAQ,SAAS,cAAc;QAEnC,IAAI,CAAC,UAAU,SAAS;QAExB,sDAAsD,GACtD,IAAI,CAAC,SAAS,wCAAkB,IAAI,CAAC;QACrC,qCAAe,KAAK,IAAI,CAAC,QAAQ,aAAa;;QAG9C,wDAAwD,GACxD,IAAI,CAAC,sBAAsB;QAE3B,kEAAkE,GAClE,IAAI,CAAC,gBAAgB;QAErB,2CAA2C,GAC3C,IAAI,CAAC,YAAY,CAAC,CAAC,SAAS;QAE5B,qDAAqD,GACrD,IAAI,CAAC,iBAAiB;QAItB,8DAA8D;QAC9D,IAAI,WAAW;QACf,cAAc,GACd,IAAI,CAAC,SAAS,IAAI,CAAA,GAAA,qBAAa,EAAE,IAAI,CAAC,SAAS;QAC/C,IAAI,CAAC,OAAO,WAAW,KAAK;QAC5B,IAAI,CAAC,OAAO,gBAAgB,KAAK;QACjC,IAAI,CAAC,OAAO,oBAAoB,KAAK;QACrC,IAAI,CAAC,OAAO,mBAAmB,KAAK;QACpC,IAAI,CAAC,OAAO,cAAc;QAI1B,qBAAqB;QACrB,IAAI,CAAC,OAAO,SAAS,IAAI,KAAK,KAAK;QACnC,IAAI,CAAC,OAAO,WAAW,IAAI,OAAO,KAAK;QAEvC,kBAAkB;QAClB,IAAI,CAAC,OAAO,uBAAuB,CAAC;YAChC,IAAI,CAAC,iBAAiB;YACtB,IAAI,CAAC,KAAK,AAAC,QAAS,sBAAsB;YAC1C,2DAA2D;YAC3D,yCAAyC;YACzC,IAAI,OAAO,IAAI,CAAC,gBAAgB;QACpC;QAEA,iCAAiC;QACjC,IAAI,CAAC,OAAO,SAAS;YACjB,IAAI,CAAC,OAAO,WAAW,IAAI,UAAU,OAAO,KAAK,IAAI;YACrD,mDAAmD;YACnD,wCAAkB,IAAI;YACtB,IAAI,CAAC,QAAQ,iBAAiB,cAAc;gBAAQ,IAAI,CAAC,gBAAgB;YAAK;YAC9E,IAAI,CAAC,QAAQ,iBAAiB,cAAc;gBAAQ,IAAI,CAAC,gBAAgB;YAAM;YAC/E,OAAO,iBAAiB,SAAS;gBAAQ,IAAI,CAAC,YAAY;YAAK;YAC/D,OAAO,iBAAiB,QAAQ;gBAAQ,IAAI,CAAC,YAAY;YAAM;YAC/D,sCAAsC;YACtC,IAAI,mBAAmB;gBACnB,IAAI,CAAC,gBAAgB;gBACrB,IAAI,CAAC,YAAY;gBACjB,IAAI,CAAC,QAAQ,oBAAoB,aAAa;YAClD;YACA,IAAI,CAAC,QAAQ,iBAAiB,aAAa;YAC3C,uBAAuB;YACvB,IAAI,CAAC,KAAK;YACV,2BAA2B;YAC3B,IAAI,CAAC,OAAO,SAAS;QACzB;IACJ;IAGA;;;;;;IAMA,GAEA,cAAc,GACd,SAAS,WAAW,EAAE;QAClB,IAAI,CAAC,QAAQ,YAAY;IAC7B;IAEA;;IAEA,GACA,eAAe,OAAO,KAAK,EAAE;QACzB,sCAAsC;QACtC,IAAI,CAAC,OAAO,cAAc,CAAC,CAAC;IAChC;AACJ;AAIA;;;;;;AAMA,GAGA,SAAS;IACL,wEAAwE;IACxE,IAAI,YAAY,SAAS,cAAc;IACvC,UAAU,WAAW;IACrB,UAAU,MAAM,WAAW;IAC3B,UAAU,MAAM,OAAO;IACvB,UAAU,MAAM,QAAQ;IACxB,UAAU,MAAM,MAAM;IACtB,UAAU,MAAM,SAAS;IACzB,UAAU,MAAM,SAAS;IACzB,UAAU,MAAM,WAAW;IAC3B,SAAS,KAAK,YAAY;IAC1B,SAAS,KAAK,MAAM,WAAW,SAAS,gBAAgB;;IACxD,SAAS,KAAK,MAAM,SAAS;IAC7B,UAAU,KAAK;IACf,OAAO;AACX;AAGA,SAAS,wCAAkB,EAAE;IACzB,sDAAsD;IACtD,IAAI,SAAS,GAAG,cAAc;IAC9B,IAAI,CAAC,QAAQ;QACT,SAAS,SAAS,cAAc;QAChC,OAAO,MAAM,WAAW;QACxB,OAAO,MAAM,OAAO;QACpB,OAAO,MAAM,MAAM;QACnB,OAAO,MAAM,SAAS;QACtB,OAAO,MAAM,QAAQ;QACrB,OAAO,KAAK;QACZ,GAAG,aAAa,QAAQ,GAAG;IAC/B;IACA,OAAO;AACX;AAGA,+CAA+C;AAC/C,2EAA2E;AAC3E,8EAA8E;AAC9E,8DAA8D;AAC9D,SAAS,wCAAkB,IAAI;IAC3B,IAAI,oBACA,AAAC,wBAAwB,YACxB,2BAA2B,YAC3B,8BAA8B;IACnC,IAAI,mBAAmB;QACnB,KAAK,sBAAsB;QAC3B,IAAI,WAAW,SAAU,CAAC;YACtB,KAAK,sBAAsB;YAC3B,SAAS,oBAAoB,EAAE,MAAM;QACzC;QACA,SAAS,iBAAiB,aAAa;IAC3C;AACJ;AAGA;;;;;CAKC,GACD,SAAS,qCAAe,GAAG,EAAE,MAAM;IAC/B,IAAI,KAAK;IACT,IAAI,YAAY;QACZ,IAAI,IAAI,OAAO;QACf,OAAO,QAAQ,IAAI;QACnB,OAAO,QAAQ;QACf,IAAI,OAAO,IAAI,IAAI,IAAI,gBAAgB;IAC3C;IACA,IAAI,GAAG,gBAAgB;AAC3B;;;;;;AChNA,kBAAkB;AAClB,SAAS;IACL,IAAI,CAAC,WAAW;IAChB,IAAI,CAAC,WAAW;IAChB,IAAI,CAAC,kBAAkB;IACvB,IAAI,CAAC,oCAAoC;IACzC,IAAI,CAAC,eAAe;IACpB,IAAI,CAAC,eAAe;IACpB,IAAI,CAAC,cAAc;IACnB,IAAI,CAAC,YAAY;AACrB;AAGA,SAAS;AACT,IAAI,oCAAc;IACd,CAAA,GAAA,aAAG,EAAE;IACL,CAAA,GAAA,aAAG,EAAE;IACL,CAAA,GAAA,aAAG,EAAE;CACR;AACD,IAAI,qCAAe,CAAA,GAAA,aAAG,EAAE;AAqBjB,MAAM;IAET;;;;IAIA,GACA,YAAY,GAAG,EAAE,IAAI,CAAE;QACnB,OAAO,OAAO,OAAO,CAAC,GAAG,IAAI,sCAAgB;QAC7C,IAAI,CAAC,MAAM;QAEX,0FAA0F,GAC1F,IAAI,CAAC,eAAe,CAAC,KAAK;QAE1B,wFAAwF,GACxF,IAAI,CAAC,eAAe,CAAC,KAAK;QAE1B,oCAAoC,GACpC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK;QAEvB,kCAAkC,GAClC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK;QAEvB;;;QAGA,GACA,IAAI,CAAC,kBAAkB,KAAK;QAE5B;;;;SAIC,GACD,IAAI,CAAC,oCAAoC,KAAK;QAE9C;;;;;;QAMA,GACA,IAAI,CAAC,UAAU;QAEf;;;;;;;QAOA,GACA,IAAI,CAAC,QAAQ;QAEb;;;;;;;;;;;;;;;;;;QAkBA,GACA,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,KAAK,aAAa;YAAC;SAAW;QAE3D,iDAAiD;QACjD,IAAI,YAAY,MAAM,IAAI,KAAK,gBAAgB,IAAI,cAAc;QACjE,IAAI,KAAK,aAAa,IAAI,CAAC,cAAc,iBAAiB;YACtD,QAAQ,IAAI;YACZ,QAAQ;gBAAC;gBAAG;gBAAW;aAAE;QAC7B;QAEA,qEAAqE,GACrE,IAAI,CAAC,eAAe,KAAK;QAEzB,8DAA8D,GAC9D,IAAI,CAAC,YAAY,KAAK;QAEtB;;;;;QAKA,GACA,IAAI,CAAC,cAAc,KAAK;QAExB,cAAc,GACd,IAAI,CAAC,aAAa,CAAA,GAAA,aAAG,EAAE,WAAW,GAAG,GAAG;IAC5C;IAKA;;;;;;IAMA,GAGA;;IAEA,GACA,cAAc,GACd,0BAA0B;QACtB,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,gBAAgB,IAAI,CAAC;QAC9C,IAAI,MAAM,iCAAW,CAAC,EAAE;QACxB,OAAO,CAAA,GAAA,aAAG,EAAE,KAAK,KAAK,KAAK;IAC/B;IACA,cAAc,GACd,oBAAoB;QAChB,IAAI,MAAM,IAAI,CAAC;QACf,IAAI,IAAI,CAAC,gBAAgB,GAAG,OAAO;QACnC,OAAO,CAAA,GAAA,aAAG,EAAE,YAAY,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;IAC7D;IAIA;;;;IAIA,GACA,oBAAoB;QAChB,IAAI,MAAM,IAAI,CAAC;QACf,IAAI,eAAe,iCAAW,CAAC,EAAE;QACjC,OAAO,IAAI,CAAC,IAAI,cAAc,KAAK;IACvC;IAGA;;IAEA,GACA,cAAc;QACV,IAAI,MAAM,IAAI,CAAC;QACf,IAAI,eAAe,iCAAW,CAAC,EAAE;QACjC,OAAO,IAAI,CAAC,IAAI,cAAc,KAAK;IACvC;IAGA;;IAEA,GACA,eAAe;QACX,OAAO,IAAI,CAAC;IAChB;IAKA;;;;;;;;IAQA,GAIA;;;;IAIA,GAEA,sBAAsB;QAElB,2CAA2C;QAC3C,IAAI,YAAY,IAAI,CAAC;QACrB,IAAI,IAAI,CAAC,IAAI,UAAU,qBACnB;YAAA,IAAI,CAAC,IAAI,CAAC,IAAI,UAAU,gBACpB,aAAa,IAAI,CAAC;QACtB;QAEJ,IAAI,cAAc,GAAG;QAErB,yBAAyB;QACzB,IAAI,eAAe,IAAI,CAAC,IAAI,OAAO;QACnC,6BAAO,cAAc,8BAA8B;;QAEnD,mEAAmE;QACnE,IAAI,OAAO,SAAS,KAAK,KAAK;QAC9B,IAAI,KAAK,aAAa,KAAK,IAAI,CAAC,eAAe,YAAY;QAC3D,IAAI,KAAK,aAAa,KAAK,IAAI,CAAC,eAAe,YAAY;QAC3D,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC;QACzB,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC;QAEzB,kDAAkD;QAClD,IAAI,QAAQ,IAAI,KAAK;QACrB,IAAI,CAAC,WAAW,AAAC,KAAK,IAAK,KAAK,QAAQ;QACxC,IAAI,IAAI,CAAC,UAAU,OAAO,IAAI,CAAC,WAAW;QAC1C,IAAI,WAAW,KAAK,KAAK,IAAI;QAC7B,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,UAAU,KAAK,IAAI,UAAU,IAAI,CAAC,QAAQ;QAEjE,CAAA,GAAA,aAAG,EAAE,IAAI,IAAI,CAAC,YAAY,GAAG,GAAG;QAChC,IAAI,MAAM,IAAI,CAAC;QACf,IAAI,SAAS;QACb,CAAA,GAAA,aAAG,EAAE,QAAQ,KAAK,KAAK,QAAQ,IAAI,CAAC;QACpC,CAAA,GAAA,aAAG,EAAE,QAAQ,KAAK,KAAK,QAAQ,IAAI,CAAC;IACxC;IAIA;;;IAGA,GACA,kCAAkC;QAC9B,cAAc;QACd,IAAI,CAAC,eAAe,AAAC,CAAA,IAAI,CAAC,eAAe,IAAI,CAAC,WAAU,IAAK,IAAI,CAAC;IACtE;IAEA,cAAc,GACd,iCAAiC;QAC7B,mDAAmD;QACnD,IAAI,UAAU,gDAA0B,IAAI;QAC5C,IAAI,IAAI,CAAC,cAAc,SAAS,IAAI,CAAC,cAAc;IACvD;AAEJ;AAKA;;AAEA,GAEA,SAAS,gDAA0B,IAAI;IACnC,IAAI,CAAC,KAAK,WAAW;QACjB,KAAK,YAAY,IAAI,CAAA,GAAA,aAAG,EAAE;YAAC;YAAG;YAAG;SAAE,EAAE;YAAC;YAAK;YAAK;SAAI;QACpD,KAAK,iBAAiB,KAAK,IAAI,MAAM,iBAAiB,KAAK,KAAK,IAAI;QACpE,KAAK,YAAY,CAAA,GAAA,aAAG,EAAE;QACtB,KAAK,YAAY,IAAM;IAC3B;IACA,IAAI,MAAM,CAAA,GAAA,aAAG,EAAE,KAAK,KAAK,WAAW,KAAK;IACzC,CAAA,GAAA,aAAG,EAAE,IAAI,KAAK,KAAK,KAAK,IAAI;IAC5B,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK,GAAG,CAAC,EAAE,IAAI;IACtC,KAAK,UAAU,YAAY;IAC3B,IAAI,OAAO,KAAK,IAAI,KAAK,cAAc,KAAK,eAAe;IAC3D,CAAA,GAAA,aAAG,EAAE,MAAM,KAAK,WAAW,KAAK,gBAAgB,CAAC;IACjD,OAAO,CAAA,GAAA,qBAAI,EAAE,KAAK,gBAAgB,KAAK,WAAW,KAAK,WAAW,KAAK,WAAW;AACtF;AAOA,4CAA4C;AAC5C,+DAA+D;AAC/D,2EAA2E;AAC3E,SAAS,6BAAO,YAAY;IACxB,IAAI,KAAK,aAAa;IACtB,IAAI,KAAK,aAAa;IACtB,IAAI,OAAQ,KAAK,IAAI,MAAM,OAAO,KAAK,IAAI,KAAK,+BAAS;IACzD,IAAI,OAAQ,KAAK,IAAI,MAAM,OAAO,KAAK,IAAI,KAAK,+BAAS;IACzD,IAAI,QAAQ,MAAM;QACd,aAAa,KAAK;QAClB,aAAa,KAAK;QAClB,8BAAQ,AAAC,CAAA,8BAAQ,EAAC,IAAK;QACvB,8BAAQ,AAAC,CAAA,8BAAQ,EAAC,IAAK;IAC3B,OAAO;QACH,8BAAQ,MAAM;QACd,8BAAQ,MAAM;IAClB;AACJ;AAEA,IAAI,8BAAQ;AACZ,IAAI,8BAAQ;;;;;AE5UZ;;;CAGC;AAOM,MAAM;IACT,aAAc;QACV;mCAC2B,GAC3B,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,SAAS;QAEd;mCAC2B,GAC3B,IAAI,CAAC,iBAAiB;QAEtB;mCAC2B,GAC3B,IAAI,CAAC,kBAAkB;QAEvB;mCAC2B,GAC3B,IAAI,CAAC,WAAW;IACpB;AACJ;AAee,kDAAU,GAAG;IAExB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO,IAAI;QAEX,OAAO,SAAU,GAAG,EAAE,KAAK;YACvB,mCAAmC;YACnC,IAAI,MAAM;gBAAC;gBAAG;gBAAG;aAAE;YACnB,IAAI,MAAM,UAAU,CAAA,GAAA,aAAG,EAAE,KAAK,KAAK,MAAM;YACzC,MAAM,WAAW;YAEjB,MAAM,iBAAiB,CAAA,GAAA,aAAG,EAAE;YAC5B,MAAM,kBAAkB,CAAA,GAAA,aAAG,EAAE;YAC7B,MAAM,WAAW,IAAI,aAAa;YAElC,sCAAsC;YACtC,IAAI,cAAc,MAAM,UAAU,MAAM,MAAM;YAC9C,CAAA,GAAA,aAAG,EAAE,KAAK,MAAM,iBAAiB,MAAM;YACvC,0CAAsB;QAC1B;QAEA,UAAU;QAIV,QAAQ,SAAU,EAAE,EAAE,MAAM;YACxB,IAAI,MAAM,IAAI;YACd,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,CAAA,GAAA,aAAG,EAAE,IAAI,MAAM,UAAU,MAAM,gBAAgB;gBAC/C,0CAAsB;YAC1B;QACJ;IAGJ;AACJ;AAKO,SAAS,0CAAsB,KAAK;IACvC,IAAI,KAAK,MAAM,QAAQ;IACvB,IAAI,OAAO,MAAM;IACjB,IAAI,MAAM,MAAM;IAChB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;IAChB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,MAAM;IACzB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG;AACvB;;;ACrGA;;;CAGC;AAKM,MAAM;IACT,aAAc;QACV,qDAAqD,GACrD,IAAI,CAAC,OAAO;IAChB;AACJ;AAQe,kDAAU,GAAG;IAExB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO,IAAI;QAEX,OAAO,SAAU,KAAK,EAAE,KAAK;YACzB,MAAM,OAAO,IAAI,QAAQ;YACzB,+DAA+D;YAC/D,IAAI,SAAS,IAAI,KAAK,gBAAgB,MAAM;YAC5C,yCAAuB,OAAO;QAClC;QAGA,UAAU,SAAU,KAAK,EAAE,KAAK;YAC5B,kCAAkC;YAClC,6DAA6D;YAC7D,4DAA4D;YAC5D,IAAI,IAAI,KAAK,YAAY,MAAM,OAAO;gBAClC,IAAI,OAAO,IAAI,KAAK,gBAAgB,MAAM;gBAC1C,6CAAuB,OAAO;gBAC9B,yCAAmB,OAAO,MAAM,GAAG;YACvC;YACA,IAAI,QAAQ,WAAW,MAAM;QACjC;QAGA,QAAQ,SAAU,EAAE,EAAE,MAAM;YACxB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,IAAI,OAAO,IAAI,KAAK,gBAAgB,MAAM;gBAC1C,6CAAuB,OAAO;YAClC;QACJ;QAGA,cAAc,SAAU,EAAE,EAAE,MAAM;YAE9B,IAAI,UAAU,IAAI;YAClB,IAAI,WAAW,OAAO,IAAI,UAAU,OAAO;YAC3C,YAAY,IAAI;YAChB,IAAI,SAAS,UAAU;YAEvB,gDAAgD;YAChD,qEAAqE;YACrE,sCAAsC;YACtC,gEAAgE;YAChE,wDAAwD;YACxD,2DAA2D;YAE3D,IAAI,eAAe,AAAC,CAAA,SAAS,QAAO,IAAK;YACzC,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,IAAI,KAAK,MAAM;gBACf,IAAI,OAAO,IAAI,KAAK,gBAAgB;gBACpC,IAAI,WAAW,IAAI,KAAK,eAAe;gBACvC,yCAAmB,OAAO,MAAM,cAAc;YAClD;QACJ;IAEJ;AAEJ;AAIA,6BAA6B;AAC7B,IAAI,8BAAQ,CAAA,GAAA,aAAG,EAAE;AAEV,SAAS,yCAAuB,SAAS,EAAE,QAAQ;IACtD,IAAI,MAAM,UAAU,KAAK;IACzB,IAAI,MAAM,SAAS;IACnB,CAAA,GAAA,aAAG,EAAE,KAAK,IAAI,MAAM;IACpB,CAAA,GAAA,aAAG,EAAE,IAAI,IAAI,KAAK,SAAS,OAAO,SAAS,QAAQ,SAAS;IAC5D,CAAA,GAAA,aAAG,EAAE,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI;AACpC;AAGA,SAAS,6CAAuB,SAAS,EAAE,QAAQ;IAC/C,IAAI,OAAO,UAAU,KAAK,KAAK;IAC/B,IAAI,KAAK,SAAS,QAAQ;IAC1B,CAAA,GAAA,aAAG,EAAE,IAAI,SAAS,gBAAgB,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,GAAG;AACvE;AAGA,SAAS,yCAAmB,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ;IACnE,wCAAwC;IACxC,IAAI,MAAM,UAAU,KAAK;IACzB,CAAA,GAAA,aAAG,EAAE,YAAY,6BAAO,SAAS,gBAAgB,KAAK;IAEtD,4CAA4C;IAC5C,0DAA0D;IAC1D,IAAI,UAAU,CAAA,GAAA,aAAG,EAAE,KAAK,6BAAO,SAAS,iBAAiB,6BAAO;IAEhE,uCAAuC;IACvC,CAAA,GAAA,aAAG,EAAE,KAAK,SAAS,iBAAiB;AACxC;;;;AClGe,kDAAU,GAAG;IAExB,IAAI,YAAY,EAAE;IAElB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO;YACH,UAAU;YACV,aAAa;YACb,aAAa;YACb,UAAU;QACd;QAEA,OAAO;QAEP,UAAU;QAGV,QAAQ,SAAS,eAAe,EAAE,EAAE,MAAM;YACtC,IAAI,OAAO,IAAI;YAEf,0CAA0C;YAC1C,8CAA8C;YAC9C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,KAAK,MAAM,CAAC,EAAE,CAAC;gBACnB,IAAI,MAAM,KAAK,gBAAgB;gBAC/B,SAAS,CAAC,EAAE,GAAG,IAAI;YACvB;YACA,UAAU,SAAS,OAAO;YAE1B,4BAA4B;YAC5B,CAAA,GAAA,mBAAW,EAAE,WAAW,SAAU,CAAC,EAAE,CAAC;gBAClC,IAAI,SAAS,MAAM,CAAC,EAAE;gBACtB,IAAI,SAAS,MAAM,CAAC,EAAE;gBACtB,IAAI,CAAC,UAAU,CAAC,QAAQ;gBACxB,IAAI,YAAY,SAAS,CAAC,EAAE;gBAC5B,IAAI,YAAY,SAAS,CAAC,EAAE;gBAC5B,IAAI,mBAAmB,QAAQ,QAAQ,WAAW,YAC9C,gBAAgB,KAAK,QAAQ;YAErC;QAEJ;IACJ;IAIA;;;;KAIC,GAGD,SAAS,gBAAgB,GAAG,EAAE,MAAM,EAAE,MAAM;QACxC,IAAI,MAAM,OAAO;QACjB,IAAI,MAAM,OAAO;QAEjB,qEAAqE;QACrE,IAAI,OAAO,cAAc,OAAO,aAC5B;YAAA,IAAI,OAAO,UAAU,OAAO,SAAS;QAAG;QAE5C,IAAI,OAAO,cAAc,OAAO,aAC5B;YAAA,IAAI,OAAO,UAAU,OAAO,SAAS;QAAG;QAG5C,2BAA2B;QAC3B,IAAI,KAAK,0BAA0B,KAAK;IAC5C;IAIA,uCAAuC;IACvC,0EAA0E;IAE1E,SAAS,mBAAmB,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS;QAC5D,IAAI,OAAO,UAAU;YACjB,IAAI,OAAO,UACP,OAAO,qBAAqB,WAAW;iBAEvC,OAAO,gBAAgB,WAAW;QAE1C,OAAO,IAAI,OAAO,UACd,OAAO,gBAAgB,WAAW;QAEtC,OAAO;IACX;IAKA,0DAA0D;IAC1D,qDAAqD;IAErD,SAAS,qBAAqB,CAAC,EAAE,CAAC;QAC9B,oCAAoC;QACpC,IAAI,OAAO,AAAC,CAAA,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,AAAD,IAAK;QAC3B,IAAI,OAAO,AAAC,CAAA,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,AAAD,IAAK;QAC3B,IAAI,KAAK,CAAC,CAAC,EAAE,GAAG,OAAQ,CAAA,CAAC,CAAC,EAAE,GAAG,IAAG;QAClC,IAAI,KAAK,CAAC,CAAC,EAAE,GAAG,OAAQ,CAAA,CAAC,CAAC,EAAE,GAAG,IAAG;QAClC,kCAAkC;QAClC,IAAI,SAAS,KAAK,KAAK,KAAK;QAC5B,IAAI,SAAS,OAAO;QACpB,OAAQ,UAAU,SAAS;IAC/B;IAKA,qDAAqD;IACrD,qDAAqD;IAErD,SAAS,gBAAgB,GAAG,EAAE,IAAI;QAC9B,yBAAyB;QACzB,IAAI,MAAM,AAAC,CAAA,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,AAAD,IAAK;QAC9B,IAAI,KAAK,GAAG,CAAC,EAAE,GAAG;QAClB,IAAI,KAAK,GAAG,CAAC,EAAE,GAAG;QAClB,0CAA0C;QAC1C,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;QACnC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;QACnC,qEAAqE;QACrE,IAAI,KAAK,KAAK;QACd,IAAI,KAAK,KAAK;QACd,IAAI,SAAS,KAAK,KAAK,KAAK;QAC5B,OAAQ,UAAU,MAAM;IAC5B;IAEA,SAAS,MAAM,GAAG,EAAE,EAAE,EAAE,EAAE;QACtB,OAAO,AAAC,MAAM,KAAM,KAAK,AAAC,MAAM,KAAM,KAAK;IAC/C;AAKJ;;;AC/Je,kDAAU,GAAG;IACxB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO;YACH,UAAU;QACd;QAEA,OAAO,SAAU,GAAG,EAAE,KAAK;YACvB,iDAAiD;YACjD,IAAI,OAAO,IAAI;YACf,IAAI,KAAK,WAAW,MAAM;gBACtB,IAAI,OAAO,KAAK,WAAW,KAAK;gBAChC,KAAK,YAAY,SAAS,cAAc,OAAO;oBAC3C,IAAI,KAAK,IAAI,KAAK,kBAAkB,KAAK;oBACzC,IAAI,IAAI,GAAG,SAAS;gBACxB;YACJ;QACJ;QAEA,UAAU,SAAU,GAAG,EAAE,KAAK;YAC1B,IAAI,OAAO,IAAI;YACf,IAAI,KAAK,WAAW,MAChB,KAAK,WAAW,KAAK,KAAK,YAAY;QAE9C;IAIJ;AACJ;;;AClCA;;;CAGC,GAEc,kDAAU,GAAG;IACxB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO;YACH,QAAQ;QACZ;QAEA,OAAO;QAEP,UAAU;QAEV,QAAQ,SAAS,eAAe,EAAE,EAAE,MAAM;YACtC,IAAI,OAAO,IAAI,OAAO;YACtB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAC/B,gCAAU,MAAM,CAAC,EAAE,EAAE,MAAM;QAEnC;IACJ;AACJ;AAGA,SAAS,gCAAU,KAAK,EAAE,IAAI,EAAE,GAAG;IAC/B,IAAI,CAAC,IAAI,KAAK,QAAQ,MAAM,OAAO;IACnC,IAAI,OAAO,IAAI,KAAK,YAAY,MAAM,MAAM;IAC5C,IAAI,CAAC,KAAK,UAAU;IACpB,IAAI,aAAc,OAAO,MAAM;IAC/B,IAAI,UAAU,kBAAkB,MAAM,CAAC;AAC3C;;;;AC5Be,kDAAU,GAAG;IAExB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO;YACH,QAAQ;YACR,QAAQ;YACR,iBAAiB;QACrB;QAEA,OAAO,SAAU,GAAG,EAAE,KAAK;YACvB,IAAI,MAAM,CAAA,GAAA,aAAG,EAAE;YACf,MAAM,SAAS,AAAC,MAAM,SAAU,CAAA,GAAA,aAAG,EAAE,KAAK,KAAK,MAAM,UAAU;YAC/D,eAAe;YACf,qBAAqB;QACzB;QAEA,UAAU;QAGV,uCAAuC;QACvC,QAAQ,SAAS,aAAa,EAAE,EAAE,MAAM;YACpC,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAC/B,eAAe,MAAM,CAAC,EAAE;QAEhC;QAGA,wCAAwC;QACxC,cAAc,SAAS,iBAAiB,EAAE,EAAE,MAAM;YAC9C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAC/B,qBAAqB,MAAM,CAAC,EAAE;QAEtC;IACJ;IAIA,SAAS,eAAe,KAAK;QACzB,IAAI,KAAK,MAAM;QACf,IAAI,OAAO,IAAI,KAAK,gBAAgB;QACpC,IAAI,QAAQ,IAAI,KAAK,gBAAgB,MAAM;QAC3C,IAAI,CAAC,OAAO;YACR,IAAI,MAAM,iBAAiB,MAAM,gBAAgB;YACjD,IAAI,KAAK,gBAAgB,IAAI,IAAI,KAAK,MAAM;QAChD,OACI,CAAA,GAAA,aAAG,EAAE,IAAI,KAAK,gBAAgB,MAAM,gBAAgB,MAAM;IAElE;IAEA,SAAS,qBAAqB,KAAK;QAC/B,IAAI,KAAK,MAAM;QACf,IAAI,OAAO,IAAI,KAAK,gBAAgB;QACpC,IAAI,QAAQ,IAAI,KAAK,gBAAgB,MAAM;QAC3C,IAAI,OACA,CAAA,GAAA,aAAG,EAAE,IAAI,KAAK,iBAAiB,MAAM,iBAAiB,MAAM;IAEpE;AAEJ;;;;ACpEe,kDAAU,GAAG;IACxB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO;YACH,MAAM;YACN,QAAQ;QACZ;QAGA,OAAO,SAAU,GAAG,EAAE,KAAK;YACvB,yDAAyD;YACzD,IAAI,SAAS,IAAI,KAAK,gBAAgB;YACtC,IAAI,MAAM,MACN,IAAI,UAAU,eAAe,MAAM,MAAM,OAAO,OAAO;iBAEvD,MAAM,IAAI,MAAM;YAEpB,IAAI,CAAC,MAAM,QAAQ,MAAM,SAAS,CAAA,GAAA,aAAG,EAAE;YAEvC,+BAA+B;YAC/B,IAAI,OAAO,OAAO;YAClB,MAAM,KAAK,SAAS,eAChB,IAAI,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC,EAAE,EACzB,IAAI,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC,EAAE,EACzB,IAAI,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC,EAAE;QACjC;QAGA,UAAU,SAAU,GAAG,EAAE,KAAK;YAC1B,MAAM,KAAK;QACf;QAIA,cAAc,SAAU,EAAE,EAAE,MAAM;YAC9B,wDAAwD;YACxD,6CAA6C;YAC7C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,IAAI,KAAK,MAAM;gBAEf,IAAI,OAAO,IAAI,KAAK,gBAAgB,IAAI;gBACxC,MAAM,KAAK,SAAS,eAChB,IAAI,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC,EAAE,EACzB,IAAI,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC,EAAE,EACzB,IAAI,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC,EAAE;YACjC;QACJ;IAGJ;AACJ;;;;AC/CO,SAAS;IACZ,IAAI,CAAC,UAAU,EAAE,UAAU;;IAC3B,IAAI,CAAC,UAAU;IACf,IAAI,CAAC,UAAU;IAEf,UAAU;IACV,IAAI,CAAC,WAAW;IAChB,IAAI,CAAC,YAAY;IACjB,IAAI,CAAC,iBAAiB;IACtB,IAAI,CAAC,kBAAkB;IACvB,IAAI,CAAC,mBAAmB;IAExB,QAAQ;IACR,IAAI,CAAC,cAAc;IACnB,IAAI,CAAC,cAAc;IACnB,IAAI,CAAC,YAAY;IACjB,IAAI,CAAC,WAAW,IAAI,KAAK;;IACzB,IAAI,CAAC,WAAW;IAEhB,iBAAiB;IACjB,IAAI,CAAC,aAAa;IAClB,IAAI,CAAC,gBAAgB;IACrB,IAAI,CAAC,aAAa;AACtB;AAce,kDAAU,GAAG;IACxB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO,IAAI;QAEX,OAAO;QAEP,UAAU;QAGV,QAAQ,SAAS,kBAAkB,EAAE,EAAE,MAAM;YACzC,IAAI,OAAO,IAAI;YACf,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,IAAI,OAAO,KAAK,WAAW,MAAM;gBACjC,IAAI,MAAM,2CAAqB,IAAI,OAAO,KAAK;YACnD;QACJ;IAGJ;AACJ;AAGA,IAAI,gCAAU,CAAA,GAAA,aAAG,EAAE;AACnB,IAAI,iCAAW,CAAA,GAAA,aAAG,EAAE;AACpB,IAAI,gCAAU,CAAA,GAAA,aAAG,EAAE;AAGnB;;;;AAIA,GAEA,SAAS,2CAAqB,EAAE,EAAE,KAAK,EAAE,IAAI;IACzC,4DAA4D;IAC5D,wDAAwD;IACxD,sBAAsB;IAEtB,UAAU;IACV,IAAI,WAAY,KAAK,YAAY;IACjC,IAAI,UAAW,YAAY,MAAM,aAAa,MAAM;IACpD,IAAI,UAAU;QACV,MAAM,aAAa;QACnB,MAAM,aAAa;IACvB;IAEA,qBAAqB;IACrB,IAAI,MAAM,SAAS;QACf,IAAI,MAAM,YACN;YAAA,IAAI,MAAM,gBAAgB,GAAG;gBACzB,IAAI,KAAK,MAAM;gBACf,IAAI,MAAM,gBAAgB,IAAI,MAAM,MAAM,gBAAgB;gBAC1D,KAAK,WAAW;oBAAC;oBAAG;oBAAI;iBAAE;gBAC1B,MAAM,iBAAiB;YAC3B;QAAA,OACG,IAAI,SAAS;YAChB,MAAM,aAAa;YACnB,IAAI,CAAC,UAAU,MAAM;YACrB,MAAM,gBAAgB,MAAM;YAC5B,KAAK,aAAa;gBAAC;gBAAG,MAAM;gBAAa;aAAE;YAC3C,qCAAqC;YACrC,IAAI,CAAC,YAAY,KAAK,QAAQ,CAAC,EAAE,GAAG,GAAG,KAAK,QAAQ,CAAC,EAAE,GAAG;QAC9D;IACJ,OACI,MAAM,aAAa;IAGvB,qEAAqE;IACrE,IAAI,IAAI;IACR,IAAI,OAAO;IACX,IAAI,MAAM,SAAS;QAEf,IAAI,QAAQ,MAAM;QAClB,8CAA8C;QAC9C,kDAAkD;QAClD,kDAAkD;QAClD,CAAA,GAAA,aAAG,EAAE,IAAI,GAAG,GAAG,GAAG;QAElB,yCAAyC;QACzC,CAAA,GAAA,aAAG,EAAE,QAAQ,GAAG,GAAG,+BAAS,MAAM;QAElC,6CAA6C;QAC7C,iFAAiF;QACjF,uFAAuF;QACvF,CAAA,GAAA,aAAG,EAAE,SAAS,MAAM,GAAG,KAAK;QAC5B,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,UAAU,CAAA,GAAA,aAAG,EAAE,OAAO;QAC1B,CAAA,GAAA,aAAG,EAAE,UAAU,MAAM;QAErB,IAAI,UAAU,GAAG;YACb,uBAAuB;YACvB,IAAI,UAAU,MAAM;YACpB,IAAI,CAAC,UAAU,WAAW,MAAM;YAEhC,oBAAoB;YACpB,IAAI,UAAU,MAAM,iBAAiB;YACrC,IAAI,UAAU,SAAS,UAAU;YAEjC,CAAA,GAAA,aAAG,EAAE,MAAM,MAAM,MAAM;YACvB,KAAK,WAAW;QACpB;QAEA,qCAAqC;QACrC,0DAA0D;QAC1D,KAAK,WAAW,MAAM;IAC1B,OACI,KAAK,WAAW,MAAM;AAE9B;;;;;AClKA;;;;;;CAMC,GAEc,kDAAU,GAAG;IACxB,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO,CAAC;QAER,OAAO;QAEP,UAAU;QAEV,QAAQ,SAAS,eAAe,EAAE,EAAE,MAAM;YACtC,IAAI,OAAO,IAAI;YACf,IAAI,aAAa,IAAI,OAAO;YAC5B,IAAI,aAAa,IAAI,OAAO;YAE5B,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,IAAI,YAAY,KAAK,YAAY,MAAM;gBACvC,uCAAiB,WAAW,YAAY;YAC5C;QACJ;IAEJ;AACJ;AAIA;;;;AAIA,GAEA,SAAS,uCAAiB,KAAK,EAAE,MAAM,EAAE,UAAU;IAC/C,MAAM,UAAU,CAAC,CAAC,OAAO;IAEzB,IAAI,KAAK,OAAO,UAAW,OAAO,WAAW,IAAI,IAAM,OAAO,WAAW,KAAK;IAC9E,IAAI,KAAK,OAAO,QAAS,OAAO,OAAO,IAAI,IAAM,OAAO,OAAO,KAAK;IAEpE,IAAI,AAAC,CAAA,KAAK,EAAC,MAAO,GACd,MAAM,UAAU;SACb;QACH,MAAM,UAAU;QAChB,IAAI,IAAI;YACJ,IAAI,MAAM,IAAI,cAAc,KAAK;YACjC,IAAI,IACA,cAAc,KAAK,KAAK,IAAI,KAAK,GAAG,iCAAiC;;QAE7E,OACI,cAAc,KAAK,KAAK,KAAK;QAEjC,MAAM,UAAU;IACpB;AAEJ;;;;;;;ACzDe,kDAAU,GAAG,EAAE,WAAW,EAAE;IAEvC,IAAI,aAAa;IAEjB,sCAAsC;IACtC,IAAI,QAAQ,IAAI,UAAU;IAC1B,IAAI,OAAO,CAAA,GAAA,iBAAS,EAAE,UAAU;QAAE,QAAQ;QAAM,cAAc;IAAG,GAAG;IACpE,KAAK,SAAS,IAAI,KAAK,KAAK;IAC5B,IAAI,MAAM,IAAI,UAAU,qBAAqB;IAC7C,IAAI,aAAa,IAAI,GAAG,GAAG;IAC3B,IAAI,aAAa,IAAI,GAAG,GAAG;IAC3B,IAAI,QAAQ;IACZ,KAAK,WAAW;IAChB,IAAI;IAEJ,4CAA4C;IAC5C,IAAI,UAAU,kBAAkB,MAAM;IAGtC,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO;YACH,MAAM;YACN,OAAO;QACX;QAGA,OAAO,SAAU,GAAG,EAAE,KAAK;YACvB,IAAI,OAAO,KAAK,eAAe;YAC/B,IAAI,UAAU,eAAe;YAC7B,KAAK,WAAW;YAChB,MAAM,QAAQ;QAClB;QAGA,UAAU,SAAU,GAAG,EAAE,KAAK;YAC1B,MAAM,MAAM;YACZ,MAAM,QAAQ;QAClB;QAGA,QAAQ,SAAS,aAAa,EAAE,EAAE,MAAM;YACpC,IAAI,OAAO,IAAI,OAAO;YACtB,IAAI,OAAO;YACX,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,IAAI,WAAW,IAAI,KAAK,gBAAgB,MAAM;gBAC9C,IAAI,YAAY,IAAI,KAAK,WAAW,MAAM;gBAC1C,yCAAmB,KAAK,UAAU,WAAW,MAAM,OAAO,MAAM,MAAM,MAAM;YAChF;QACJ;QAGA,cAAc,SAAU,EAAE,EAAE,MAAM;YAC9B,sDAAsD;YACtD,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,IAAI,OAAO,IAAI,KAAK,gBAAgB,MAAM,MAAM;gBAChD,IAAI,OAAO,MAAM,MAAM;gBACvB,KAAK,IAAI,IAAI,CAAC,EAAE;gBAChB,KAAK,IAAI,IAAI,CAAC,EAAE;YACpB;QACJ;IAKJ;AACJ;AAEA,IAAI,kCAAY,CAAA,GAAA,aAAG,EAAE,WAAW,GAAG,GAAG;AACtC,IAAI,6BAAO,CAAA,GAAA,aAAG,EAAE,WAAW,GAAG,IAAI;AAElC,SAAS,yCAAmB,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM;IAE5E,oDAAoD;IACpD,IAAI;IACJ,IAAI,WAAW,QAAQ,KAAK,OAAO,CAAC,EAAE,GAAG,GACrC,SAAS,OAAO,cAAc,CAAC,EAAE;SAC9B;QACH,IAAI,MAAM,IAAI,WAAW,OAAO,gBAAgB,4BAAM;QACtD,IAAI,CAAC,KAAK;YACN,KAAK,WAAW;YAChB;QACJ;QACA,SAAS,IAAI,QAAQ,CAAC,EAAE,GAAG,IAAI,iBAAiB,CAAC,EAAE;IACvD;IAEA,8DAA8D;IAC9D,SAAS,KAAK,MAAM;IACpB,CAAA,GAAA,aAAG,EAAE,KAAK,iCAAW,OAAO;IAC5B,+BAAS,CAAC,EAAE,GAAG;IACf,IAAI,SAAS,CAAA,GAAA,aAAG,EAAE,gBAAgB,QAAQ;IAC1C,iEAAiE;IACjE,IAAI,SAAS,OAAO,MAAO,CAAA,SAAS,IAAG;IACvC,IAAI,SAAS,KAAK,SAAS;IAC3B,KAAK,SAAS,IAAI,SAAS;IAC3B,mBAAmB;IACnB,IAAI,OAAO,OAAO,cAAc,CAAC,EAAE,GAAG;IACtC,IAAI,QAAQ,OAAO,MAAO,CAAA,IAAI,OAAO,UAAS;IAC9C,KAAK,QAAQ,eAAe,OAAO,OAAO;IAC1C,KAAK,WAAW;AACpB;;;ACjHe,kDAAU,GAAG;IAExB,IAAI,WAAW;IAEf,OAAO;QAEH,MAAM;QAEN,OAAO;QAEP,OAAO;YACH,MAAM;QACV;QAEA,OAAO;QAEP,UAAU;QAEV,QAAQ,SAAU,EAAE,EAAE,MAAM;YACxB,iCAAiC;YACjC,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,IAAI,QAAQ,MAAM,CAAC,EAAE;gBACrB,MAAM,QAAQ;gBACd,IAAI,MAAM,OAAO,GAAG,IAAI,KAAK,gBAAgB,MAAM,MAAM;YAC7D;QACJ;IAEJ;AACJ;;;AXTA,IAAI,uCAAiB;IACjB,gBAAgB;AACpB;AAuBO,MAAM,kDAAiB,CAAA,GAAA,cAAE;IAG5B,cAAc,GACd,YAAY,GAAG,EAAE,IAAI,CAAE;QACnB,KAAK;QACL,OAAO,OAAO,OAAO,CAAC,GAAG,sCAAgB;QACzC,+DAA+D;QAC/D,IAAI,gBAAgB;YAChB,UAAU,KAAK;QACnB;QAEA;;;QAGA,GACA,IAAI,CAAC,MAAM;QAEX;;QAEA,GACA,IAAI,CAAC,QAAQ,CAAC;QAGd,2DAA2D;QAC3D,kCAAkC;QAClC,IAAI,WAAW;YACX,iBAAiB,CAAA,GAAA,wCAAkB;YACnC,gBAAgB,CAAA,GAAA,wCAAiB;YACjC,YAAY,CAAA,GAAA,wCAAa;YACzB,eAAe,CAAA,GAAA,wCAAgB;YAC/B,MAAM,CAAA,GAAA,wCAAO;YACb,UAAU,CAAA,GAAA,wCAAW;YACrB,SAAS,CAAA,GAAA,wCAAU;YACnB,UAAU,CAAA,GAAA,wCAAW;YACrB,gBAAgB,CAAA,GAAA,wCAAiB;YACjC,QAAQ,CAAA,GAAA,wCAAS;YACjB,cAAc,CAAA,GAAA,wCAAe;QACjC;QAEA,OAAO,KAAK,UAAU,QAAQ,CAAA;YAC1B,IAAI,MAAM,aAAa,CAAC,SAAS,IAAI;YACrC,IAAI,SAAS,QAAQ,CAAC,SAAS;YAC/B,IAAI,UAAU,OAAO,KAAK;YAC1B,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB;QAChD;QAIA;;;;;;;;;;;QAWA,GAEA,cAAc,GACd,IAAI,CAAC,iBAAiB,IAAI,CAAC,qBAAqB,IAAI,CAAC,MAAM;QAG3D;;;QAGA,GACA,IAAI,CAAC,aAAa,IAAI,CAAC,qBAAqB,IAAI,CAAC,MAAM;QAEvD;;;QAGA,GACA,IAAI,CAAC,cAAc,IAAI,CAAC,qBAAqB,IAAI,CAAC,MAAM;QAExD;;;QAGA,GACA,IAAI,CAAC,kBAAkB,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM;QAExD;;;QAGA,GACA,IAAI,CAAC,cAAc,CAAC;YAChB,IAAI,QAAQ,IAAI,CAAC,gBAAgB;YACjC,OAAO,AAAC,QAAS,MAAM,WAAW;QACtC;QAEA;;;QAGA,GACA,IAAI,CAAC,aAAa,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM;QAEnD;;;;QAIA,GACA,IAAI,CAAC,iBAAiB,CAAC;YACnB,IAAI,QAAQ,IAAI,CAAC,WAAW;YAC5B,OAAO,AAAC,QAAS,MAAM,OAAO;QAClC;QAEA;;;QAGA,GACA,IAAI,CAAC,UAAU,IAAI,CAAC,qBAAqB,IAAI,CAAC,MAAM;QAEpD;;;QAGA,GACA,IAAI,CAAC,cAAc,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM;QAEpD;;;QAGA,GACA,IAAI,CAAC,cAAc,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM;QAEpD;;;QAGA,GACA,IAAI,CAAC,oBAAoB,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM;QAE1D;;;;;QAKA,GACA,IAAI,CAAC,qBAAqB,IAAI,CAAC,iBAAiB,IAAI,CAAC,MAAM;QAG3D;;;;SAIC,GACD,IAAI,CAAC,4BAA4B,SAAU,GAAG,EAAE,GAAG,GAAI;IAC3D;IAKA;;;;;;IAMA,GAGA;;;;;;;;;;;KAWC,GACD,YAAY,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;QAC/B,IAAI,OAAO,QAAQ,UAAU,MAAM;YAAC;YAAK;YAAG;SAAE;QAC9C,kCAAkC;QAClC,IAAI,MAAM,IAAI,CAAC,IAAI,cAAc,KAAK,MAAM,EAAE;QAC9C,IAAI,CAAC,kBAAkB,IAAI;IAC/B;IAEA;;;;IAIA,GACA,cAAc,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QAC1B,IAAI,SAAS,IAAI,CAAC,gBAAgB;QAClC,OAAO,QAAQ,AAAC,CAAA,KAAK,EAAC,IAAK;QAC3B,OAAO,SAAS;QAChB,IAAI,CAAC,2BAA2B,IAAI;IACxC;IAKA;;;KAGC,GACD,cAAc,KAAK,EAAE;QACjB,KAAK,IAAI,SAAS,IAAI,CAAC,cAAc,IAAI,CAAC,MAAM,UAAW;YACvD,IAAI,SAAS,MAAM;YACnB,IAAI,KAAK,MAAM,QAAQ;YACvB,oCAAc,QAAQ,GAAG,CAAC,IAAI,IAAI,MAAM;YACxC,oCAAc,QAAQ,GAAG,GAAG,MAAM,QAAQ,MAAM;YAChD,oCAAc,QAAQ,GAAG,CAAC,IAAI,IAAI,MAAM;YACxC,CAAA,GAAA,aAAG,EAAE,SAAS,QAAQ,QAAQ;YAC9B,IAAI,CAAC,2BAA2B,MAAM,MAAM;QAChD;IACJ;IAEA,cAAc,GACd,kBAAkB,EAAE,EAAE;QAClB,OAAO,IAAI,CAAC,gBAAgB,IAAI;IACpC;IAEA,cAAc,GACd,kBAAkB,EAAE,EAAE,GAAG,EAAE;QACvB,IAAI,SAAS,IAAI,CAAC,gBAAgB;QAClC,CAAA,GAAA,aAAG,EAAE,KAAK,OAAO,gBAAgB;QACjC,IAAI,CAAC,2BAA2B,IAAI;IACxC;IAGA;;;IAGA,GACA,2BAA2B,EAAE,EAAE,MAAM,EAAE;QACnC,CAAA,GAAA,aAAG,EAAE,KAAK,OAAO,iBAAiB,OAAO;QACzC,IAAI,SAAS,IAAI,CAAC,IAAI;QACtB,CAAA,GAAA,aAAG,EAAE,IAAI,OAAO,UAAU,OAAO,gBAAgB;QACjD,CAAA,GAAA,yCAAoB,EAAE;QACtB,IAAI,UAAU,IAAI,CAAC,WAAW;QAC9B,IAAI,SAAS,CAAA,GAAA,wCAAqB,EAAE,SAAS;IACjD;IAMA;;;;;;;;;IASA,GAGA;;;IAGA,GACA,kBAAkB,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;QAC/B,uCAAuC;QACvC,IAAI,IAAI,CAAC,aAAa,IAAI,OAAO,IAAI,CAAC,gBAAgB,IAAI;QAC1D,IAAI,CAAC,aAAa,IAAI,MAAM;IAChC;IAGA;;;IAGA,GACA,iBAAiB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;QACtB,oDAAoD;QACpD,IAAI,MAAM,IAAI,CAAC,IAAI;QACnB,IAAI,SAAS,KAAK,MAAM,IAAI,GAAG,CAAC,EAAE;QAClC,IAAI,SAAS,KAAK,MAAM,IAAI,GAAG,CAAC,EAAE;QAClC,IAAI,SAAS,KAAK,MAAM,IAAI,GAAG,CAAC,EAAE;QAClC,IAAI,WAAW;YACX,SAAS;YAAO,SAAS;YAAO,SAAS;YACzC,SAAS;YAAO,SAAS;YAAO,SAAS;SAC5C;QACD,IAAI,OAAO,IAAI,CAAC,cAAc,IAAI,CAAC,MAAM;QACzC,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAK;YAClC,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;YACjB,IAAI,MAAM,IAAI,CAAC,gBAAgB,IAAI;YACnC,IAAI,qCAAe,UAAU,MAAM,OAAO;QAC9C;QACA,OAAO;IACX;IAIA;;IAEA,GACA,kBAAkB,GAAG,EAAE,aAAa,EAAE;QAClC,0BAA0B;QAC1B,IAAI,MAAM,IAAI,CAAC,IAAI;QACnB,IAAI,cAAc;YACd,IAAI,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;YAAE,IAAI,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;YAAE,IAAI,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;YAChE,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;YAAE,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;YAAE,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;SAChE;QACD,6BAA6B;QAC7B,IAAI;QACJ,IAAI,eAAe;YACf,YAAY,EAAE;YACd,KAAK,IAAI,aAAa,IAAI,CAAC,cAAc,eAAgB;gBACrD,IAAI,OAAO,IAAI,CAAC,gBAAgB,UAAU;gBAC1C,IAAI,MAAM,UAAU,KAAK;YAC7B;QACJ,OACI,YAAY,IAAI,CAAC,cAAc,IAAI,CAAC,MAAM;QAG9C,gBAAgB;QAChB,IAAI,OAAO,EAAE;QACb,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAK;YACvC,IAAI,QAAQ,SAAS,CAAC,EAAE;YACxB,IAAI,qCAAe,aAAa,MAAM,WAClC,KAAK,KAAK,MAAM;QAExB;QACA,OAAO;IACX;IAIA;;IAEA,GACA,IAAI,WAAW,IAAI,EAAE,QAAQ,CAAC,EAAE,SAAS,CAAC,EACtC,OAAO,IAAI,EAAE,aAAa,IAAI,EAAE,YAAY,KAAK,EAAE,SAAS,KAAK,EAAE;QAEnE,IAAI,OAAO,IAAI;QAEf,aAAa;QACb,IAAI,MAAM,IAAI,CAAC;QAEf,qBAAqB;QACrB,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,MAAM,UAAU;YACxC,UAAU,YAAY,CAAA,GAAA,aAAG,EAAE;YAC3B,OAAO;YACP,QAAQ;QACZ;QAEA,kCAAkC;QAClC,IAAI,WAAW;YACX,uCAAuC;YACvC,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,MAAM;YAClC,IAAI,OAAO,IAAI,CAAC,WAAW,KAAK;YAEhC,kDAAkD;YAClD,IAAI,aAAa,IAAI,CAAC,MAAM;YAC5B,KAAK,SAAS;gBACV,KAAK,kBAAkB,KAAK;YAChC;QACJ;QAEA,sBAAsB;QACtB,IAAI,MAAM;YACN,IAAI,CAAC,YAAY,aAAa,CAAA,GAAA,aAAG,EAAE;YACnC,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,MAAM,MAAM;gBACpC,MAAM;gBACN,QAAQ;YACZ;QACJ;QAEA,+BAA+B;QAC/B,IAAI,QACA,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,MAAM,QAAQ;YAAE,MAAM;QAAM;QAG5D,OAAO;IACX;AACJ;AAGA;;;;;;;;AAQA,GAEA,yDAAyD;AACzD,oEAAoE;AACpE,SAAS,oCAAc,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;IAC7C,IAAI,MAAM,GAAG,CAAC,MAAM,GAAG;IACvB,IAAI,MAAM,GAAG,CAAC,MAAM,GAAG;IACvB,IAAI,KAAK,IAAI,MAAM,KAAK,MAAM,QAAQ,OAAO,GAAG,CAAC,MAAM,IAAI;IAC3D,IAAI,KAAK,IAAI,MAAM,KAAK,MAAM,QAAQ,OAAO,GAAG,CAAC,MAAM,IAAI;AAC/D;AAEA,wBAAwB;AACxB,SAAS,qCAAe,IAAI,EAAE,IAAI;IAC9B,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,OAAO;IAC9B,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,OAAO;IAC9B,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,OAAO;IAC9B,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,OAAO;IAC9B,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,OAAO;IAC9B,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,OAAO;IAC9B,OAAO;AACX;;;;Aa7bA,+DAA+D;AACxD,SAAS,0CAAwB,IAAI,EAAE,IAAI;IAC9C,IAAI,IAAI,KAAK,QAAQ;IACrB,IAAI,IAAI,GAAG;IACX,IAAI,MAAM,KAAK,SAAS,GACpB,KAAK;SAEL,IAAI,CAAC,EAAE,GAAG,KAAK;AAEvB;AASO,SAAS,0CAAuB,GAAG;IACtC,IAAI,QAAQ,+BAAS,OAAO;IAC5B,IAAI,MAAM,KAAK,KAAK,MAAM,KAAK,GAAG,MAAM,MAAM;IAC9C,IAAK,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE,EAAG;QAC9B,IAAK,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE,EAC3B,IAAK,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE,EAAG;YAC9B,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;YAC9B,IAAI,MAAM,KAAK;QACnB;IAER;IACA,gCAAU;IACV,mCAAa;IACb,OAAO;AACX;AACA,IAAI,gCAAU,GAAG,mCAAa;AAQvB,SAAS,0CAAoB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM;IAC3D,IAAI,OAAO,QAAQ,UACf,oCAAc,KAAK,KAAK,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EACnD,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;SAE7B,oCAAc,KAAK,KAAK,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAC1C,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;AAEtE;AACA,SAAS,oCAAc,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAC/D,IAAI,MAAM,IAAI,MAAM,CAAC,EAAE;IACvB,IAAI,MAAM,IAAI,MAAM,CAAC,EAAE;IACvB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IACpB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;QACzB,IAAI,MAAM,IAAI,MAAM,KAAK,GAAG,KAAK,GAAG;QACpC,IAAI,MAAM,IAAI,MAAM,KAAK,GAAG,KAAK,GAAG;QACpC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YACzB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI;YAC7B,OAAO;YACP,OAAO;QACX;IACJ;AAER;AAEA,SAAS,oCAAc,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACrD,IAAI,KAAK,IAAI,MAAM,CAAC,EAAE;IACtB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IACpB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;QACzB,IAAI,KAAK,IAAI,MAAM,KAAK,GAAG,KAAK,GAAG;QACnC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YACzB,IAAI,IAAI,CAAC,GAAG,GAAG;YACf,MAAM;QACV;IACJ;AAER;AAQO,SAAS,yCAA2B,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;IACxD,IAAI,MAAM,GAAG,OAAO,GAAG,GAAG,GAAG;IAC7B,4CAA4C;IAC5C,IAAI,KAAK,KAAK,IAAI,GAAG;IACrB,IAAI,KAAK,KAAK,IAAI,GAAG;IACrB,IAAI,KAAK,MAAM;QACX,IAAK,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IACvB,IAAK,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IAAK;YAC5B,IAAI,GAAG,GAAG,GAAG,IAAI,OAAO;YACxB,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI,OAAO;QAC7B;IAER;IACA,+BAA+B;IAC/B,IAAI,KAAK,MAAM;QACX,IAAK,IAAI,IAAI,CAAC,GAAG,IAAI,GAAG,IACpB,IAAK,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,IAAK;YAC/B,IAAI,GAAG,GAAG,GAAG,IAAI,OAAO;YACxB,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,OAAO;YAC1B,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,OAAO;YACzB,IAAI,GAAG,CAAC,GAAG,GAAG,IAAI,OAAO;QAC7B;IAER;IACA,OAAO;AACX;AAUO,SAAS,uCAAe,CAAC,EAAE,CAAC,EAAE,CAAC;IAClC,OAAO,AAAC,IAAI,OACL,AAAC,CAAA,IAAI,IAAG,KAAM,KACd,AAAC,CAAA,IAAI,IAAG,KAAM;AACzB;AAYO,MAAM;IACT,aAAc;QACV,IAAI,CAAC,OAAO,CAAC;IACjB;IAEA,uCAAuC,GACvC,kBAAkB,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;QACnC,OAAO,IAAI,CAAC,IAAI,CAAC,uCAAe,GAAG,GAAG,GAAG,IAAI;IACjD;IACA,2CAA2C,GAC3C,oBAAoB,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE;QAC5C,IAAI,CAAC,IAAI,CAAC,uCAAe,GAAG,GAAG,GAAG,GAAG;IACzC;IACA,qBAAqB,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,uCAAe,GAAG,GAAG,GAAG;IAC7C;AACJ;AAgBO,MAAM;IACT,aAAc;QACV,IAAI,CAAC,MAAM,EAAE;QACb,IAAI,CAAC,OAAO,CAAC;IACjB;IACA,QAAQ,EAAE,EAAE,OAAO,EAAE;QACjB,IAAI,CAAC,IAAI,QAAQ,IAAI;IACzB;IACA,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;QACd,IAAI,KAAK,uCAAe,GAAG,GAAG;QAC9B,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;IAC1B;IACA,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,UAAU,KAAK,EAAE;QAC1B,IAAI,KAAK,uCAAe,GAAG,GAAG;QAC9B,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;QACnB,IAAI,SACA,IAAI,CAAC,IAAI,QAAQ;YAAC;YAAG;YAAG;YAAG;SAAG;aAE9B,IAAI,CAAC,IAAI,KAAK;YAAC;YAAG;YAAG;YAAG;SAAG;QAE/B,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;IACpB;IACA,cAAc,EAAE,EAAE;QACd,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,OAAO,IAAI;IACxB;IACA,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;QACZ,IAAI,KAAK,uCAAe,GAAG,GAAG;QAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG;QACpB,IAAK,IAAI,KAAK,GAAG,KAAK,IAAI,CAAC,IAAI,QAAQ,KACnC,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE;YACxB,IAAI,CAAC,IAAI,OAAO,IAAI;YACpB;QACJ;QAEJ,MAAM;IACV;IACA,QAAQ;QAAE,OAAO,IAAI,CAAC,IAAI;IAAO;IACjC,UAAU;QAAE,OAAQ,IAAI,CAAC,IAAI,WAAW;IAAG;IAC3C,QAAQ;QACJ,IAAI,CAAC,MAAM,EAAE;QACb,IAAI,CAAC,OAAO,CAAC;IACjB;IACA,MAAM;QACF,IAAI,KAAK,IAAI,CAAC,IAAI;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;QACvB,OAAO;IACX;IACA,SAAS,KAAK,EAAE;QACZ,IAAI,CAAC,MAAM,MAAM,IAAI;QACrB,IAAI,CAAC,OAAO,CAAC;QACb,IAAK,IAAI,OAAO,MAAM,KAAM,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG;IACjD;IACA,eAAe,SAAS,EAAE,UAAU,KAAK,EAAE;QACvC,gDAA0B,IAAI,CAAC,KAAK,WAAW;IACnD;AACJ;AAEA,sCAAsC;AACtC,SAAS,gDAA0B,GAAG,EAAE,MAAM,EAAE,OAAO;IACnD,IAAI,OAAO,CAAC;IACZ,KAAK,IAAI,OAAO,IACZ,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE;IAEhD,IAAI,SACA,IAAI,KAAK,CAAC,GAAG,IAAM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY;;SAExD,IAAI,KAAK,CAAC,GAAG,IAAM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,aAAa;;IAE7D,OAAO;AACX;AAaO,SAAS,0CAAgB,KAAK,EAAE,QAAQ,EAAE,EAAE,MAAM;IACrD,IAAI,CAAE,CAAA,QAAQ,CAAA,GAAI,OAAO,KAAQ;IACjC,IAAI,QAAQ,CAAC;IACb,IAAI,UAAU,GAAG,OAAO,GAAG,OAAO,GAAG,QAAQ;IAE7C,IAAI,QAAQ;QACR,UAAU,OAAO,YAAY;QAC7B;IACJ;IACA,IAAI,MAAM,CAAC;QACP,IAAI,IAAI,YAAY;QACpB,KAAK,CAAC,KAAK,GAAG,AAAC,CAAA,KAAK,CAAC,KAAK,IAAI,CAAA,IAAM,CAAA,IAAI,IAAG;QAC3C,OAAO;IACX;IACA,IAAI,SAAS;QACT,SAAS,YAAY,QAAQ;QAC7B,IAAI,OAAO,OAAO;QAClB,IAAI,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,AAAC,CAAA,QAAQ,KAAI,EAAG,QAAQ,GAAG,QAAQ,CAAC;QAC3D,OAAO,OAAO,KAAK,OAAO,IAAI,CAAA;YAC1B,IAAI,UAAU,AAAC,KAAK,CAAC,KAAK,GAAG,QAAS,MAAM,OAAO;YACnD,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,AAAC,CAAA,KAAK,CAAC,KAAK,GAAG,IAAG,EAAG,QAAQ,GAAG,EAAE,CAAC;QAC1D,GAAG,KAAK;QACR,QAAQ,IAAI,MAAM,CAAC,cAAc,EAAE,MAAM,MAAM,CAAC;QAChD,QAAQ,CAAC;QACT,OAAO,QAAQ;IACnB;IACA,OAAO,CAAC;QACJ,IAAI,UAAU,SAAS;aAClB,IAAI,UAAU,OAAO;aACrB,IAAI;IACb;AACJ;AAMO,SAAS,0CAAmB,MAAM,EAAE,MAAM,EAAE,MAAM;IACrD,IAAI,QAAQ,UAAU;IACtB,IAAI,QAAQ,UAAU;IACtB,IAAI,SAAS,CAAC;IACd,IAAI,UAAU,YAAY;IAC1B,IAAI,OAAO;IACX,OAAO,SAAS,aAAa,KAAK;QAC9B,IAAI,UAAU,SAAS;QACvB,IAAI,UAAU,OAAO;YACjB,IAAI,EAAE,OAAO,OAAO;YACpB,IAAI,IAAI,YAAY;YACpB,QAAQ,IAAI,QAAQ,QAAQ,OAAO,KAAK,QAAQ,IAAI,CAAA;gBAChD,IAAI,UAAU,MAAM,CAAC,EAAE,GAAI,CAAA,IAAI,OAAM,IAAK;gBAC1C,MAAM,CAAC,EAAE,GAAG;gBACZ,OAAO,IAAI,MAAM,QAAQ,QAAQ,KAAK;YAC1C,GAAG,KAAK;YACR,UAAU;YACV,OAAO;QACX,OAAO;YACH,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG;YACpC,MAAM,CAAC,MAAM;QACjB;IACJ;AACJ;;;;ADvTA,IAAI,gCAAU;AAqBP,SAAS,0CAAa,GAAG;IAE5B,2DAA2D;IAC3D,IAAI,CAAC,WAAW,IAAI,CAAA,GAAA,oBAAY,EAAE,kBAAkB,IAAI,UAAU;IAElE,4CAA4C;IAC5C,IAAI,eAAe;QAAC;QAAG;QAAG;KAAE;IAE5B,sDAAsD;IACtD,IAAI,kBAAkB;IAEtB,+DAA+D;IAC/D,IAAI,eAAe,IAAI,CAAA,GAAA,oBAAY,EAAE;IAErC,4BAA4B;IAC5B,IAAI,CAAC,gBAAgB,EAAE;IAEvB,qDAAqD;IACrD,uDAAuD;IACvD,8DAA8D;IAC9D,IAAI,WAAW,CAAC;IAChB,IAAI,aAAa,CAAC;QACd,IAAI,QAAQ,CAAC,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG;QACrC,IAAI,OAAO,IAAI,SAAS,gBAAgB,CAAC,GAAG;QAC5C,IAAK,IAAI,OAAO,SAAU;YACtB,IAAI,OAAO,QAAQ,CAAC,IAAI,CAAC;YACzB,IAAI,SAAS,QAAS,KAAK,aAAa,KAAK,UACzC,OAAO,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI;QAE3C;QACA,IAAI,CAAC,cAAc,KAAK;QACxB,IAAI,CAAC,KAAK,UAAU,KAAK,WAAW,CAAC;QACrC,KAAK,QAAQ,CAAC,eAAe,GAAG;QAChC,OAAO,QAAQ,CAAC,GAAG,GAAG,IAAI,sCAAgB,KAAK;IACnD;IACA,IAAI,iBAAiB;IAIrB;;;;IAIA,GAGA,oDAAoD;IACpD,IAAI,CAAC,YAAY,SAAU,KAAK;QAC5B,MAAM,gBAAgB,CAAC;IAC3B;IAGA,yDAAyD;IACzD,IAAI,CAAC,iBAAiB,SAAU,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACnD,IAAI,IAAI,MAAM,IAAI;QAClB,IAAI,IAAI,MAAM,IAAI;QAClB,IAAI,IAAI,MAAM,IAAI;QAClB,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;QAE1B,IAAI,QAAQ,MAAM,aAAa,CAAC,IAAI,IAAI;QACxC,IAAI,UAAU,SAAS,QAAO,uBAAuB;QACrD,IAAI,QAAQ,GAAG;YACX,IAAI,SAAS,WAAW;YACxB,OAAO,eAAe,OAAO;QACjC;QAEA,IAAI,UAAU,GAAG;YACb,iDAAiD;YACjD,6CAA6C;YAC7C,IAAI,WAAW,IAAI,SAAS,mBAAmB,CAAC,QAAQ;YACxD,IAAI,WAAW,YAAY,SAAS;YACpC,IAAI,UAAU;gBACV,aAAa,SAAS,eAAe,KAAK,GAAG;gBAC7C,aAAa,QAAQ,OAAO;gBAC5B,aAAa,SAAS,OAAO;gBAC7B,SAAS,cAAc,GAAG,GAAG;YACjC;YACA,IAAI,MAAM,WAAW;YACrB,IAAI,QAAQ,AAAC,WAAY,eAAe;YACxC,IAAI,YAAY,OAAO,KAAK,GAAG,GAAG,GAAG,OAAO;QAChD;QAEA,IAAI,QAAQ,KAAK,CAAC,SAAS,OAAO,MAAM,aAAa,CAAC,IAAI;QAC1D,IAAI,UAAU,GAAG,MAAM,aAAa,CAAC,IAAI,GAAG;IAChD;IAIA,+DAA+D;IAC/D,IAAI,CAAC,oBAAoB;QACrB,mCAAa;QAEb,IAAK,IAAI,MAAM,SAAU;YACrB,IAAI,MAAM,QAAQ,CAAC,GAAG;YACtB,IAAI;YACJ,IAAI,IAAI,UAAU,GAAG,IAAI;YACzB,IAAI,IAAI,UAAU,OAAO,QAAQ,CAAC,GAAG;QACzC;QAEA,mCAAa;QACb,mCAAa;IACjB;IAIA,4CAA4C;IAC5C,IAAI,CAAC,eAAe,SAAU,KAAK;QAC/B,IAAK,IAAI,OAAO,MAAM,cAAe;YACjC,IAAI,KAAK,MAAM,aAAa,CAAC,IAAI;YACjC,IAAI,KAAK,GAAG;gBACR,IAAI,MAAM,WAAW;gBACrB,IAAI,eAAe,OAAO;YAC9B;QACJ;QACA,MAAM,gBAAgB;QAEtB,sDAAsD;QACtD,kBAAkB;IACtB;IAIA,oEAAoE;IACpE,IAAI,CAAC,OAAO;QACR,IAAI,iBAAiB;YACjB,IAAI,CAAC;YACL,kBAAkB;QACtB;IACJ;IAIA,uBAAuB;IACvB,IAAI,CAAC,gBAAgB,SAAU,KAAK;QAChC,YAAY,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE;QAC3B,YAAY,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE;QAC3B,YAAY,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE;QAE3B,IAAK,IAAI,OAAO,SAAU,QAAQ,CAAC,IAAI,CAAC,UAAU;QAClD,IAAK,IAAI,OAAO,SAAU;YACtB,IAAI,MAAM,QAAQ,CAAC,IAAI;YACvB,IAAI,IAAI,SAAS;YACjB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,OAAO,IAAK;gBAChC,IAAI,KAAK,KAAK;gBACd,IAAI,MAAM,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,EAAE;gBAC/B,IAAI,MAAM,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,EAAE;gBAC/B,IAAI,MAAM,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,EAAE;YACnC;YACA,IAAI,UAAU;YACd,IAAI,QAAQ;QAChB;QACA,kBAAkB;IACtB;AAEJ;AAgBA;;;;;;AAMA,GAEA,0CAA0C,GAC1C,SAAS,sCAAgB,GAAG,EAAE,IAAI;IAC9B,IAAI,CAAC,MAAM;IACX,IAAI,CAAC,OAAO;IACZ,IAAI,CAAC,SAAS;IACd,IAAI,CAAC,WAAW;IAChB,IAAI,CAAC,QAAQ;IACb,IAAI,CAAC,QAAQ;IACb,IAAI,CAAC,UAAU;IACf,IAAI,CAAC,WAAW;IAChB,oEAAoE;IACpE,IAAI,CAAC,aAAa,CAAC;IACnB,IAAI,CAAC,WAAW,EAAE;IAClB,6BAA6B;IAC7B,IAAI,CAAC,KAAK,SAAS,OAAO;IAC1B,IAAI,CAAC,KAAK,SAAS,IAAI,cAAc;IACrC,IAAI,CAAC,IAAI,UAAU,eAAe,IAAI,CAAC,MAAM;IAC7C,IAAI,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC;IACxC,IAAI,CAAC,KAAK,aAAa;IACvB,IAAI,CAAC,KAAK,wBAAwB;IAClC,IAAI,CAAC,KAAK,2BAA2B;AACzC;AAIA,sCAAgB,UAAU,UAAU;IAChC,IAAI,IAAI,CAAC,UAAU;IACnB,IAAI,CAAC,KAAK,oBAAoB;IAC9B,IAAI,CAAC,YAAY;IACjB,IAAI,CAAC,IAAI,KAAK,uBAAuB,IAAI,CAAC;IAC1C,IAAI,CAAC,IAAI,UAAU,kBAAkB,IAAI,CAAC,MAAM;IAChD,IAAI,CAAC,OAAO;IACZ,IAAI,CAAC,aAAa;IAClB,IAAI,CAAC,WAAW;IAChB,IAAI,CAAC,WAAW;AACpB;AAGA,sCAAgB,UAAU,cAAc,SAAU,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,SAAS;IACvF,wCAAkB,IAAI;IACtB,IAAI,KAAK,IAAI,CAAC,SAAS;IACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG;IAC5B,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG;IACvB,IAAI,WAAW;QACX,UAAU,SAAS,KAAK,AAAC,MAAM,IAAI,SAAS,CAAC,EAAE,GAAI;QACnD,UAAU,SAAS,KAAK,AAAC,MAAM,IAAI,SAAS,CAAC,EAAE,GAAI;QACnD,UAAU,SAAS,KAAK,AAAC,MAAM,IAAI,SAAS,CAAC,EAAE,GAAI;QACnD,UAAU,mBAAmB;QAC7B,IAAI,WAAW,UAAU,aAAa;QACtC,qCAAe,UAAU,GAAG,IAAI,CAAC,QAAQ;IAC7C,OAAO;QACH,IAAI,WAAW;QACf,QAAQ,CAAC,GAAG,GAAG,AAAC,MAAM,IAAI,SAAS,CAAC,EAAE,GAAI,IAAI;QAC9C,QAAQ,CAAC,GAAG,GAAG,AAAC,MAAM,IAAI,SAAS,CAAC,EAAE,GAAI;QAC1C,QAAQ,CAAC,GAAG,GAAG,AAAC,MAAM,IAAI,SAAS,CAAC,EAAE,GAAI,IAAI;QAC9C,qCAAe,UAAU,GAAG,IAAI,CAAC,QAAQ;IAC7C;IACA,IAAI,CAAC;IACL,IAAI,CAAC,QAAQ;AACjB;AAGA,sCAAgB,UAAU,iBAAiB,SAAU,KAAK,EAAE,GAAG;IAC3D,IAAI,WAAW,IAAI,CAAC,UAAU,CAAC,IAAI;IACnC,IAAI,CAAE,CAAA,YAAY,CAAA,GAAI,MAAM;IAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI;IAC3B,IAAI,SAAS,YAAY;IACzB,8DAA8D;IAC9D,IAAI,UAAU,IAAI,CAAC,QAAQ;IAC3B,IAAI,WAAW,SAAS;QACpB,IAAI,YAAY,WAAW;QAC3B,qCAAe,IAAI,CAAC,QAAQ,WAAW,IAAI,CAAC,QAAQ;QACpD,8BAA8B;QAC9B,IAAI,UAAU,IAAI,CAAC,QAAQ,CAAC,QAAQ;QACpC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG;QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG;IAC5B;IACA,IAAI,CAAC;IACL,IAAI,CAAC,QAAQ;IACb,0CAAoB,IAAI;AAC5B;AAGA,sCAAgB,UAAU,eAAe;IACrC,IAAI,CAAC,IAAI,CAAC,OAAO;IACjB,IAAI,CAAC,KAAK,oBAAoB,IAAI,CAAC;IACnC,IAAI,CAAC,KAAK,0BAA0B;IACpC,IAAI,CAAC,KAAK,YAAa,IAAI,CAAC,QAAQ;IACpC,IAAI,CAAC,QAAQ;AACjB;AAIA,sCAAgB,UAAU,cAAc,SAAU,OAAO,CAAC;IACtD,IAAI,CAAC,WAAW;IAChB,IAAI,SAAS,GACT,IAAI,CAAC,SAAS;SACX;QACH,IAAI,UAAU,IAAI,aAAa,IAAI,CAAC,WAAW;QAC/C,IAAI,IAAI,CAAC,QAAQ;YACb,IAAI,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,QAAQ,QAAQ;YAC/C,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE;QAC7D;QACA,IAAI,CAAC,SAAS;IAClB;IACA,IAAI,CAAC,KAAK,sBAAsB,UAAU,IAAI,CAAC;IAC/C,IAAI,CAAC;AACT;AAGA,SAAS,wCAAkB,GAAG;IAC1B,IAAI,IAAI,QAAQ,IAAI,UAAU;IAC9B,IAAI,OAAO,KAAK,IAAI,GAAG,IAAI,WAAW;IACtC,IAAI,YAAY;AACpB;AAEA,SAAS,0CAAoB,GAAG;IAC5B,IAAI,IAAI,QAAQ,IAAI,WAAW,KAAK;IACpC,IAAI,IAAI,WAAW,KAAK;IACxB,IAAI,YAAY,KAAK,MAAM,IAAI,WAAW;IAC1C,IAAI,SAAS,SAAS,KAAK,IAAI,IAAI,SAAS,QAAQ,IAAI;AAC5D;AAIA,UAAU;AAEV,IAAI,wCAAkB;IAClB;IAAK;IAAK;IAAK;IACf;IAAK;IAAK;IAAK;IACf;IAAK;IAAK;IAAK;IACf;IAAK;IAAK;IAAK;CAClB;AAED,SAAS,qCAAe,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO;IAC9C,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK,IAAI,CAAC,UAAU,EAAE,GAAG,GAAG,CAAC,SAAS,EAAE;AACpE;AAaA,IAAI,qCAAe,AAAC,gCAChB,CAAA,GAAA,yCAAc,EAAE,+BAAS,oBAAoB,KAAQ;;;;;;;;;;AGlVlD,MAAM;IAET,4CAA4C,GAC5C,YAAY,GAAG,CAAE;QACb,wEAAwE;QACxE,IAAI,CAAC,cAAc,IAAI,UAAU,qBAAqB;QACtD,IAAI,CAAC,YAAY;QAEjB,IAAI,CAAC,eAAe;YAAC,IAAI,CAAC;SAAY;QAEtC,YAAY;QACZ,IAAI,CAAC,MAAM;QACX,IAAI,CAAC,aAAa;QAClB,IAAI,CAAC,yBAAyB,CAAC;QAC/B,IAAI,CAAC,wBAAwB,CAAC;QAC9B,IAAI,CAAC,qBAAqB,CAAC;QAC3B,IAAI,CAAC,wBAAwB,IAAI;IACrC;IAIA;;;;;;;KAOC,GAED,gBAAgB,UAAU,EAAE;QACxB,6CAA6C;QAC7C,IAAI,cAAc,IAAI,CAAC,wBACnB,OAAO,IAAI,CAAC,sBAAsB,CAAC,WAAW;QAElD,oDAAoD;QACpD,IAAI,SAAS,yCAAmB,IAAI,EAAE;QACtC,wCAAwC;QACxC,IAAI,CAAE,CAAA,UAAU,IAAI,CAAC,qBAAoB,GAAI;YACzC,IAAI,MAAM,uCAAiB,IAAI,EAAE;YACjC,IAAI,CAAC,aAAa,KAAK;YACvB,IAAI,CAAC,qBAAqB,CAAC,OAAO,GAAG;QACzC;QACA,yBAAyB;QACzB,IAAI,CAAC,sBAAsB,CAAC,WAAW,GAAG;QAC1C,OAAO;IACX;IAGA;;KAEC,GACD,YAAY,eAAe,CAAC,EAAE;QAC1B,OAAO,IAAI,CAAC,qBAAqB,CAAC,aAAa;IACnD;AAMJ;AAKA;;;;;;AAMA,GAEA;;;AAGA,GACA,SAAS,yCAAmB,IAAI,EAAE,aAAa,CAAC;IAC5C,IAAI,UAAU,KAAK,IAAI,SAAS,gBAAgB;IAEhD,gEAAgE;IAChE,IAAI,QAAQ,WAAW;QACnB,IAAI,MAAM,QAAQ;QAClB,IAAI,CAAC,KAAK,sBAAsB,IAAI,MAChC,KAAK,sBAAsB,IAAI,KAAK,KAAK;QAE7C,OAAO,KAAK,sBAAsB,IAAI;IAC1C;IAEA,iCAAiC;IACjC,IAAI,QAAQ,SAAS;QACjB,IAAI,MAAM,QAAQ;QAClB,IAAI,CAAE,CAAA,OAAO,KAAK,kBAAiB,GAC/B,KAAK,kBAAkB,CAAC,IAAI,GAAG,KAAK;QAExC,OAAO,KAAK,kBAAkB,CAAC,IAAI;IACvC;IAEA,gEAAgE;IAChE,IAAI,QAAQ,QAAQ;IACpB,IAAI,QAAQ,KAAK,QAAQ,GAAG,OAAO,KAAK,KAAK,MAAM,QAAQ;IAE3D,4EAA4E;IAC5E,OAAO;AACX;AAGA;;;AAGA,GACA,SAAS,uCAAiB,IAAI,EAAE,aAAa,CAAC;IAC1C,IAAI,UAAU,KAAK,IAAI,SAAS,gBAAgB;IAEhD,qCAAqC;IACrC,IAAI,QAAQ,WAAW,OAAO,QAAQ;IAEtC,gEAAgE;IAChE,IAAI,CAAC,QAAQ,SAAS;QAClB,IAAI,aAAc,QAAQ,QAAQ,KAAK,QAAQ,QAAQ;QACvD,IAAI,CAAC,YAAY,OAAO,KAAK;QAC7B,IAAI,UAAU,mBAAmB;QACjC,IAAI,WAAW,KAAK,IAAI,UAAU,qBAAqB;QACvD,SAAS,QAAQ,QAAQ;QACzB,SAAS;QACT,OAAO;IACX;IAEA,0DAA0D;IAC1D,IAAI,QAAQ,KAAK,IAAI,UAAU;IAC/B,IAAI,MAAM,KAAK,IAAI,UAAU,qBAAqB,sBAAsB;IACxE,IAAI,SAAS,QAAQ;IACrB,IAAI,WAAW,CAAA,GAAA,cAAM,EAAE;IACvB,IAAI,MAAM,IAAI,CAAA,GAAA,cAAM,EAAE,QAAQ,OAAO,MAAM,OAAO;IAClD,IAAI,QAAQ,aAAa,IAAI,WAAW;IACxC,IAAI,iBAAiB;IAErB,gDAAgD;IAChD,2DAA2D;IAC3D,IAAI,QAAQ,cAAc,GAAG;QACzB,IAAI,4CAAsB,KAAK;QAC/B,IAAI,KAAK,IAAI,SAAS,mBAAmB,QAAQ,UAC7C,IAAI,WAAW;IAEvB;IAEA,IAAI;IACJ,OAAO;AACX;AAYA;;;;;AAKA,GAEA,MAAM,oDAA8B,CAAA,GAAA,yBAAiB;IACjD,YAAY,QAAQ,EAAE,OAAO,CAAE;QAC3B,IAAI,WAAW;QACf,IAAI,UAAU;YAAE,0BAA0B;QAAM;QAChD,KAAK,CAAC,UAAU,cAAc,UAAU;QACxC,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,qBAAqB;QAE1B,QAAQ,iBAAiB,IAAI,CAAC;YAC1B,IAAI,CAAC,oBAAoB;QAC7B;IACJ;IAEA,oBAAoB,OAAO,EAAE;QACzB,IAAI,SAAE,KAAK,UAAE,MAAM,EAAE,GAAG,QAAQ;QAChC,IAAI,YAAY,KAAK,MAAM,SAAS;QACpC,SAAS;QACT,IAAI,OAAO,QAAQ;QAEnB,IAAI,SAAS,CAAA,GAAA,aAAK,EAAE;QACpB,IAAI,aAAa;QACjB,IAAI,UAAU;QACd,IAAI,OAAO,CAAA,GAAA,cAAM,EAAE;QACnB,IAAI,QAAQ,QAAQ;QAEpB,IAAI,CAAC,qBAAqB,IAAI,CAAA,GAAA,wBAAgB,EAC1C,MAAM,OAAO,QAAQ,WACrB,QAAQ,OAAO,YAAY,SAAS;IAE5C;IAEA,eAAe,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;QACjC,OAAO,CAAC,yBAAyB,GAAG;IACxC;IAEA,eAAe;QACX,OAAO;IACX;IAEA,YAAY,QAAQ,EAAE;QAClB,SAAS,KAAK;IAClB;IAEA,cAAc,UAAU,EAAE;QACtB,WAAW,KAAK;IACpB;IAEA,cAAc;QACV,OAAO;YAAE,KAAK,EAAE;QAAC;IACrB;IAEA,eAAe,aAAa,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE;QAClD,IAAI,IAAI,CAAC,oBACL,cAAc,WAAW,gBAAgB,IAAI,CAAC;IAEtD;IAEA,cAAc,UAAU,EAAE;QACtB,IAAI,eAAe,UAAU,OAAO;YAChC,4BAA4B,CAAC;;YAE7B,CAAC;YACD,6BAA6B,CAAC;;;;YAI9B,CAAC;QACL;QACA,IAAI,eAAe,YAAY,OAAO;YAClC,qEACI,CAAC,mEAAmE,CAAC;YACzE,+BAA+B,CAAC;;;YAGhC,CAAC;QACL;QACA,OAAO;IACX;AACJ;;;;AD7PA,yBAAyB;AACzB,IAAI,sCAAgB;AAwBb,SAAS,0CAAc,GAAG;IAE7B,kEAAkE;IAClE,IAAI,oBAAoB,IAAI,CAAA,GAAA,yCAAgB,EAAE;IAC9C,IAAI,CAAC,sBAAsB,kBAAkB;IAE7C,0EAA0E;IAC1E,IAAI,CAAC,mBAAmB,kBAAkB;IAE1C,2CAA2C;IAC3C,IAAI,eAAe,IAAI,mCAAa,KAAK;IACzC,IAAI,cAAc,IAAI,kCAAY,KAAK;IAGvC;;;;IAIA,GAEA,sEAAsE;IACtE,IAAI,CAAC,YAAY,SAAU,KAAK;QAC5B,MAAM,eAAe,SAAS;IAClC;IAEA,IAAI,CAAC,eAAe,SAAU,KAAK;QAC/B,MAAM,eAAe,QAAQ,CAAA;YACzB,IAAI,KAAK,uBAAuB;YAChC,KAAK;QACT;QACA,MAAM,eAAe,SAAS;IAClC;IAGA;;;KAGC,GACD,IAAI,CAAC,YAAY,SAAU,KAAK,EAAE,kBAAkB,KAAK;QACrD,mCAAa;QAEb,qCAAqC;QACrC,IAAI,CAAC,aAAa;QAClB,mCAAa;QAEb,8CAA8C;QAC9C,IAAI,cAAc,aAAa,KAAK,OAAO;QAC3C,mCAAa;QAEb,wDAAwD;QACxD,IAAI,SAAS,YAAY,UAAU,OAAO,aAAa;QACvD,mCAAa;QAEb,mCAAa;QAEb,iCAAiC;QACjC,OAAO,QAAQ,CAAC;YACZ,KAAK,kBAAkB,CAAA,GAAA,WAAG,EAAE;YAC5B,IAAI,UAAU,eAAe,MAAM,MAAM,MAAM,KAAK,IAAI;YACxD,IAAI,KAAK,qBAAqB;YAC9B,KAAK;YACL,KAAK;YACL,MAAM,eAAe,KAAK;YAC1B,IAAI,CAAC,KAAK,UAAU,KAAK,WAAW,CAAC;YACrC,KAAK,QAAQ,CAAC,gBAAgB,GAAG;QACrC;IACJ;IACA,IAAI,kBAAkB;AAE1B;AAQA;;;;;;;;;;;;;;AAcA,GAEA,SAAS;IACL,IAAI,CAAC,YAAY;IACjB,IAAI,CAAC,WAAW;IAChB,gDAAgD;IAChD,IAAI,CAAC,SAAS,EAAE;IAChB,IAAI,CAAC,OAAO,EAAE;IACd,IAAI,CAAC,KAAK,EAAE;IACZ,IAAI,CAAC,KAAK,EAAE;IACZ,IAAI,CAAC,KAAK,EAAE;IACZ,IAAI,CAAC,OAAO,EAAE;IACd,IAAI,CAAC,MAAM,EAAE;IACb,IAAI,CAAC,WAAW,EAAE;AACtB;AAgBA;;;;;;;;;;;;;;;;;;;AAmBA,GAEA,SAAS,mCAAa,GAAG,EAAE,iBAAiB;IAExC,wCAAwC;IACxC,IAAI,YAAY,IAAI,WAAW;IAC/B,IAAI,cAAc,IAAI,WAAW;IAEjC,0DAA0D;IAC1D,IAAI,mBAAmB,kBAAkB,gBAAgB,KAAK;IAC9D,IAAI,mBAAmB,CAAC,QAAU;IAClC,IAAI,kBAAkB;IAMtB;;;;;KAKC,GACD,IAAI,CAAC,OAAO,SAAU,KAAK,EAAE,eAAe;QACxC,IAAI,KAAK,MAAM;QACf,kBAAkB,AAAC,kBAAmB,mBAAmB;QAEzD,uDAAuD;QACvD,IAAI,YAAa,MAAM,YAAY,MAAM;QAEzC,4CAA4C,GAC5C,IAAI,cAAc,CAAC;QACnB,mCAAa;QAEb,gDAAgD;QAChD,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,EAAG;YACxB,IAAI,IAAI,AAAC,MAAM,IAAK,IAAI;YACxB,IAAI,IAAI,AAAC,MAAM,IAAK,IAAI;YAExB,kEAAkE;YAClE,IAAI,eAAe,MAAM,WAAW,KAAK,IAAI,CAAA;gBACzC,IAAI,KAAK,EAAE,QAAQ,OAAO,EAAE,OAAO,UAAU,GAAG,GAAG;gBACnD,OAAO;YACX;YAEA,gDAAgD;YAChD,IAAI,aAAa,CAAA,GAAA,cAAM,EAAE,cAAc;gBAAC;gBAAG;gBAAG;aAAE,EAC3C,GAAG,GAAG,GAAG,GACT,UAAU,GAAG,GAAG;YAErB,4CAA4C;YAC5C,IAAI,UAAU,SAAS,KAAK,IAAI;gBAC5B,YAAY,IAAI,WAAW,KAAK;gBAChC,cAAc,IAAI,WAAW,KAAK;YACtC;YAEA,gEAAgE;YAChE,sBAAsB,YAAY;YAGlC,oCAAoC;YAGpC,iEAAiE;YACjE,IAAI,OAAO,WAAW,IAAI,IAAI,GAAG;YACjC,IAAI,OAAO,WAAW,IAAI,GAAG,GAAG;YAChC,IAAI,MAAM;gBACN,0DAA0D;gBAC1D,IAAI,UAAU,KAAK,GAAG,IAAI,GAAG;gBAC7B,IAAI,SAAS,kBAAkB,GAAG,SAAS,IAAI,MAAM;gBAErD,IAAI,SAAS,GACT,2BAA2B,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,QAAQ;YAE/D;YAEA,iDAAiD;YACjD,IAAI,WAAW;YAGf,qDAAqD;YACrD,gEAAgE;YAChE,0CAA0C;YAC1C,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,GAAG,IAAK;gBAE7B,2DAA2D;gBAC3D,IAAI,MAAM,GAAG;oBACT,IAAI,KAAK,MAAM,gBAAgB,CAAC,EAAE;oBAClC,IAAI,MAAM,KAAK,OAAO,MAAM,gBAAgB,CAAC,IAAI,EAAE,EAC/C;gBAER;gBAEA,mEAAmE;gBACnE,IAAI,cAAc,AAAC,MAAM,IAAK,OAAO,MAAM;gBAE3C,IAAI,KAAK,kBAAkB,GAAG,MAAM,GAAG,MAAM,IAAI,GAAG;gBACpD,IAAI,KAAK,GACL,2BAA2B,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI;YAE/D;QAEA,oEAAoE;QACxE;QAEA,QAAQ;QACR,OAAO;IACX;IAOA;;;;IAIA,GACA,SAAS,sBAAsB,UAAU,EAAE,IAAI;QAC3C,IAAI,8BAA8B,MAAM;YACpC,4BAA4B;YAC5B,oBAAoB,IAAI,SAAS;YAEjC,IAAK,IAAI,IAAI,IAAI,IAAI,OAAO,GAAG,IAAK;gBAChC,IAAI,MAAM,AAAC,IAAI,IAAK,IAAI,AAAC,IAAI,OAAQ,IAAI;gBACzC,UAAU,CAAC,IAAI,EAAE,GAAG;oBAAC;oBAAG;oBAAG;iBAAE,CAAC,IAAI;gBAClC,eAAe,CAAC,IAAI,EAAE,GAAG;oBAAC,OAAO;oBAAG;oBAAG;iBAAE,CAAC,IAAI;gBAC9C,kBAAkB,CAAC,IAAI,EAAE,GAAG;oBAAC;oBAAG;oBAAG,OAAO;iBAAE,CAAC,IAAI;YACrD;QACJ;QAEA,IAAI,cAAc,WAAW,IAAI,GAAG,GAAG;QACvC,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;YACxB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IACnB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBACxB,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI;gBACzB,IAAI,MAAM,WAAW,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI;gBAC3C,IAAI,OAAO;gBACX,IAAI,CAAC,KAAK,OAAO;gBACjB,IAAI,QAAQ,aAAa,OAAO;gBAChC,aAAa,CAAC,GAAG,GAAG;gBACpB,SAAS,CAAC,GAAG,GAAG,OAAO;YAC3B;QAER;IACJ;IAEA,IAAI,4BAA4B;IAChC,IAAI,oBAAoB;QAAC;QAAO;KAAK;IACrC,IAAI,YAAY,MAAM,IAAI,KAAK;IAC/B,IAAI,gBAAgB,MAAM,IAAI,KAAK;IACnC,IAAI,aAAa;QAAC;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAE;IACtC,IAAI,kBAAkB;QAAC;QAAG;QAAG;QAAG;QAAG;QAAG;KAAE;IACxC,IAAI,qBAAqB;QAAC;QAAG;QAAG;QAAG;QAAG;QAAG;KAAE;IAG3C,SAAS,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC;QACzB,IAAI,KAAK,UAAU,CAAC,IAAI,EAAE;QAC1B,IAAI,KAAK,UAAU,CAAC,IAAI,EAAE;QAC1B,IAAI,KAAK,UAAU,CAAC,IAAI,EAAE;QAC1B,IAAI,KAAK,KAAK,IAAI,KAAK,IAAI;QAC3B,IAAI,WAAW,SAAS,CAAC,GAAG;QAC5B,IAAI,OAAO,aAAa,CAAC,GAAG;QAC5B,IAAI,SAAS,GACT,OAAO,iBAAiB,CAAC,SAAS,IAAI,GAAG,GAAG,GAAG;QAEnD,IAAI,SAAS;YAAC;YAAiB;SAAmB,CAAC,KAAK;QACxD,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;QACtB,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;QACtB,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;QACtB,OAAO,iBAAiB,CAAC,SAAS,IAAI,IAAI,IAAI,IAAI;IACtD;IASA;;;;;;;;;KASC,GAED,SAAS,kBAAkB,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,kBAAkB,IAAI;QACpE,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;QACvB,IAAI,OAAO;QACX,IAAI,SAAS;QACb,IAAI,OAAO,IAAI,UAAU;QACzB,IAAI,YAAa,IAAI,UAAU,aAAa,IAAI,UAAU,MAAM,CAAC,EAAE;QAEnE,IAAI,gBAAgB,IAAI,SAAS;QACjC,IAAI,cAAc,IAAI,SAAS;QAC/B,IAAI,cAAc,IAAI;QAEtB,iEAAiE;QACjE,mEAAmE;QACnE,IAAI,IAAI;QAER,sCAAsC;QACtC,IAAI,SAAS,KAAK,MAAM,IAAI,GAAG;QAC/B,IAAI,WAAW,KAAK,MAAM,CAAC,EAAE;QAC7B,IAAI,WAAW,KAAK,MAAM,CAAC,EAAE;QAC7B,IAAI,SAAS,KAAK,MAAM,IAAI,GAAG;QAC/B,IAAI,WAAW,KAAK,MAAM,CAAC,EAAE;QAC7B,IAAI,WAAW,KAAK,MAAM,CAAC,EAAE;QAE7B,IAAI,aAAa;QAEjB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,EAAE,EAAG;YAC1B,IAAI,KAAK;YACT,IAAI,KAAK;YACT,UAAU;YACV,UAAU;YAEV,uDAAuD;YACvD,IAAI,mBAAmB,eAAe,CAAC,EAAE,IAAI,GAAG;gBAC5C,KAAK;gBACL;YACJ;YAEA,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,KAAK,MAAM,UAAU,MAAM,SAAU;gBAE/D,kEAAkE;gBAClE,6DAA6D;gBAE7D,+DAA+D;gBAC/D,iDAAiD;gBAEjD,6BAA6B;gBAC7B,IAAI,MAAM,KAAK,IAAI,CAAC,GAAG;gBACvB,IAAI,MAAM,KAAK,IAAI,CAAC,GAAG;gBAEvB,0DAA0D;gBAC1D,oBAAoB;gBACpB,IAAI,QAAQ,KAAK;gBAEjB,oCAAoC;gBACpC,IAAI,MAAM,aAAa,CAAC,IAAI;gBAC5B,IAAI,MAAM,aAAa,CAAC,IAAI;gBAC5B,IAAI,OAAO,KAAK;gBAEhB,gEAAgE;gBAChE,IAAI,KAAK,YAAY,KAAK;gBAC1B,IAAI,KAAK,YAAY,KAAK,cAAc;gBACxC,IAAI,OAAO,IAAI;gBAEf,mCAAmC;gBACnC,8CAA8C;gBAC9C,uDAAuD;gBACvD,IAAI,OAAO,OAAO,GAAG;oBACjB,IAAI,CAAC,EAAE,GAAG;oBACV,IAAI,MAAM,MAAM,CAAC,EAAE,GAAG,iCAAW,cAAc,IAAI,IAAI,GAAG,GAAG;oBAC7D;gBACJ,OAAO,IAAI,OAAO,OAAO,GAAG;oBACxB,IAAI,CAAC,EAAE,GAAG,CAAC;oBACX,IAAI,MAAM,MAAM,CAAC,EAAE,GAAG,iCAAW,cAAc,IAAI,IAAI,GAAG,GAAG;oBAC7D;gBACJ;YAIJ;QACJ;QACA,OAAO;IACX;IAOA,GAAG;IACH,qCAAqC;IACrC,EAAE;IACF,yCAAyC;IAEzC,SAAS,2BAA2B,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW;QAC7E,IAAI,OAAO,IAAI,UAAU;QACzB,IAAI,OAAO;QACX,IAAI,SAAS;QAEb,IAAI,IAAI;QACR,IAAI,cAAc,IAAI;QACtB,IAAI,IAAI;YAAC;YAAG;YAAG;SAAE;QACjB,CAAC,CAAC,EAAE,GAAG;QAEP,IAAI,iBAAiB,AAAC,OAAQ,cAAc;QAE5C,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,EAAE,EAAG;YAC3B,IAAI,IAAI;YACR,IAAI,IAAI;YACR,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,KAAK,GAAG,KAAK,EAAG;gBAEtC,IAAI,UAAU,IAAI,CAAC,EAAE,GAAG;gBACxB,IAAI,CAAC,SAAS;oBACV,IAAI;oBACJ;gBACJ;gBAEA,IAAI,KAAK,MAAM,CAAC,EAAE,GAAG;gBAErB,gEAAgE;gBAChE,IAAK,IAAI,GAAG,IAAI,OAAO,GAAG,EAAE,EAAG;oBAC3B,IAAI,CAAC,eAAe,IAAI,GAAG,MAAM,SAAS,QAAQ,KAAK;gBAC3D;gBAEA,OACA,IAAK,IAAI,GAAG,IAAI,OAAO,GAAG,EAAE,EACxB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,EAAG;oBACxB,IAAI,KAAK,IAAI,IAAI,IAAI;oBACrB,IAAI,CAAC,eAAe,IAAI,MAAM,SAAS,QAAQ,KAAK,MAAM;gBAC9D;gBAGJ,2DAA2D;gBAC3D,OAAO;gBAEP,+CAA+C;gBAC/C,IAAI,QAAQ,KAAK,IAAI;gBACrB,IAAI,YAAY,gBAAgB;gBAEhC,2DAA2D;gBAC3D,uCAAuC;gBACvC,IAAI,CAAE,CAAA,aAAa,WAAU,GAAI;oBAC7B,IAAI,aAAa,mCAAa;oBAC9B,WAAW,WAAW;oBACtB,WAAW,YAAY;oBACvB,WAAW,CAAC,UAAU,GAAG;gBAC7B;gBAEA,qDAAqD;gBAErD,IAAI,WAAW,WAAW,CAAC,UAAU;gBACrC,IAAI,KAAK,SAAS;gBAClB,SAAS;gBAET,SAAS,MAAM,CAAC,GAAG,GAAG;gBACtB,CAAC,CAAC,EAAE,GAAG;gBACP,CAAC,CAAC,EAAE,GAAG;gBACP,SAAS,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;gBACtB,SAAS,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;gBACtB,SAAS,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;gBACtB,SAAS,IAAI,CAAC,GAAG,GAAG;gBACpB,SAAS,GAAG,CAAC,GAAG,GAAG;gBACnB,SAAS,QAAQ,CAAC,GAAG,GAAG;gBACxB,SAAS,IAAI,CAAC,GAAG,GAAG,AAAC,UAAU,IAAK,cAAc,cAAc;gBAGhE,wDAAwD;gBACxD,IAAK,IAAI,KAAK,GAAG,KAAK,GAAG,EAAE,GACvB,IAAK,IAAI,KAAK,GAAG,KAAK,GAAG,EAAE,GACvB,IAAI,CAAC,IAAI,KAAK,KAAK,KAAK,GAAG;gBAInC,sDAAsD;gBACtD,YAAY,IAAI;gBAChB,IAAI,aAAa,GAAG;YACxB;QACJ;IACJ;IAEA,SAAS,YAAY,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK;QACpD,IAAI,YAAY,IAAI,CAAC,MAAM,EAAE,OAAO;QACpC,IAAI,UAAU,MAAM,CAAC,MAAM,EAAE,OAAO;QACpC,OAAO;IACX;IAEA,SAAS,iBAAiB,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK;QACzD,IAAI,YAAY,IAAI,CAAC,MAAM,EAAE,OAAO;QACpC,OAAO;IACX;AAEJ;AAGA;;AAEA,GACA,IAAI,qCAAe,AAAC,CAAA;IAChB,IAAI,MAAM,EAAE,EAAE,KAAK;IACnB,IAAI,MAAM;QACN,IAAI,MAAM,IAAI,QAAQ,IAAI,KAAK,IAAI;QACnC;QACA,OAAO,GAAG,CAAC,KAAK,EAAE;IACtB;IACA,IAAI,QAAQ;QAAQ,KAAK;IAAE;IAC3B,OAAO;aAAE;eAAK;IAAM;AACxB,CAAA;AAiBA;;;;;;;;;;;;CAYC,GAED,4CAA4C,GAC5C,SAAS,kCAAY,GAAG,EAAE,iBAAiB;IAEvC;;;;IAIA,GACA,IAAI,CAAC,YAAY,SAAU,KAAK,EAAE,WAAW,EAAE,eAAe;QAC1D,IAAI,QAAQ,IAAI,UAAU;QAE1B,IAAI,OAAO,IAAI,UAAU;QACzB,IAAI,SAAS,IAAI,UAAU;QAC3B,IAAI,WAAW,IAAI,UAAU;QAE7B,IAAI,mBAAmB,IAAI,SAAS;QACpC,IAAI,iBAAiB,IAAI,SAAS;QAClC,IAAI,QAAQ;YAAC;YAAG;YAAG;SAAE;QAKrB,2DAA2D;QAC3D,2CAA2C;QAC3C,IAAI,SAAS,EAAE;QACf,IAAK,IAAI,OAAO,YAAa;YACzB,IAAI,WAAW,WAAW,CAAC,IAAI;YAC/B,IAAI,YAAY,SAAS;YAEzB,6CAA6C;YAC7C,IAAI,YAAY;YAChB,IAAI,CAAC,iBAAiB;gBAClB,IAAI,UAAU,gBAAgB,CAAC,SAAS,MAAM,CAAC,EAAE,CAAC;gBAClD,YAAa,WAAW;YAC5B;YAEA,6BAA6B;YAC7B,IAAI,KAAK,SAAS;YAClB,IAAI,UAAU,IAAI,YAAY,KAAK;YACnC,IAAI,YAAY,IAAI,aAAa,KAAK;YACtC,IAAI,UAAU,IAAI,aAAa,KAAK;YACpC,IAAI,SAAS,IAAI,aAAa,KAAK;YACnC,IAAI,MAAM,IAAI,aAAa,KAAK;YAChC,IAAI;YACJ,IAAI,WAAW,eAAe,IAAI,aAAa,KAAK;YAEpD,uDAAuD;YACvD,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,UAAU,IAAK;gBAExC,yBAAyB;gBACzB,IAAI,QAAQ,SAAS,MAAM,CAAC,EAAE;gBAC9B,IAAI,cAAc,SAAS,IAAI,CAAC,EAAE,CAAE,yBAAyB;;gBAE7D,IAAI,IAAI,SAAS,EAAE,CAAC,EAAE;gBACtB,IAAI,IAAI,SAAS,EAAE,CAAC,EAAE;gBACtB,IAAI,IAAI,SAAS,EAAE,CAAC,EAAE;gBACtB,IAAI,IAAI,SAAS,IAAI,CAAC,EAAE;gBACxB,IAAI,IAAI,SAAS,GAAG,CAAC,EAAE;gBACvB,IAAI,OAAO,AAAC,cAAc,IAAK;gBAC/B,IAAI,MAAM,AAAC,cAAc,IAAK,KAAK;gBAGnC,kBAAkB,WAAW,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG;gBAClD,OAAO,KAAK,GAAG,MAAM,GAAG,GAAG;gBAE3B,IAAI,QAAQ;oBAAC;oBAAG;oBAAG;iBAAE;gBACrB,KAAK,CAAC,KAAK,GAAG;gBACd,gBAAgB,SAAS,GAAG;gBAE5B,IAAI,KAAK,SAAS,QAAQ,CAAC,EAAE;gBAC7B,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,mCAAa;gBAChC,IAAI,SAAS,aAAa,GAAG,GAAG,GAAG;gBAEnC,eAAe,SAAS,GAAG,MAAM,KAAK;gBAEtC,IAAI,WAAW;oBACX,IAAI,aAAa,gBAAgB,CAAC,MAAM;oBACxC,gBAAgB,cAAc,GAAG;gBACrC;gBAEA,IAAI,WAAW,cAAc,CAAC,MAAM,IAAI;gBACxC,IAAI,MACA,eAAe,QAAQ,GAAG,UAAU,QAAQ,UAAU,GAAG,GAAG,GAAG;qBAE/D,oBAAoB,QAAQ,GAAG;YAEvC;YAIA,iCAAiC;YACjC,IAAI,OAAO,CAAC,MAAM,EAAE,MAAM,UAAU,CAAC,EAAE,UAAU,CAAC;YAClD,IAAI,OAAO,IAAI,CAAA,GAAA,WAAG,EAAE,MAAM;YAC1B,IAAI,OAAO,IAAI,CAAA,GAAA,iBAAS;YAExB,kBAAkB;YAClB,KAAK,YAAY;YACjB,KAAK,UAAU;YACf,KAAK,UAAU;YACf,KAAK,SAAS;YACd,KAAK,MAAM;YACX,KAAK,YAAY;YAEjB,iDAAiD;YACjD,IAAI,WACA,KAAK,gBAAgB,mBAAmB,cAAc,OAAO;YAGjE,2CAA2C;YAC3C,KAAK,aAAa;YAClB,KAAK,wBAAwB;YAC7B,KAAK,uBAAuB,IAAM;YAElC,wCAAwC;YACxC,IAAI,CAAC,iBACD,KAAK,WAAW,kBAAkB,YAAY;YAGlD,OAAO;YACP,OAAO,KAAK;QAChB;QAEA,OAAO;IACX;IAKA,mEAAmE;IAEnE,SAAS,kBAAkB,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;QAC3D,IAAI,SAAS,UAAU;QAEvB,IAAI,MAAM;YAAC;YAAG;YAAG;SAAE;QACnB,IAAI,KAAK;YAAC;YAAG;YAAG;SAAE;QAClB,IAAI,KAAK;YAAC;YAAG;YAAG;SAAE;QAClB,EAAE,CAAC,AAAC,SAAS,IAAK,IAAI,EAAE,GAAG;QAC3B,EAAE,CAAC,AAAC,SAAS,IAAK,IAAI,EAAE,GAAG;QAE3B,IAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAM;YAC3B,MAAM,CAAC,SAAS,GAAG,GAAG,GAAG,CAAC,GAAG;YAC7B,MAAM,CAAC,SAAS,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG;YAC1C,MAAM,CAAC,SAAS,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG;YACnD,MAAM,CAAC,SAAS,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG;QAC9C;IACJ;IAIA,SAAS,OAAO,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG;QACxC,IAAI,SAAS,UAAU;QACvB,IAAI,UAAU;QACd,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK,KAAK,CAAC,SAAS,EAAE,GAAG;QAChD,IAAI,MAAM,GAAG;YACT,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,IAAI;YAC5C,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,MAAM;QAClD,OAAO,IAAI,MAAM,GAAG;YAChB,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,IAAI;YAC5C,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,MAAM;QAClD,OAAO;YACH,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,IAAI;YAC5C,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC,MAAM;QACnD;IACJ;IAEA,SAAS,gBAAgB,OAAO,EAAE,OAAO,EAAE,KAAK;QAC5C,IAAI,SAAS,UAAU;QACvB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IACpB,OAAO,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,IAAI,EAAE;IAE1C;IAEA,SAAS,eAAe,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM;QACtD,IAAI,SAAS,UAAU;QACvB,IAAI,YAAY,UAAU;QAC1B,IAAI,SAAS,GAAG,MAAM,CAAC;QACvB,IAAI,KAAK,AAAC,MAAM,IAAK,IAAI;QACzB,IAAI,CAAC,QAAQ,MAAM;QACnB,IAAI,YAAY,UAAU,CAAC,GAAG;QAC9B,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IACnB,MAAM,CAAC,SAAS,EAAE,GAAG,YAAY,SAAS,CAAC,EAAE;IAErD;IACA,IAAI,aAAa;QACb;YAAC;YAAG;YAAG;YAAG;YAAG;YAAG;SAAE;QAClB;YAAC;YAAG;YAAG;YAAG;YAAG;YAAG;SAAE;QAClB;YAAC;YAAG;YAAG;YAAG;YAAG;YAAG;SAAE;QAClB;YAAC;YAAG;YAAG;YAAG;YAAG;YAAG;SAAE;KACrB;IAKD,SAAS,gBAAgB,MAAM,EAAE,OAAO,EAAE,UAAU;QAChD,IAAI,SAAS,UAAU;QACvB,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IACnB,MAAM,CAAC,SAAS,EAAE,GAAG;IAE7B;IAEA,SAAS,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAC5B,+BAA+B;QAC/B,4CAA4C;QAC5C,IAAI,MAAM,GACN,OAAO,AAAC,MAAM,IAAM,MAAM,IAAK;aAE/B,OAAO,AAAC,MAAM,IAAK,QAAS,IAAI,IAAI,IAAI;IAEhD;IAEA,SAAS,oBAAoB,MAAM,EAAE,OAAO,EAAE,GAAG;QAC7C,IAAI,SAAS,UAAU;QACvB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,EAAG;YAC5B,MAAM,CAAC,SAAS,EAAE,GAAG,GAAG,CAAC,EAAE;YAC3B,MAAM,CAAC,SAAS,IAAI,EAAE,GAAG,GAAG,CAAC,EAAE;YAC/B,MAAM,CAAC,SAAS,IAAI,EAAE,GAAG,GAAG,CAAC,EAAE;YAC/B,MAAM,CAAC,SAAS,IAAI,EAAE,GAAG;QAC7B;IACJ;IAEA,SAAS,eAAe,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACnE,IAAI,SAAS,UAAU;QACvB,YAAY,QAAQ,QAAQ,KAAK,GAAG,QAAQ;QAC5C,YAAY,QAAQ,SAAS,GAAG,KAAK,GAAG,QAAQ;QAChD,YAAY,QAAQ,SAAS,GAAG,KAAK,GAAG,QAAQ;QAChD,YAAY,QAAQ,SAAS,IAAI,KAAK,GAAG,QAAQ;IACrD;IAEA,2DAA2D;IAC3D,kCAAkC;IAClC,SAAS,YAAY,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ;QAC1D,IAAI,OAAO,AAAC,OAAO,IAAK,WAAW,MAAM,CAAC,KAAK,EAAE;QACjD,MAAM,CAAC,GAAG,GAAG,OAAO,CAAC,EAAE,GAAG;QAC1B,MAAM,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,EAAE,GAAG;QAC9B,MAAM,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,EAAE,GAAG;QAC9B,MAAM,CAAC,KAAK,EAAE,GAAG;IACrB;AAEJ;AASA;;;;;;;;;;;AAWA,GAKA;;;;;;;;;;;;;;;;;;AAkBA,GAEA,SAAS,iCAAW,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,cAAc,KAAK;IAC9D,IAAI,IAAI;IACR,IAAI,IAAI;IACR,IAAI,IAAI;IACR,IAAI,IAAI;IAER,kDAAkD;IAClD,IAAI,QAAQ,MAAM,IAAI,GAAG,IAAI;QAAE,EAAE;QAAG,EAAE;IAAE;IACxC,IAAI,QAAQ,MAAM,IAAI,GAAG,IAAI;QAAE,EAAE;QAAG,EAAE;IAAE;IACxC,IAAI,QAAQ,MAAM,GAAG,IAAI,IAAI;QAAE,EAAE;QAAG,EAAE;IAAE;IACxC,IAAI,QAAQ,MAAM,GAAG,IAAI,IAAI;QAAE,EAAE;QAAG,EAAE;IAAE;IAExC,0CAA0C;IAC1C,IAAI,cAAc,QAAQ,MAAM,GAAG;IACnC,IAAI,aAAa;QACb,4BAA4B;QAC5B,IAAI,AAAC,MAAM,KAAK,QAAQ,MAAM,IAAI,GAAG,IAAI,KAAM,IAAI;QACnD,IAAI,AAAC,MAAM,KAAK,QAAQ,MAAM,IAAI,GAAG,IAAI,KAAM,IAAI;QACnD,IAAI,AAAC,MAAM,KAAK,QAAQ,MAAM,IAAI,GAAG,IAAI,KAAM,IAAI;QACnD,IAAI,AAAC,MAAM,KAAK,QAAQ,MAAM,IAAI,GAAG,IAAI,KAAM,IAAI;QACnD,OAAO,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI;IACtC;IAEA,wCAAwC;IACxC,IAAI,aAAa;QACb,2DAA2D;QAC3D,IAAI,MAAM,KAAM,QAAQ,MAAM,IAAI,GAAG,IAAI,IAAO,IAAI;QACpD,IAAI,MAAM,KAAM,QAAQ,MAAM,IAAI,GAAG,IAAI,IAAO,IAAI;QACpD,IAAI,MAAM,KAAM,QAAQ,MAAM,IAAI,GAAG,IAAI,IAAO,IAAI;QACpD,IAAI,MAAM,KAAM,QAAQ,MAAM,IAAI,GAAG,IAAI,IAAO,IAAI;QACpD,OAAO,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI;IACtC;IAEA,sDAAsD;IACtD,IAAI,MAAM,GAAG;QACT,IAAI,QAAQ,MAAM,IAAI,GAAG,IAAI,IACzB,IAAI;aACD,IAAI,CAAE,QAAQ,MAAM,GAAG,IAAI,MAC9B,CAAE,QAAQ,MAAM,IAAI,GAAG,MACvB,CAAE,QAAQ,MAAM,IAAI,GAAG,IAAI,IAC3B,IAAI;IAEZ;IAEA,IAAI,MAAM,GAAG;QACT,IAAI,QAAQ,MAAM,IAAI,GAAG,IAAI,IACzB,IAAI;aACD,IAAI,CAAE,QAAQ,MAAM,GAAG,IAAI,MAC9B,CAAE,QAAQ,MAAM,IAAI,GAAG,MACvB,CAAE,QAAQ,MAAM,IAAI,GAAG,IAAI,IAC3B,IAAI;IAEZ;IAEA,IAAI,MAAM,GAAG;QACT,IAAI,QAAQ,MAAM,IAAI,GAAG,IAAI,IACzB,IAAI;aACD,IAAI,CAAE,QAAQ,MAAM,GAAG,IAAI,MAC9B,CAAE,QAAQ,MAAM,IAAI,GAAG,MACvB,CAAE,QAAQ,MAAM,IAAI,GAAG,IAAI,IAC3B,IAAI;IAEZ;IAEA,IAAI,MAAM,GAAG;QACT,IAAI,QAAQ,MAAM,IAAI,GAAG,IAAI,IACzB,IAAI;aACD,IAAI,CAAE,QAAQ,MAAM,GAAG,IAAI,MAC9B,CAAE,QAAQ,MAAM,IAAI,GAAG,MACvB,CAAE,QAAQ,MAAM,IAAI,GAAG,IAAI,IAC3B,IAAI;IAEZ;IAEA,OAAO,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI;AACtC;AAEA;;;;;;AAMA,GACA,SAAS,mCAAa,MAAM;IACxB,IAAI,IAAI,SAAS;IACjB,IAAI,IAAI,AAAC,UAAU,IAAK;IACxB,IAAI,IAAI,AAAC,UAAU,IAAK;IACxB,IAAI,IAAI,AAAC,UAAU,IAAK;IACxB,OAAO;QAAC;QAAG;QAAG;QAAG;KAAE;AACvB;AASA,IAAI,qCAAe,AAAC,sCAChB,CAAA,GAAA,yCAAc,EAAE,qCAAe,aAAa,KAAQ;;;AEv9BxD,IAAI,iCAAW;IACX,aAAa;AACjB;AAEA,kDAAkD;AAClD,IAAI,qCAAe;AAoBZ,MAAM;IAGT;;;IAGA,GACA,YAAY,GAAG,EAAE,IAAI,CAAE;QACnB,OAAO,OAAO,OAAO,CAAC,GAAG,gCAAU;QACnC,cAAc,GACd,IAAI,CAAC,MAAM;QAEX,cAAc,GACd,IAAI,CAAC,eAAe,KAAK;QAEzB;2CACmC,GACnC,IAAI,SAAS,CAAC;QAEd,iEAAiE;QACjE,kDAAkD;QAClD,IAAI,gBAAgB;YAAC;SAAM;QAC3B,IAAI,eAAe;YAAC;SAAM;QAC1B,IAAI,eAAe;YAAC;SAAM;QAC1B,IAAI,gBAAgB;YAAC;SAAM;QAC3B,IAAI,aAAa;YAAC;SAAK,CAAK,iCAAiC;;QAC7D,IAAI,cAAc;YAAC;SAAK,CAAI,sBAAsB;;QAClD,IAAI,gBAAgB;YAAC;SAAK,CAAE,uBAAuB;;QACnD,IAAI,eAAe;YAAC;SAAM,CAAE,6DAA6D;;QAEzF,gDAAgD;QAChD,IAAI,YAAY;YAAC;YAAG;YAAG;YAAG;YAAG;YAAG;SAAE;QAElC,qCAAqC;QACrC,IAAI,iBAAiB;YAAC;SAAK;QAC3B,IAAI,sBAAsB;YAAC;SAAG;QAE9B;;;;;;;;;SASC,GACD,qBAAqB,GACrB,IAAI,UAAU,EAAE;QAGhB;;;;QAIA,GAIA;;;;;;;;;SASC,GACD,IAAI,CAAC,gBAAgB,SAAU,KAAK,CAAC,EAAE,UAAU,IAAI;YACjD,IAAI,WAAW,IAAI,mCAAa,WAAW,QAAQ;YACnD,IAAI,OAAO,OAAO,OAAO,CAAC,GAAG,UAAU,WAAW,CAAC;YAEnD,4CAA4C;YAC5C,IAAI,KAAK,KAAK,KAAK,oCAAc,MAAM,4BAA4B;YAEnE,mDAAmD;YACnD,uDAAuD;YACvD,MAAO,KAAK,cAAc,OACtB,IAAI,CAAC,cAAc,cAAc,QAAQ,CAAC;YAG9C,2CAA2C;YAC3C,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK;YAC3B,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK;YAC1B,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK;YAE1B,wBAAwB;YACxB,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK;YAC3B,WAAW,CAAC,GAAG,GAAG,KAAK,aAAa;YAEpC,+BAA+B;YAC/B,6EAA6E;YAC7E,IAAI,MAAM,KAAK,YAAY;YAC3B,IAAI;YACJ,IAAI,CAAC,KACD,OAAO;gBAAC;gBAAM;gBAAM;gBAAM;gBAAM;gBAAM;aAAK;iBACxC,IAAI,OAAO,OAAO,UACrB,OAAO;gBAAC;gBAAK;gBAAK;gBAAK;gBAAK;gBAAK;aAAI;iBAClC,IAAI,IAAI,UAAU,IAAI,UAAU,GACnC,mCAAmC;YACnC,OAAO;gBAAC,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;aAAC;iBACpD,IAAI,IAAI,UAAU,IAAI,UAAU,GACnC,oCAAoC;YACpC,OAAO;gBAAC,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;gBAAE,GAAG,CAAC,EAAE;aAAC;iBACpD,IAAI,IAAI,UAAU,IAAI,UAAU,GACnC,wCAAwC;YACxC,OAAO;iBACJ,MAAM,iCAAiC;YAE9C,gFAAgF;YAChF,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,EACrB,SAAS,CAAC,KAAK,IAAI,EAAE,GAAG,oCAAc,IAAI,EAAE,QAAQ,IAAI,CAAC,EAAE,EAAE;YAGjE,+DAA+D;YAC/D,UAAU,CAAC,GAAG,GAAG,CAAC;YAElB,qDAAqD;YACrD,IAAI,YAAY,CAAC,GAAG,EAAE;gBAClB,UAAU,CAAC,GAAG,CAAC,eAAe,KAAK;gBACnC,UAAU,CAAC,GAAG,CAAC,YAAY,KAAK;YACpC;YAEA,kBAAkB;YAClB,IAAI,aAAa,KAAK,UAAU,KAAK,YAAY,KAAK,SAAS,KAAK,WAAW,KAAK;YACpF,aAAa,CAAC,GAAG,GAAG,AAAC,aAAc,IAAI,0CAAoB,QAAQ;YAEnE,kCAAkC;YAClC,0DAA0D;YAC1D,IAAI,UAAU,aAAa,CAAC,GAAG,IAAI,YAAY,CAAC,GAAG,IAC5C,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG;YAC7D,YAAY,CAAC,GAAG,GAAG;YAEnB,OAAO;QACX;QAKA;;;;;SAKC,GAED,IAAI,CAAC,mBAAmB,SAAU,OAAO,GAAG,EAAE,UAAU,IAAI;YACxD,mCAAmC;YACnC,IAAI,MAAM,QAAQ,UACd,MAAM;YAGV,IAAI,OAAO,OAAO,OAAO,IAAI,yCAAmB,WAAW,CAAC;YAC5D,IAAI,QAAQ,MAAM,CAAC,KAAK,IAAI,QAAQ;YACpC,MAAM,CAAC,KAAK,GAAG;YAEf,IAAI,SAAS,KAAK,aAAa,IAAI,CAAC,eAAe,KAAK,aAAa;YACrE,IAAI,QAAQ;YACZ,IAAI,QAAQ,KAAK,SAAS;gBAAC;gBAAK;gBAAK;aAAI;YACzC,IAAI,MAAM,WAAW,GAAG,QAAQ,MAAM;YACtC,IAAI,QAAQ,QAAQ;YAEpB,6CAA6C;YAC7C,cAAc,CAAC,MAAM,GAAG;YACxB,mBAAmB,CAAC,MAAM,GAAG,KAAK;YAElC,OAAO,CAAC,MAAM,GAAG;uBACb;uBACA;gBACA,SAAS;gBACT,aAAa,CAAC,CAAC,KAAK;gBACpB,YAAY,KAAK;gBACjB,WAAW,KAAK;YACpB;YACA,OAAO;QACX;QAIA;;SAEC,GAED;;;SAGC,GACD,IAAI,CAAC,mBAAmB,SAAU,EAAE;YAChC,OAAO,aAAa,CAAC,GAAG;QAC5B;QAEA;;;;SAIC,GACD,IAAI,CAAC,kBAAkB,SAAU,EAAE;YAC/B,OAAO,YAAY,CAAC,GAAG;QAC3B;QAEA;;;SAGC,GACD,IAAI,CAAC,mBAAmB,SAAU,EAAE;YAChC,OAAO,YAAY,CAAC,GAAG;QAC3B;QAEA;;;SAGC,GACD,IAAI,CAAC,gBAAgB,SAAU,EAAE;YAC7B,OAAO,UAAU,CAAC,GAAG;QACzB;QAEA,qCAAqC;QACrC,kDAAkD;QAClD,IAAI,CAAC,uBAAuB,SAAU,OAAO,EAAE,GAAG;YAC9C,OAAO,SAAS,CAAC,UAAU,IAAI,IAAI;QACvC;QAGA;;;;SAIC,GACD,IAAI,CAAC,kBAAkB,SAAU,KAAK;YAClC,OAAO,OAAO,CAAC,MAAM;QACzB;QAGA;;;;;SAKC,GACD,IAAI,CAAC,qBAAqB,SAAU,MAAM,EAAE;YACxC,OAAO,QAAQ,KAAK,CAAA;gBAChB,IAAI,IAAI,YAAY,KAAK,OAAO;gBAChC,OAAO,IAAI;YACf;QACJ;QAMA;;;;SAIC,GAGD,mCAAmC;QACnC,cAAc,GACd,IAAI,CAAC,kBAAkB;QACvB,cAAc,GACd,IAAI,CAAC,iBAAiB;QACtB,cAAc,GACd,IAAI,CAAC,kBAAkB;QACvB,cAAc,GACd,IAAI,CAAC,gBAAgB;QACrB,cAAc,GACd,IAAI,CAAC,mBAAmB;QACxB,cAAc,GACd,IAAI,CAAC,sBAAsB;QAC3B,cAAc,GACd,IAAI,CAAC,sBAAsB;QAC3B,cAAc,GACd,IAAI,CAAC,uBAAuB;QAC5B,cAAc,GACd,IAAI,CAAC,uBAAuB;QAI5B;;;;SAIC,GAED,4CAA4C;QAC5C,mEAAmE;QACnE,IAAI,CAAC,iBAAiB,QAAQ;YAAE,OAAO;gBAAC;gBAAK;gBAAK;aAAE;QAAC;QACrD,IAAI,CAAC,cAAc,GAAG;YAAE,UAAU;QAAO;IAE7C;AAEJ;AAEA;;;;AAIA,GAIA,qCAAqC;AACrC,yDAAyD;AACzD,SAAS,oCAAc,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ;IAC9C,IAAI,CAAC,MAAM,OAAO;IAClB,IAAI,KAAK,MAAM,CAAC,KAAK;IACrB,IAAI,OAAO,aAAa,UAAU,KAAK,IAAI,iBAAiB;IAC5D,OAAO;AACX;AAIA,mDAAmD;AACnD,SAAS,0CAAoB,IAAI;IAC7B,IAAI,CAAC,SAAS,KAAK,UAAU;IAC7B,IAAI,CAAC,WAAW,KAAK,YAAY;IACjC,IAAI,CAAC,QAAQ,KAAK,SAAS;IAC3B,IAAI,CAAC,UAAU,KAAK,WAAW;IAC/B,IAAI,CAAC,qBAAqB,KAAK,sBAAsB;AACzD;AAKA;;CAEC,GACD,SAAS,mCAAa,UAAU,KAAK;IACjC,kCAAkC,GAClC,IAAI,CAAC,QAAQ,AAAC,UAAW,QAAQ;IACjC,wDAAwD,GACxD,IAAI,CAAC,SAAS,AAAC,UAAW,QAAQ;IAClC,6DAA6D,GAC7D,IAAI,CAAC,QAAQ;IACb;;;;;;IAMA,GACA,IAAI,CAAC,WAAW;IAChB,gEAAgE,GAChE,IAAI,CAAC,YAAY;IACjB,qCAAqC,GACrC,IAAI,CAAC,eAAe;IACpB,qCAAqC,GACrC,IAAI,CAAC,YAAY;IACjB,mDAAmD,GACnD,IAAI,CAAC,SAAS;IACd,mDAAmD,GACnD,IAAI,CAAC,WAAW;IAChB,mDAAmD,GACnD,IAAI,CAAC,QAAQ;IACb,mDAAmD,GACnD,IAAI,CAAC,UAAU;IACf,uEAAuE,GACvE,IAAI,CAAC,qBAAqB;AAC9B;AAEA,4EAA4E,GAG5E;;CAEC,GACD,SAAS;IACL;;KAEC,GACD,IAAI,CAAC,QAAQ;IACb;;KAEC,GACD,IAAI,CAAC,aAAa;IAClB,wCAAwC,GACxC,IAAI,CAAC,cAAc;IACnB,+DAA+D,GAC/D,IAAI,CAAC,aAAa;IAClB;;;KAGC,GACD,IAAI,CAAC,iBAAiB;AAC1B;;;;;;;;;;AEzYO,MAAM;IAET,cAAc,GACd,YAAY,SAAS,EAAE,SAAS,CAAE;QAC9B,IAAI,QAAQ,UAAU;QACtB,MAAM,cAAc,IAAI,CAAA,GAAA,2BAAmB,EAAE;QAE7C,sBAAsB;QACtB,IAAI,cAAc;QAClB,IAAI,gBAAgB;QACpB,IAAI,gBAAgB;QAEpB,yBAAyB;QACzB,IAAI,SAAS,IAAI,CAAA,GAAA,aAAK,EAAE;QACxB,MAAM,mBAAmB;QACzB,OAAO,SAAS,EAAE;QAClB,IAAI,gBAAgB,CAAC;QAGrB;;;;QAIA,GAEA,IAAI,CAAC,SAAS,CAAC;YAAa,oBAAoB,QAAQ;QAAQ;QAEhE,IAAI,CAAC,UAAU,CAAC,MAAM,UAAU,KAAK;YACjC,IAAI,CAAC,KAAK,UAAU,KAAK,WAAW,CAAC;YAErC,6DAA6D;YAC7D,IAAI,CAAC,UAAU;gBACX,IAAI,KAAK,QAAQ,CAAC,cAAc,EAAE;gBAClC,OAAO,eAAe,KAAK;gBAC3B,KAAK,QAAQ,CAAC,cAAc,GAAG;gBAC/B;YACJ;YAEA,oEAAoE;YACpE,IAAI,KAAK,KAAK,MAAM,GAAG,CAAC,EAAE,GAAG;YAC7B,IAAI,KAAK,KAAK,MAAM,GAAG,CAAC,EAAE,GAAG;YAC7B,IAAI,KAAK,KAAK,MAAM,GAAG,CAAC,EAAE,GAAG;YAC7B,IAAI,SAAS,CAAA,GAAA,sCAAa,EAAE,IAAI,IAAI;YAEpC,4BAA4B;YAC5B,IAAI,QAAQ,aAAa,CAAC,OAAO;YACjC,IAAI,CAAC,OAAO;gBACR,6DAA6D;gBAC7D,IAAI,OAAO;oBAAC,KAAK;oBAAI,KAAK;oBAAI,KAAK;iBAAG;gBACtC,IAAI,MAAM;oBAAC;oBAAG;oBAAG;iBAAE;gBACnB,UAAU,IAAI,cAAc,MAAM,MAAM;gBACxC,yCAAyC;gBACzC,QAAQ,gBAAgB,KAAK;gBAC7B,OAAO,OAAO,KAAK;gBACnB,aAAa,CAAC,OAAO,GAAG;gBACxB,MAAM,aAAa;YACvB;YAEA,6BAA6B;YAC7B,MAAM,QAAQ,KAAK;YACnB,KAAK,QAAQ,CAAC,YAAY,GAAG;YAC7B,KAAK,QAAQ,CAAC,cAAc,GAAG;YAE/B,wDAAwD;YACxD,KAAK,2BAA2B;QACpC;QAIA,IAAI,CAAC,aAAa,CAAC;YACf,IAAI,CAAC,KAAK,UAAU;YAEpB,IAAI,KAAK,QAAQ,CAAC,cAAc,EAAE;gBAC9B,CAAA,GAAA,yCAAsB,EAAE,OAAO,gBAAgB;gBAC/C,KAAK,QAAQ,CAAC,cAAc,GAAG;YACnC;YACA,IAAI,KAAK,QAAQ,CAAC,cAAc,EAAE;gBAC9B,IAAI,QAAQ,KAAK,QAAQ,CAAC,YAAY;gBACtC,IAAI,SAAS,MAAM,SAAS;oBACxB,CAAA,GAAA,yCAAsB,EAAE,MAAM,SAAS;oBACvC,IAAI,MAAM,QAAQ,WAAW,GAAG;wBAC5B,OAAO,aAAa,CAAC,MAAM,WAAW;wBACtC,CAAA,GAAA,yCAAsB,EAAE,OAAO,QAAQ;oBAC3C;gBACJ;gBACA,KAAK,QAAQ,CAAC,YAAY,GAAG;gBAC7B,KAAK,QAAQ,CAAC,cAAc,GAAG;YACnC;QACJ;QAIA,sBAAsB;QACtB,IAAI,CAAC,oBAAoB,CAAC,MAAM,UAAU,KAAK;YAC3C,IAAI,KAAK,QAAQ,CAAC,YAAY,EAAE;gBAC5B,iBAAiB;gBACjB,IAAI,KAAK,QAAQ,CAAC,cAAc,KAAK,SAAS;gBAC9C,IAAI,QAAQ,KAAK,QAAQ,CAAC,YAAY;gBACtC,IAAI,SAAS,MAAM;oBACf,IAAI,SACA,MAAM,QAAQ,KAAK;yBAEnB,CAAA,GAAA,yCAAsB,EAAE,MAAM,SAAS;;gBAG/C,KAAK,QAAQ,CAAC,cAAc,GAAG;YACnC,OAAO;gBACH,kBAAkB;gBAClB,IAAI,KAAK,QAAQ,CAAC,cAAc,KAAK,SAAS;gBAC9C,IAAI,SACA,OAAO,eAAe,KAAK;qBAE3B,CAAA,GAAA,yCAAsB,EAAE,OAAO,gBAAgB;gBAEnD,KAAK,QAAQ,CAAC,cAAc,GAAG;YACnC;QACJ;QAEA;;;;QAIA,GAEA,IAAI,MAAM,KAAQ;QAClB,IAAI,KAAK,YAAY,UAAU,IAAI,MAAM;QAEzC,IAAI,sBAAsB,CAAC,QAAQ;YAC/B,OAAO,OAAO,QAAQ,CAAA;gBAClB,MAAM,SAAS,gBAAgB;gBAC/B,MAAM,SAAS,gBAAgB;gBAC/B,MAAM,iBAAiB,QAAQ,CAAA,IAAK,EAAE,gBAAgB;gBACtD,IAAI,MAAM,QAAQ,oBAAoB,OAAO;YACjD;QACJ;QAEA,IAAI,kBAAkB,CAAC,OAAO;YAC1B,IAAI,MAAM,IAAI,CAAA,GAAA,cAAM,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE;YAClD,IAAI,MAAM,IAAI,CAAA,GAAA,cAAM,EAAE,KAAK,CAAC,EAAE,GAAG,MAAM,KAAK,CAAC,EAAE,GAAG,MAAM,KAAK,CAAC,EAAE,GAAG;YACnE,OAAO,IAAI,CAAA,GAAA,kBAAU,EAAE,KAAK,KAAK,WAAW,WAAW,WAAW;QACtE;IAEJ;AAEJ;;;;;;;;;;;;;ADhJA,iBAAiB;AACjB,IAAI,gCAAU;AAId,IAAI,iCAAW;IACX,SAAS;IACT,WAAW;IACX,YAAY;QAAC;QAAK;QAAK;KAAE;IACzB,cAAc;QAAC;QAAK;QAAK;KAAI;IAC7B,cAAc;QAAC;QAAG;QAAG;KAAE;IACvB,eAAe;QAAC;QAAG;QAAG;KAAE;IACxB,aAAa;QAAC;QAAG;QAAI;KAAI;IACzB,OAAO;IACP,eAAe;QAAC;QAAM;QAAK;KAAI;IAC/B,qBAAqB;IACrB,uBAAuB;IACvB,iBAAiB;IACjB,gBAAgB;AACpB;AA6BO,MAAM;IAET;;;IAGA,GACA,YAAY,GAAG,EAAE,IAAI,EAAE,MAAM,CAAE;QAC3B,OAAO,OAAO,OAAO,CAAC,GAAG,gCAAU;QACnC,cAAc,GACd,IAAI,CAAC,MAAM;QAEX,WAAW;QACX,uEAAuE,GACvE,IAAI,CAAC,iBAAiB,CAAC,CAAC,KAAK;QAE7B,YAAY;QACZ,cAAc,GACd,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK;QACpB,cAAc,GACd,IAAI,CAAC,SAAS,KAAK;QACnB,cAAc,GACd,IAAI,CAAC,WAAW,KAAK;QACrB,cAAc,GACd,IAAI,CAAC,oBAAoB,EAAE,KAAK;;QAEhC,+CAA+C,GAC/C,IAAI,CAAC,SAAS;QACd,8CAA8C,GAC9C,IAAI,CAAC,QAAQ;QACb,6DAA6D,GAC7D,IAAI,CAAC,QAAQ;QACb,qDAAqD,GACrD,IAAI,CAAC,SAAS;QAEd,qCAAqC;QACrC,IAAI,CAAC,WAAW,QAAQ;QAExB,gBAAgB;QAChB,IAAI,KAAK,SAAS;IACtB;IAKA;;;KAGC,GACD,WAAW,MAAM,EAAE,IAAI,EAAE;QAErB,2BAA2B;QAC3B,IAAI,CAAC,SAAS,IAAI,CAAA,GAAA,aAAK,EAAE,QAAQ,KAAK,WAAW;YAC7C,uBAAuB,KAAK;QAChC;QACA,IAAI,QAAQ,IAAI,CAAA,GAAA,YAAI,EAAE,IAAI,CAAC;QAC3B,IAAI,CAAC,QAAQ;QACb,4BAA4B;QAC5B,MAAM;QAEN,4DAA4D;QAC5D,MAAM,sBAAsB,CAAA,GAAA,+BAAuB,EAAE;QACrD,MAAM,YAAY;QAElB,uBAAuB;QACvB,IAAI,YAAY,KAAK,MAAM,KAAK;QAChC,cAAc,GACd,IAAI,CAAC,iBAAiB,IAAI,CAAA,GAAA,yCAAiB,EAAE,IAAI,EAAE;QAEnD,yDAAyD;QACzD,cAAc,GACd,IAAI,CAAC,gBAAgB,IAAI,CAAA,GAAA,oBAAY,EAAE,aAAa;QACpD,IAAI,CAAC,SAAS,IAAI,CAAA,GAAA,iBAAS,EAAE,UAAU,IAAI,CAAA,GAAA,cAAM,EAAE,GAAG,GAAG,IAAI;QAC7D,IAAI,CAAC,OAAO,SAAS,IAAI,CAAC;QAC1B,IAAI,CAAC,OAAO,OAAO;QAEnB,0EAA0E;QAC1E,cAAc,GACd,IAAI,CAAC,aAAa,CAAA,GAAA,kBAAU,EAAE,aAAa;YAAE,MAAM;QAAG,GAAG;QACzD,IAAI,CAAC,eAAe,IAAI,CAAC;QACzB,IAAI,CAAC,WAAW,SAAS,IAAI;QAC7B,IAAI,CAAC,WAAW,SAAS,IAAI,CAAC;QAC9B,cAAc,GACd,IAAI,CAAC,gBAAgB,IAAI,CAAC,qBAAqB;QAC/C,IAAI,CAAC,WAAW,WAAW,IAAI,CAAC;QAChC,IAAI,CAAC,WAAW,WAAW;QAC3B,IAAI,CAAC,cAAc;QACnB,cAAc,GACd,IAAI,CAAC,eAAe;QAEpB,sBAAsB;QACtB,MAAM,aAAa,CAAA,GAAA,aAAK,EAAE,UAAU,KAAK;QACzC,MAAM,eAAe,CAAA,GAAA,aAAK,EAAE,UAAU,KAAK;QAE3C,IAAI,WAAW,CAAA,GAAA,cAAM,EAAE,UAAU,KAAK;QACtC,IAAI,CAAC,QAAQ,IAAI,CAAA,GAAA,uBAAe,EAAE,SAAS,UAAU;QACrD,IAAI,CAAC,MAAM,UAAU,CAAA,GAAA,aAAK,EAAE,UAAU,KAAK;QAC3C,IAAI,CAAC,MAAM,WAAW,CAAA,GAAA,aAAK,EAAE,UAAU,KAAK;QAE5C,gBAAgB;QAChB,MAAM,yBAAyB;IACnC;AACJ;AAIA;;CAEC,GAGD,4DAA4D,GAC5D,0CAAU,UAAU,WAAW;IAC3B,OAAO,IAAI,CAAC;AAChB;AAEA,gDAAgD;AAChD,cAAc,GACd,0CAAU,UAAU,OAAO,SAAU,EAAE;AACnC,6BAA6B;AACjC;AAKA,cAAc,GACd,0CAAU,UAAU,SAAS;IACzB,mCAAa;IACb,4CAAsB,IAAI;IAC1B,mCAAa;IACb,IAAI,CAAC,OAAO;IACZ,mCAAa;IACb,IAAI,CAAC,MAAM;IACX,mCAAa;IACb;IACA,IAAI,CAAC,OAAO;IACZ,mCAAa;IACb,mCAAa;AACjB;AAGA,cAAc,GACd,0CAAU,UAAU,aAAa;AAC7B,oBAAoB;AACxB;AAGA,cAAc,GACd,0CAAU,UAAU,SAAS;IACzB,IAAI,CAAC,OAAO;IACZ,IAAI,IAAI,CAAC,IAAI,WAAW,IAAI,CAAC,gBACzB,IAAI,CAAC,MAAM;AAEnB;AAGA,cAAc,GACd,0CAAU,UAAU,qBAAqB,SAAU,IAAI,EAAE,MAAM,EAAE,OAAO;IACpE,IAAI,IAAI,uCAAiB,IAAI;IAC7B,IAAI,MAAM;QACN,0CAA0C;QAC1C,IAAI,CAAC,IAAI,cAAc,QAAQ,MAAM;QACrC,6DAA6D;QAC7D,IAAI,OAAO,CAAA,GAAA,aAAK,EAAE,KAAK,IAAI,CAAC,IAAI,OAAO,qBAAqB;QAC5D,IAAI,OAAO,QAAQ,QAAQ;QAC3B,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IACnB,IAAI,OAAO,CAAC,EAAE,KAAK,GACf,2BAAK,CAAC,EAAE,IAAI;aAEZ,2BAAK,CAAC,EAAE,IAAI,AAAC,OAAO,CAAC,EAAE,GAAG,IAAK,IAAI,OAAO,CAAC;QAGnD,EAAE,SAAS,eAAe,2BAAK,CAAC,EAAE,EAAE,2BAAK,CAAC,EAAE,EAAE,2BAAK,CAAC,EAAE;QACtD,EAAE,SAAS,IAAI,AAAC,OAAO,CAAC,EAAE,GAAI,KAAK,KAAK,IAAI;QAC5C,EAAE,SAAS,IAAI,AAAC,OAAO,CAAC,EAAE,GAAI,KAAK,KAAK,IAAI;IAChD;IACA,EAAE,WAAW;AACjB;AACA,IAAI,8BAAQ,EAAE;AAKd;;;;;;;CAOC,GACD,0CAAU,UAAU,iBAAiB,SAAU,IAAI,EAAE,WAAW,KAAK,EAAE,MAAM,IAAI,EAAE,kBAAkB,IAAI;IACrG,IAAI,CAAC,KAAK,UAAU,KAAK,WAAW,CAAC;IAErC,yDAAyD;IACzD,IAAI,KAAK,QAAQ,CAAC,uCAAiB,EAAE;QACjC,IAAI,CAAC,eAAe,kBAAkB,MAAM;QAC5C;IACJ;IACA,KAAK,QAAQ,CAAC,uCAAiB,GAAG;IAElC,wEAAwE;IACxE,IAAI,CAAC,KAAK,QAAQ;QACd,IAAI,CAAC,KAAK,MAAM,KAAK,SAAS;QAC9B,IAAI,OAAO,IAAI,CAAC,IAAI,cAAc,KAAK,MAAM,EAAE;QAC/C,KAAK,SAAS,UAAU;IAC5B;IAEA,kDAAkD;IAClD,IAAI,CAAC,eAAe,QAAQ,MAAM,UAAU,KAAK;IACjD,KAAK,oBAAoB,IAAI;QACzB,IAAI,CAAC,eAAe,WAAW;QAC/B,KAAK,QAAQ,CAAC,uCAAiB,GAAG;IACtC;AACJ;AACA,IAAI,yCAAmB;AAKvB;;;;;;CAMC,GACD,0CAAU,UAAU,oBAAoB,SAAU,IAAI,EAAE,UAAU,KAAK;IACnE,IAAI,CAAC,KAAK,UAAU,KAAK,WAAW,CAAC;IACrC,IAAI,KAAK,QAAQ,CAAC,uCAAiB,EAC/B,IAAI,CAAC,eAAe,kBAAkB,MAAM;SAE5C,IAAI,SAAS,IAAI,CAAC,eAAe;AAEzC;AASA;;;;CAIC,GACD,0CAAU,UAAU,uBAAuB,SAAU,IAAI;IACrD,IAAI,MAAM,IAAI,CAAA,GAAA,uBAAe,EAAE,MAAM,IAAI,CAAC;IAC1C,IAAI,cAAc,eAAe,GAAG,GAAG;IACvC,IAAI,aAAa,eAAe,GAAG,GAAG;IACtC,IAAI,aAAa,eAAe,GAAG,GAAG;IACtC,OAAO;AACX;AAQA;;;;CAIC,GAMD;;;;;;CAMC,GACD,cAAc,GACd,0CAAU,UAAU,2BAA2B,SAAU,KAAK;AAC1D,6DAA6D;AACjE;AAEA,cAAc,GACd,0CAAU,UAAU,2BAA2B,SAAU,KAAK;AAC1D,oBAAoB;AACxB;AAOA,oEAAoE;AACpE,cAAc,GACd,0CAAU,UAAU,gBAAgB,SAAU,KAAK;IAC/C,IAAI,OAAO,IAAI,CAAA,GAAA,cAAM,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE;IAEnD,IAAI,CAAC,MAAM,OAAO,QAAQ,CAAA;QACtB,uDAAuD;QACvD,IAAI,KAAK,QAAQ;QAEjB,uEAAuE;QACvE,KAAK,SAAS,gBAAgB;QAE9B,IAAI,KAAK,qBACL,2DAA2D;QAC3D,KAAK;IAEb;IAEA,wCAAwC;IACxC,IAAI,CAAC,eAAe,OAAO;AAC/B;AAMA,qEAAqE;AAErE,SAAS,4CAAsB,IAAI;IAC/B,IAAI,MAAM,KAAK,IAAI;IACnB,IAAI,SAAS,IAAI;IACjB,KAAK,cAAc,SAAS,eAAe,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;IAC1E,KAAK,cAAc,SAAS,IAAI,IAAI;IACpC,KAAK,cAAc,SAAS,IAAI,IAAI;IACpC,KAAK,OAAO,SAAS,IAAI,CAAC,IAAI;IAE9B,kEAAkE;IAClE,IAAI,OAAO,IAAI;IACf,IAAI,MAAM,KAAK,IAAI;IACnB,IAAI,KAAK,KAAK,MAAM,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;IACpC,IAAI,KAAK,KAAK,MAAM,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;IACpC,IAAI,KAAK,KAAK,MAAM,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;IACpC,IAAI,KAAK,KAAK,IAAI,SAAS,IAAI,IAAI;IACnC,wCAAkB,MAAM;AAC5B;AAIA,8FAA8F;AAE9F,SAAS,wCAAkB,IAAI,EAAE,EAAE;IAC/B,IAAI,OAAO,KAAK,cAAc;IAC9B,IAAI,OAAO,GACP,KAAK,WAAW,WAAW;SACxB;QACH,IAAI,QAAQ,KAAK,IAAI,SAAS,qBAAqB,IAAI;QACvD,IAAI,OAAO;YACP,IAAI,UAAU,KAAK,IAAI,SAAS,gBAAgB;YAChD,IAAI,MAAM,QAAQ;YAClB,IAAI,QAAQ,QAAQ;YACpB,IAAI,OAAO,SAAS,QAAQ,GAAG;gBAC3B,KAAK,cAAc,aAAa,IAAI,GAAG,GAAG;gBAC1C,KAAK,cAAc,aAAa,IAAI,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE;gBAC1D,KAAK,cAAc,QAAQ;gBAC3B,KAAK,WAAW,WAAW;YAC/B;QACJ;IACJ;IACA,KAAK,eAAe;AACxB;AAOA,mDAAmD;AACnD,SAAS,uCAAiB,SAAS;IAC/B,IAAI,OAAO,UAAU;IACrB,IAAI,CAAC,MAAM;QACP,OAAO,CAAA,GAAA,kBAAU,EAAE,aAAa;YAAE,MAAM;QAAI,GAAG,UAAU;QACzD,IAAI,MAAM,UAAU,qBAAqB;QACzC,IAAI,kBAAkB;QACtB,IAAI,gBAAgB,IAAI,CAAA,GAAA,aAAK,EAAE,GAAG,GAAG;QACrC,IAAI,QAAQ;QACZ,IAAI;QACJ,KAAK,WAAW;QAEhB,UAAU;QACV,IAAI,IAAI;QACR,IAAI,QAAQ,CAAA,GAAA,kBAAU,EAAE,mBAAmB;YACvC,QAAQ;gBACJ,IAAI,CAAA,GAAA,cAAM,EAAE,GAAG,GAAG;gBAClB,IAAI,CAAA,GAAA,cAAM,EAAE,GAAG,CAAC,GAAG;gBACnB,IAAI,CAAA,GAAA,cAAM,EAAE,CAAC,GAAG,CAAC,GAAG;gBACpB,IAAI,CAAA,GAAA,cAAM,EAAE,CAAC,GAAG,GAAG;gBACnB,IAAI,CAAA,GAAA,cAAM,EAAE,GAAG,GAAG;aACrB;QACL,GAAG,UAAU;QACb,MAAM,QAAQ,IAAI,CAAA,GAAA,aAAK,EAAE,GAAG,GAAG;QAC/B,MAAM,SAAS;QAEf,UAAU,eAAe;QACzB,UAAU,eAAe;QACzB,UAAU,iBAAiB;IAC/B;IACA,OAAO;AACX;AAWA;;;;CAIC,GACD,cAAc,GACd,0CAAU,UAAU,mBAAmB;IACnC,IAAI,SAAS,IAAI,CAAC,MAAM;IACxB,IAAI,SAAS,IAAI,CAAC,MAAM;IACxB,IAAI,OAAO,OAAO;IAClB,IAAI,OAAO,EAAE;IACb,IAAI,UAAU;IACd,IAAI,UAAU;IACd,IAAI,OAAO,IAAI,CAAC,MAAM;IACtB,IAAI,UAAU,EAAE;IAChB,KAAK,QAAQ,CAAA;QACT,aAAa;QACb,IAAI,IAAI,cAAc,IAAI,aAAa,QAAQ,CAAA,MAAO,QAAQ,KAAK;aAC9D,QAAQ,KAAK;IACtB;IACA,OAAO,OAAO,QAAQ,SAAU,KAAK;QACjC;QACA,MAAM,QAAQ,QAAQ,CAAA,IAAK,KAAK,KAAK;IACzC;IACA,OAAO,QAAQ,SAAU,CAAC;QACtB,IAAI,EAAE,cAAc,KAAK,GAAG;QAC5B,IAAI,MAAM,IAAI;QACd,IAAI,QAAQ,GAAG,MAAM,OAAO,KAAK,GAAG;QACpC,IAAI,CAAC,EAAE,UAAU;YAAE,KAAK,GAAG;YAA0C;QAAO;QAC5E,WAAW,AAAC,EAAE,YAAa,EAAE,UAAU,SAAS;QAChD,aAAa;QACb,IAAI,OAAO,EAAE,SAAS,gBAAgB;YAAC,EAAE;SAAS;QAClD,KAAK,QAAQ,SAAU,GAAG;YACtB,IAAI,QAAQ,KAAK,OAAO,KAAK,KAAK;QACtC;IACJ;IACA,IAAI,aAAa,EAAE;IACnB,QAAQ,QAAQ,CAAA;QACZ,IAAI,OAAO;QACX,OAAO,QAAQ,CAAA;YACX,IAAI,KAAK,aAAa,KAAK,OAAO;YAClC,IAAI,CAAC,KAAK,UAAU;YACpB,aAAa;YACb,IAAI,OAAO,KAAK,SAAS,gBAAgB;gBAAC,KAAK;aAAS;YACxD,IAAI,KAAK,SAAS,MAAM,OAAO;QACnC;QACA,IAAI,CAAC,MAAM,WAAW,KAAK,IAAI;IACnC;IACA,IAAI,WAAW,QACX,QAAQ,KAAK,kCAAkC,WAAW,KAAK;IAEnE,KAAK,QAAQ,SAAU,CAAC;QACpB,IAAI,QAAQ,GAAG,SAAS,KAAK,GAAG;IACpC;IACA,KAAK,QAAQ,SAAU,CAAC;QACpB,IAAI,QAAQ,GAAG,SAAS,KAAK,GAAG;IACpC;IACA,IAAI,YAAY,KAAK,MAAM,KAAK,KAAK,SAAS,WAAW;IACzD,QAAQ,IAAI,oBAAoB,KAAK,QAAQ,cAAc,KAAK,QAC5D,iBAAiB,SACjB,8BAA8B;IAElC,SAAS,KAAK,GAAG,EAAE,GAAG;QAAI,QAAQ,KAAK,IAAI,OAAO,UAAU;IAAK;IAEjE,SAAS,MAAM,IAAI;QAAI,OAAQ,KAAK,aAAa,WAAW;IAAG;IAE/D,SAAS,QAAQ,GAAG,EAAE,KAAK,EAAE,KAAK;QAC9B,IAAI,CAAC,KAAK,OAAO;QACjB,IAAI,MAAM,SAAS,MAAM,OAAO;QAChC,IAAI,SAAS,MAAM,SAAS,MAAM,OAAO;QACzC,OAAO;IACX;IACA,OAAO;AACX;AAGA,cAAc,GACd,0CAAU,UAAU,kBAAkB;IAClC,IAAI,KAAK,CAAC;IACV,IAAI,CAAC,MAAM,OAAO,QAAQ,CAAA;QACtB,IAAI,IAAI,EAAE,QAAQ;QAClB,IAAI,EAAE,QAAQ,UAAU;QACxB,IAAI,EAAE,QAAQ,SAAS;QACvB,IAAI,EAAE,QAAQ,mCAAmC;QACjD,IAAI,EAAE,QAAQ,mBAAmB;QACjC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI;QACjB,EAAE,CAAC,EAAE;IACT;IACA,IAAK,IAAI,KAAK,GAAI,QAAQ,IAAI,QAAQ,AAAC,CAAA,EAAE,CAAC,EAAE,GAAG,SAAQ,EAAG,OAAO,GAAG,KAAK;AAC7E;AAQA,IAAI,qCAAe,AAAC,gCAChB,CAAA,GAAA,yCAAc,EAAE,KAAK,sBAAsB,KAAQ;AAIvD,IAAI,iCAAW,YAAc;AAE7B,SAAS;IACL,IAAI,MAAM,SAAS,cAAc;IACjC,IAAI,KAAK;IACT,IAAI,MAAM,WAAW;IACrB,IAAI,MAAM,MAAM;IAChB,IAAI,MAAM,QAAQ;IAClB,IAAI,MAAM,SAAS;IACnB,IAAI,MAAM,QAAQ;IAClB,IAAI,MAAM,kBAAkB;IAC5B,IAAI,MAAM,OAAO;IACjB,IAAI,MAAM,YAAY;IACtB,IAAI,MAAM,WAAW;IACrB,IAAI,MAAM,SAAS;IACnB,SAAS,KAAK,YAAY;IAC1B,IAAI,QAAQ;IACZ,IAAI,KAAK;IACT,IAAI,UAAU;IACd,IAAI,QAAQ,YAAY;IACxB,IAAI,OAAO;IACX,iCAAW;QACP;QACA,IAAI,KAAK,YAAY;QACrB,IAAI,KAAK,OAAO,SAAS,UAAU,KAAK;QACxC,OAAO;QACP,IAAI,KAAK,QAAQ,OAAO;QACxB,IAAI,MAAM,KAAK,MAAM,KAAM,CAAA,KAAK,KAAI,IAAK;QACzC,IAAI,MAAM,KAAK,MAAM,IAAI,UAAU;QACnC,IAAI,YAAY,MAAM,SAAS;QAC/B,KAAK;QACL,UAAU;QACV,QAAQ;IACZ;AACJ;;;;AEjmBA,IAAI,uCAAiB;IACjB,SAAS;QAAC;QAAG;QAAK;KAAE;IACpB,SAAS;AACb;AAwBO,MAAM,kDAAgB,CAAA,GAAA,cAAW;IAEpC;;;IAGA,GACA,YAAY,GAAG,EAAE,IAAI,CAAE;QACnB,OAAO,OAAO,OAAO,CAAC,GAAG,sCAAgB;QACzC,IAAI,QAAQ,IAAI;QAChB,IAAI,cAAc,IAAI,SAAS;QAC/B,IAAI,cAAc,IAAI,SAAS;QAE/B,uEAAuE;QACvE,IAAI,SAAS,IAAI;QAEjB,IAAI,cAAc,CAAC,GAAG,GAAG;YACrB,IAAI,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,EAAE;YACrE,OAAO,WAAW,CAAC,GAAG;QAC1B;QACA,IAAI,gBAAgB,CAAC,GAAG,GAAG;YACvB,IAAI,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,EAAE;YACrE,OAAO,WAAW,CAAC,GAAG;QAC1B;QAEA,KAAK,CAAC,MAAM,aAAa;IAC7B;AAEJ;;;;;;AEnCO,SAAS,0CAAM,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE;IAC/E,IAAI,CAAC,MAAM;IACX,IAAI,CAAC,aAAa;IAElB,2DAA2D;IAC3D,IAAI,CAAC,WAAW;IAEhB,4BAA4B;IAC5B,IAAI,CAAC,YAAY,UAAc,yBAAyB;;IACxD,IAAI,CAAC,SAAS;IACd,IAAI,CAAC,IAAI;IACT,IAAI,CAAC,IAAI;IACT,IAAI,CAAC,IAAI;IACT,IAAI,CAAC,OAAO;IACZ,IAAI,CAAC,IAAI,KAAK;IACd,IAAI,CAAC,IAAI,KAAK;IACd,IAAI,CAAC,IAAI,KAAK;IACd,IAAI,CAAC,MAAM;QAAC,IAAI,CAAC;QAAG,IAAI,CAAC;QAAG,IAAI,CAAC;KAAE;IAEnC,2CAA2C;IAC3C,IAAI,CAAC,gBAAgB;IACrB,IAAI,CAAC,gBAAgB;IAErB,0CAA0C;IAC1C,IAAI,CAAC,iBAAiB,EAAE;IACxB,IAAI,eAAe,UAAU,IAAI;IACjC,IAAI,cAAc,UAAU,IAAI;IAEhC,IAAI,CAAC,UAAU;IACf,IAAI,CAAC,WAAW;IAEhB,IAAI,CAAC,mBAAmB,MAAM,MAAM,KAAK;IACzC,IAAI,eAAe,GAAG;QAClB,IAAI,CAAC,OAAO,KAAK,KAAK,aAAa,GAAG,IAAI,CAAC,OAAO;QAClD,IAAI,CAAC,iBAAiB,KAAK;IAC/B;IAEA,yEAAyE;IACzE,IAAI,OAAO,MAAM,KAAK,MAAM,KAAK,IAAM;IACvC,IAAI,CAAC,aAAa,CAAA,GAAA,cAAM,EAAE,MAAM;QAAC;QAAG;QAAG;KAAE,EAAE,GAAG,GAAG,GAAG;IACpD,IAAI,CAAC,WAAW,IAAI,GAAG,GAAG,GAAG,IAAI;IACjC,IAAI,CAAC,iBAAiB;IACtB,IAAI,CAAC,eAAe;IAEpB,gFAAgF;IAChF,cAAc,GACd,IAAI,CAAC,oBAAoB,IAAI,CAAA,GAAA,yCAAY;IAEzC,6DAA6D;IAC7D,oCAAc,IAAI;AACtB;AAGA,oEAAoE;AACpE,0CAAM,oBAAoB,SAAU,IAAI;IACpC,IAAI,MAAM,IAAI,YAAY,OAAO,OAAO;IACxC,OAAO,CAAA,GAAA,cAAM,EAAE,KAAK;QAAC;QAAM;QAAM;KAAK;AAC1C;AAEA,0CAAM,UAAU,oBAAoB,SAAU,SAAS,EAAE,cAAc,EAAE;IACrE,gCAAgC;IAChC,2CAAqB,IAAI,EAAE;IAC3B,IAAI,CAAC,IAAI,cAAc,aAAa,IAAI;IACxC,IAAI,CAAC,IAAI,eAAe,aAAa,IAAI;IACzC,IAAI,CAAC,SAAS;IACd,IAAI,CAAC,gBAAgB;IACrB,IAAI,CAAC,gBAAgB;IACrB,IAAI,CAAC,kBAAkB;IACvB,IAAI,CAAC,IAAI,cAAc,UAAU,IAAI;IACrC,IAAI,CAAC,IAAI,eAAe,UAAU,IAAI;IAEtC,IAAI,eAAe,GACf,IAAI,CAAC,iBAAiB,KAAK;SAE3B,IAAI,CAAC,iBAAiB,KAAK;IAG/B,oCAAc,IAAI;AACtB;AASA;;;;CAIC,GAED,uEAAuE;AAEvE,0CAAM,UAAU,MAAM,SAAU,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,OAAO,IAAI,CAAC,OAAO,IAAI,GAAG,GAAG;AACjC;AAEA,0CAAM,UAAU,gBAAgB,SAAU,CAAC,EAAE,CAAC,EAAE,CAAC;IAC7C,IAAI,cAAc,IAAI,CAAC,IAAI,SAAS;IACpC,OAAO,WAAW,CAAC,IAAI,CAAC,OAAO,IAAI,GAAG,GAAG,GAAG;AAChD;AAEA,0CAAM,UAAU,MAAM,SAAU,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK;IAC1C,IAAI,QAAQ,IAAI,CAAC,OAAO,IAAI,GAAG,GAAG;IAClC,IAAI,UAAU,OAAO;IAErB,oBAAoB;IACpB,IAAI,CAAC,OAAO,IAAI,GAAG,GAAG,GAAG;IAEzB,mCAAmC;IACnC,IAAI,cAAc,IAAI,CAAC,IAAI,SAAS;IACpC,IAAI,eAAe,IAAI,CAAC,IAAI,SAAS;IACrC,IAAI,eAAe,IAAI,CAAC,IAAI,SAAS;IACrC,IAAI,gBAAgB,IAAI,CAAC,IAAI,SAAS;IAEtC,oCAAoC;IACpC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU;IACzC,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW;IACjC,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE,KAAK,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,GAAG;IAEnE,2BAA2B;IAC3B,IAAI,OAAO,aAAa,CAAC,MAAM;IAC/B,IAAI,OAAO,aAAa,CAAC,MAAM;IAC/B,IAAI,MAAM,uCAAiB,IAAI,EAAE,MAAM,WAAW,GAAG,GAAG;IACxD,IAAI,MAAM;QACN,uCAAiB,IAAI,EAAE,MAAM,SAAS,GAAG,GAAG;QAC5C,IAAI,CAAC,kBAAkB,IAAI,GAAG,GAAG;IACrC,OACI,IAAI,CAAC,kBAAkB,OAAO,GAAG,GAAG;IAGxC,4BAA4B;IAC5B,IAAI,YAAY,IAAI,CAAC,IAAI;IACzB,IAAI,SAAS,YAAY,CAAC,MAAM;IAChC,IAAI,SAAS,YAAY,CAAC,MAAM;IAChC,IAAI,QAAQ,UAAU,eAAe,IAAI,EAAE,GAAG,GAAG,GAAG;IACpD,IAAI,QAAQ,UAAU,eAAe,IAAI,EAAE,OAAO,GAAG,GAAG;IAExD,0BAA0B;IAC1B,IAAI,kBAAmB,WAAW,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM;IAChE,IAAI,iBAAkB,YAAY,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM;IACjE,IAAI,aAAa,CAAC,UAAW,UAAU;IACvC,IAAI,aAAa,CAAC,UAAW,UAAU;IAEvC,IAAI,UAAU,QAAQ,IAAI,CAAC,gBAAgB;IAC3C,IAAI,mBAAmB,kBAAkB,cAAc,YACnD,IAAI,CAAC,gBAAgB;IAGzB,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,eAC3B,IAAI,CAAC,IAAI,MAAM,qBAAqB,IAAI;IAG5C,oEAAoE;IACpE,IAAI,mBAAmB,gBAAgB;QACnC,IAAI,OAAO,IAAI,CAAC,OAAO;QACvB,IAAI,OAAO,AAAC,MAAM,IAAK,KAAK;QAC5B,IAAI,OAAO,AAAC,MAAM,IAAK,KAAK;QAC5B,IAAI,OAAO,AAAC,MAAM,IAAK,KAAK;QAC5B,IAAI,OAAO,AAAC,MAAM,OAAQ,IAAI;QAC9B,IAAI,OAAO,AAAC,MAAM,OAAQ,IAAI;QAC9B,IAAI,OAAO,AAAC,MAAM,OAAQ,IAAI;QAC9B,IAAK,IAAI,KAAK,MAAM,MAAM,MAAM,KAAM;YAClC,IAAK,IAAI,KAAK,MAAM,MAAM,MAAM,KAC5B,IAAK,IAAI,KAAK,MAAM,MAAM,MAAM,KAAM;gBAClC,IAAI,AAAC,CAAA,KAAK,KAAK,EAAC,MAAO,GAAG;gBAC1B,IAAI,MAAM,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI;gBACtC,IAAI,CAAC,KAAK;gBACV,IAAI,gBAAgB;gBACpB,IAAI,CAAC,IAAI,MAAM,qBAAqB;YACxC;QAER;IACJ;AACJ;AAIA,6DAA6D;AAC7D,SAAS,uCAAiB,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACpD,IAAI,UAAU,QAAQ,CAAC,KAAK;IAC5B,IAAI,CAAC,SAAS;IACd,QAAQ,MAAM,IAAI,GAAG,MAAM,IAAI,GAAG,MAAM,IAAI;AAChD;AAGA,qEAAqE;AACrE,0CAAM,UAAU,eAAe;IAC3B,IAAI,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,IAAI,eAAe,UAAU,IAAI;QACtC,IAAI,CAAC;QACL,IAAI,CAAC,gBAAgB;IACzB;IACA,IAAI,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,IAAI,cAAc;QACvB,IAAI,CAAC,gBAAgB;IACzB;AACJ;AAaA;;;;;;AAMA,GAEA,SAAS,oCAAc,KAAK;IACxB,IAAI,SAAS,MAAM;IACnB,IAAI,OAAO,OAAO;IAClB,IAAI,MAAM,OAAO,KAAK,CAAC,EAAE;IACzB,IAAI,eAAe,MAAM,IAAI,SAAS;IACtC,IAAI,gBAAgB,MAAM,IAAI,SAAS;IACvC,IAAI,eAAe,MAAM,IAAI,SAAS;IACtC,IAAI,cAAc,MAAM,IAAI,SAAS;IACrC,IAAI,YAAY,MAAM,IAAI;IAE1B,gEAAgE;IAChE,IAAI,cAAc;IAClB,IAAI,WAAW;IAEf,oBAAoB;IACpB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,EAAE,EAAG;QAE1B,iDAAiD;QACjD,IAAI,UAAU,MAAM,gBAAgB,CAAC,EAAE;QACvC,IAAI,WAAW,KAAK,CAAC,SAAS,CAAC,QAAQ,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAChE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,cAAc;YAC1C,IAAI,YAAY,GAAG,WAAW;YAC9B;QACJ;QAEA,IAAI,aAAa,OAAO,IAAI,GAAG,GAAG;QAElC,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,EAAE,EAAG;YAC1B,IAAI,QAAQ,OAAO,MAAM,GAAG,GAAG;YAC/B,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG,EAAE,MAAO;gBACnC,IAAI,KAAK,IAAI,CAAC,MAAM;gBAEpB,2CAA2C;gBAC3C,IAAI,cAAc,KAAK,OAAO,YAAY,aAAa;gBAEvD,kCAAkC;gBAClC,IAAI,OAAO,GAAG;oBACV,cAAc;oBACd;gBACJ;gBACA,oDAAoD;gBACpD,IAAI,WAAW,CAAC,GAAG,EAAE;oBACjB,WAAW;oBACX;gBACJ;gBACA,qDAAqD;gBACrD,cAAc,eAAe,YAAY,CAAC,GAAG;gBAC7C,WAAW;gBACX,IAAI,YAAY,CAAC,GAAG,EAAE;oBAClB,UAAU,eAAe,OAAO,IAAI,GAAG,GAAG;oBAC1C,MAAM,gBAAgB;gBAC1B;gBACA,IAAI,WAAW,aAAa,CAAC,GAAG;gBAChC,IAAI,UAAU;oBACV,MAAM,kBAAkB,IAAI,GAAG,GAAG;oBAClC,uCAAiB,OAAO,UAAU,UAAU,GAAG,GAAG;gBACtD;YACJ;QACJ;QAEA,IAAI,cAAc,GAAG,MAAM,gBAAgB,CAAC,EAAE,GAAG;IACrD;IAEA,MAAM,UAAU;IAChB,MAAM,WAAW;IACjB,MAAM,gBAAgB,CAAC,MAAM;AACjC;AAWA,2DAA2D;AAE3D,0CAAM,UAAU,UAAU;IACtB,8CAA8C;IAC9C,2CAAqB,IAAI,EAAE;IAC3B,IAAI,CAAC,kBAAkB;IAEvB,kCAAkC;IAClC,IAAI,CAAC,IAAI,cAAc,aAAa,IAAI;IACxC,IAAI,CAAC,IAAI,eAAe,aAAa,IAAI;IAEzC,6EAA6E;IAC7E,IAAI,CAAC,OAAO,OAAO;IACnB,IAAI,CAAC,SAAS;IACd,IAAI,CAAC,WAAW,OAAO;IACvB,IAAI,CAAC,aAAa;IAElB,IAAI,CAAC,aAAa;AACtB;AAIA,6DAA6D;AAC7D,SAAS,2CAAqB,KAAK,EAAE,IAAI;IACrC,IAAI,SAAS,MAAM;IACnB,IAAI,gBAAgB,MAAM,IAAI,SAAS;IACvC,MAAM,kBAAkB,IAAI,QAAQ,CAAC,CAAC,GAAG,GAAG,EAAE;QAC1C,IAAI,KAAK,OAAO,IAAI,GAAG,GAAG;QAC1B,uCAAiB,OAAO,aAAa,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG;IAC3D;AACJ;;;;AD3VA,IAAI,sCAAgB,EAAgB,QAAQ;;AAC5C,IAAI,6CAAuB,EAAS,QAAQ;;AAO5C,IAAI,uCAAiB;IACjB,WAAW;IACX,kBAAkB;QAAC;QAAG;KAAE;IACxB,qBAAqB;QAAC;QAAG;KAAE;IAC3B,qBAAqB;IACrB,6BAA6B;AACjC;AA2BO,MAAM,kDAAc,CAAA,GAAA,aAAW;IAElC,cAAc,GACd,YAAY,GAAG,EAAE,IAAI,CAAE;QACnB,KAAK;QACL,OAAO,OAAO,OAAO,CAAC,GAAG,sCAAgB;QACzC,cAAc,GACd,IAAI,CAAC,MAAM;QAEX,cAAc,GACd,IAAI,CAAC,oBAAoB;QAEzB,cAAc,GACd,IAAI,CAAC,QAAQ,CAAA,GAAA,0CAAM,mCAAmC;QAArC;QAEjB;;;;SAIC,GACD,IAAI,CAAC,8BAA8B,CAAC,CAAC,KAAK;QAE1C;;;;;;SAMC,GACD,IAAI,CAAC,qBAAqB;QAE1B;;;SAGC,GACD,IAAI,CAAC,qBAAqB;QAE1B,sEAAsE,GACtE,IAAI,CAAC,sBAAsB,CAAC,CAAC,KAAK;QAElC;;QAEA,GACA,IAAI,CAAC,2BAA2B;QAEhC;;QAEA,GACA,IAAI,CAAC,0BAA0B;QAE/B;;QAEA,GACA,IAAI,CAAC,uBAAuB;QAE5B;;QAEA,GACA,IAAI,CAAC,yBAAyB;QAG9B,wBAAwB;QAGxB,cAAc,GACd,IAAI,CAAC,aAAa,KAAK;QACvB,cAAc,GACd,IAAI,CAAC,oBAAoB;YAAC;YAAG;SAAE;QAC/B,cAAc,GACd,IAAI,CAAC,uBAAuB;YAAC;YAAG;SAAE;QAClC,cAAc,GACd,IAAI,CAAC,iBAAiB;QACtB,cAAc,GACd,IAAI,CAAC,iBAAiB;QACtB,cAAc,GACd,IAAI,CAAC,iBAAiB;QACtB,cAAc,GACd,IAAI,CAAC,uBAAuB;QAC5B,cAAc,GACd,IAAI,CAAC,sBAAsB;QAC3B,cAAc,GACd,IAAI,CAAC,iBAAiB;QACtB,cAAc,GACd,IAAI,CAAC,sBAAsB;QAG3B,8BAA8B;QAE9B,+CAA+C,GAC/C,IAAI,CAAC,eAAe,IAAI,CAAA,GAAA,yCAAY;QAEpC,yDAAyD,GACzD,IAAI,CAAC,mBAAmB,IAAI,CAAA,GAAA,yCAAY;QACxC,2DAA2D,GAC3D,IAAI,CAAC,qBAAqB,IAAI,CAAA,GAAA,yCAAY;QAC1C,sDAAsD,GACtD,IAAI,CAAC,kBAAkB,IAAI,CAAA,GAAA,yCAAY;QAEvC,yDAAyD,GACzD,IAAI,CAAC,iBAAiB,IAAI,CAAA,GAAA,yCAAY;QACtC,kDAAkD,GAClD,IAAI,CAAC,gBAAgB,IAAI,CAAA,GAAA,yCAAY;QACrC,mDAAmD,GACnD,IAAI,CAAC,qBAAqB,IAAI,CAAA,GAAA,yCAAY;QAE1C;;wEAEgE,GAChE,IAAI,CAAC,oBAAoB,IAAI,CAAA,GAAA,yCAAY;QAEzC,wEAAwE;QACxE,IAAI,CAAC,qBAAqB,KAAK,kBAAkB,KAAK;QAEtD,qDAAqD;QACrD,6DAA6D;QAC7D,kEAAkE;QAClE,cAAc,GACd,IAAI,CAAC,WAAW,IAAI,CAAA,GAAA,yCAAW;QAE/B,2DAA2D;QAC3D,IAAI,KAAK,IAAI,CAAC;QACd,cAAc,GACd,IAAI,CAAC,wBAAwB;QAC7B,cAAc,GACd,IAAI,CAAC,uBAAuB;QAE5B,kEAAkE;QAClE,IAAI,aAAc,AAAC,CAAA,KAAK,KAAK,CAAA,MAAO;QACpC,IAAI,YAAY;YACZ,cAAc,GACd,IAAI,CAAC,kBAAkB,KAAK,KAAK,MAAM;YACvC,cAAc,GACd,IAAI,CAAC,aAAa,AAAC,KAAK,IAAK;YAC7B,IAAI,CAAC,wBAAwB;YAC7B,IAAI,CAAC,uBAAuB;QAChC;IACJ;AACJ;AAMA;;;;;;;;;;AAUA,GAEA,0CAAM,UAAU,aAAa,SAAU,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IACtD,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,GAAG,GAAG;IACpD,IAAI,QAAQ,IAAI,CAAC,SAAS,kBAAkB,IAAI,IAAI;IACpD,IAAI,CAAC,OAAO,OAAO;IACnB,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,qBAAqB,GAAG,GAAG;IAChD,OAAO,MAAM,OAAO,IAAI,GAAG,GAAG;AAClC;AAEA,0CAAM,UAAU,mBAAmB,SAAU,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IAC5D,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,GAAG,GAAG;IACpD,IAAI,QAAQ,IAAI,CAAC,SAAS,kBAAkB,IAAI,IAAI;IACpD,IAAI,CAAC,OAAO,OAAO;IACnB,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,qBAAqB,GAAG,GAAG;IAChD,OAAO,CAAC,CAAC,MAAM,cAAc,GAAG,GAAG;AACvC;AAEA,0CAAM,UAAU,kBAAkB,SAAU,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IAC3D,IAAI,KAAK,IAAI,CAAC,WAAW,GAAG,GAAG;IAC/B,OAAO,IAAI,CAAC,IAAI,SAAS,gBAAgB;AAC7C;AAEA,0CAAM,UAAU,mBAAmB,SAAU,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IAC5D,IAAI,KAAK,IAAI,CAAC,WAAW,GAAG,GAAG;IAC/B,OAAO,IAAI,CAAC,IAAI,SAAS,iBAAiB;AAC9C;AAEA,0CAAM,UAAU,qBAAqB,SAAU,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IAC9D,IAAI,KAAK,IAAI,CAAC,WAAW,GAAG,GAAG;IAC/B,OAAO,IAAI,CAAC,IAAI,SAAS,cAAc;AAC3C;AAGA,0CAAM,UAAU,aAAa,SAAU,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IAC9D,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,GAAG,GAAG;IACpD,IAAI,QAAQ,IAAI,CAAC,SAAS,kBAAkB,IAAI,IAAI;IACpD,IAAI,CAAC,OAAO;IACZ,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,qBAAqB,GAAG,GAAG;IAChD,OAAO,MAAM,IAAI,GAAG,GAAG,GAAG;AAC9B;AAGA,eAAe,GACf,0CAAM,UAAU,oBAAoB,SAAU,GAAG;IAC7C,IAAI,OAAO,IAAI;IACf,IAAI,MAAM,IAAI;IACd,IAAK,IAAI,IAAI,KAAK,MAAM,IAAI,CAAC,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,IAAK;QACnD,IAAK,IAAI,IAAI,KAAK,MAAM,IAAI,CAAC,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,IAC9C,IAAK,IAAI,IAAI,KAAK,MAAM,IAAI,CAAC,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,IAAK;YACnD,IAAI,IAAI,CAAC,iBAAiB,GAAG,GAAG,IAAI,OAAO;QAC/C;IAER;IACA,OAAO;AACX;AAGA;;;;;;;;;;CAUC,GACD,0CAAM,UAAU,eAAe,SAAU,EAAE,EAAE,KAAK,EAAE,WAAW,IAAI,EAAE,cAAc,EAAE;IACjF,mCAAa,IAAI,EAAE,IAAI,OAAO,UAAU;AAC5C;AAIA;;;;;;;;;;CAUC,GACD,0CAAM,UAAU,uBAAuB,SAAU,UAAU,CAAC,EAAE,UAAU,CAAC;IACrE,IAAI,SAAS,MAAM,QAAQ,WAAW,UAAU;QAAC;QAAS;KAAQ;IAClE,IAAI,SAAS,MAAM,QAAQ,WAAW,UAAU;QAAC;QAAS;KAAQ;IAClE,IAAI,SAAS;IACb,IAAI,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG,QAAQ,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;IAC5D,IAAI,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG,QAAQ,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG;IAC5D,IAAI,CAAC,oBAAoB;IACzB,IAAI,CAAC,uBAAuB;IAC5B,4DAA4D;IAC5D,IAAI,CAAC,iBAAiB,+CAAyB,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;IACnE,IAAI,CAAC,iBAAiB,+CAAyB,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;IACnE,IAAI,CAAC,kBAAkB;IACvB,4EAA4E;IAC5E,IAAK,IAAI,IAAI,GAAG,KAAK,MAAM,CAAC,EAAE,EAAE,IAAK;QACjC,IAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IACpB,IAAK,IAAI,IAAI,GAAG,KAAK,MAAM,CAAC,EAAE,EAAE,IAAK;YACjC,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,GAAG,IAAI;YACnC,IAAI,CAAC,kBAAkB,IAAI,GAAG,GAAG;QACrC;IAER;IACA,sCAAsC;IACtC,IAAI,CAAC,iBAAiB;IACtB,IAAI,CAAC,sBAAsB;AAC/B;AAOA;;;;;CAKC,GACD,0CAAM,UAAU,yBAAyB,SAAU,GAAG;IAClD,4CAAsB,IAAI,EAAE;AAChC;AAGA;;;;CAIC,GACD,0CAAM,UAAU,oBAAoB,SAAU,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IAC7D,IAAI,CAAC,IAAI,CAAC,6BAA6B,MAAM;IAC7C,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,sBAAsB,GAAG,GAAG;IACjD,IAAI,CAAC,aAAa,IAAI,GAAG,GAAG;IAC5B,IAAI,CAAC,iBAAiB,IAAI,GAAG,GAAG;AACpC;AAEA;;;;CAIC,GACD,0CAAM,UAAU,sBAAsB,SAAU,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IAC/D,IAAI,CAAC,IAAI,CAAC,6BAA6B,MAAM;IAC7C,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,sBAAsB,GAAG,GAAG;IACjD,IAAI,CAAC,gBAAgB,IAAI,GAAG,GAAG;IAC/B,IAAI,CAAC,cAAc,OAAO,GAAG,GAAG;IAChC,IAAI,CAAC,iBAAiB,OAAO,GAAG,GAAG;IACnC,IAAI,CAAC,mBAAmB,OAAO,GAAG,GAAG;AACzC;AACA,IAAI,kCAAY;AAKhB;;;;;;;;;;AAUA,GAEA,cAAc,GACd,0CAAM,UAAU,OAAO;IACnB,IAAI,gBAAgB,YAAY;IAEhC,6EAA6E;IAC7E,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,4CAAsB,IAAI;IAC7C,IAAI,eAAe,CAAA,GAAA,sCAAa,EAAE,IAAI,IAAI;IAC1C,IAAI,gBAAiB,iBAAiB,IAAI,CAAC;IAC3C,IAAI,eAAe;QACf,IAAI,CAAC,KAAK,sBAAsB,IAAI,IAAI;QACxC,IAAI,CAAC,uBAAuB;QAC5B,IAAI,CAAC,sBAAsB;IAC/B;IAEA,uDAAuD;IACvD,iEAAiE;IACjE,IAAI,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,WAAW;QAC5C,IAAI,CAAC,IAAI,CAAC,6BAA6B;YACnC,0CAAqB,IAAI;YACzB,IAAI,CAAC,sBAAsB;YAC3B,yCAAmB,IAAI;QAC3B;QACA,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI;IACnC;IAEA,mCAAa;IACb,0CAAoB;IAEpB,iEAAiE;IACjE,IAAI,CAAC,IAAI,CAAC,6BAA6B;QACnC,gDAA0B,IAAI,EAAE,IAAI,IAAI;QACxC,mCAAa;QACb,0CAAoB,IAAI,EAAE,IAAI,IAAI;QAClC,mCAAa;IACjB;IAEA,6DAA6D;IAC7D,uCAAiB,IAAI;IAErB,iEAAiE;IACjE,IAAI,IAAI,YAAY;IACpB,IAAI,KAAK,gBAAiB,CAAA,IAAI,CAAC,wBAAwB,CAAA;IACvD,IAAI,IAAI,IAAI,KAAK,IAAI;IACrB,IAAI,QAAQ;IACZ,IAAI,QAAQ;IACZ,IAAI,QAAQ;IACZ,MAAO,IAAI,GAAI;QACX,IAAI,CAAC,OAAO;YACR,QAAQ,yCAAmB,IAAI,KACxB,yCAAmB,IAAI;YAC9B,mCAAa;QACjB;QACA,IAAI,CAAC,OAAO;YACR,QAAQ,0CAAoB,IAAI;YAChC,mCAAa;QACjB;QACA,IAAI,CAAC,OAAO;YACR,QAAQ,0CAAoB,IAAI,EAAE;YAClC,mCAAa;QACjB;QACA,IAAI,SAAS,SAAS,OAAO;QAC7B,IAAI,YAAY;IACpB;IAEA,oEAAoE;IACpE,IAAI,SAAS,IAAI,CAAC,SAAS,kBAAkB,IAAI,IAAI;IACrD,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAE3B,0CAAoB,OAAO,IAAI;IAC/B,mCAAa;AACjB;AAGA,cAAc,GACd,0CAAM,UAAU,SAAS;IACrB,6DAA6D;IAC7D,sEAAsE;IACtE,IAAI,IAAI,YAAY;IACpB,IAAI,KAAK,IAAI,IAAI,CAAC;IAClB,MAAO,IAAI,GAAI;QACX,IAAI,OAAO,0CAAoB,IAAI,EAAE;QACrC,IAAI,MAAM;QACV,IAAI,YAAY;IACpB;AACJ;AAGA,cAAc,GACd,0CAAM,UAAU,oBAAoB,SAAU,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;IAC7D,8CAA8C;IAC9C,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,sBAAsB,GAAG,GAAG;IACjD,OAAO,IAAI,CAAC,SAAS,kBAAkB,GAAG,GAAG;AACjD;AAWA;;;;;;;;AAQA,GAEA,mEAAmE;AACnE,2BAA2B;AAC3B,0CAAM,UAAU,uBAAuB,SAAU,KAAK;IAClD,mDAA6B,IAAI,EAAE;AACvC;AAIA;;;AAGA,GACA,SAAS,4CAAsB,KAAK;IAChC,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,SAAS,YAAY,MAAM,IAAI;IACzD,OAAO,MAAM,sBAAsB,GAAG,GAAG;AAC7C;AAKA;;;AAGA,GACA,SAAS,0CAAoB,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAC1C,IAAI,YAAY,MAAM;IACtB,IAAI,YAAY,UAAU;IAC1B,IAAI,YAAY;IAChB,IAAI,aAAa,WAAW;IAE5B,2CAA2C;IAC3C,IAAI,aAAa,MAAM,sBAAsB;IAC7C,IAAI,eAAe,MAAM,gBAAgB;QACrC,8CAAwB,OAAO,MAAM,mBAAmB,GAAG,GAAG,GAAG;QACjE,MAAM,iBAAiB;IAC3B;IAEA,iEAAiE;IACjE,uEAAuE;IACvE,IAAI,UAAU,MAAM,kBAAkB;IACtC,IAAI,KAAK,MAAM;IACf,IAAI,UAAU,KAAK,IAAI,IAAI,QAAQ,SAAS;IAC5C,IAAK,IAAI,KAAK,GAAG,KAAK,SAAS,KAAM;QACjC,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,QAAQ,OAAO;QACjD,8CAAwB,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI;QACnD,IAAI,UAAU,WAAW,WAAW;IACxC;IAEA,uDAAuD;IACvD,4DAA4D;IAC5D,IAAI,MAAM,mBAAmB,WACzB,MAAM,sBAAsB,KAAK,QAAQ;IAG7C,6DAA6D;IAC7D,8CAAwB,OAAO,WAAW,IAAI,IAAI,IAAI;AAC1D;AAEA,wEAAwE;AACxE,IAAI,gDAA0B,CAAC,OAAO,IAAI,IAAI,IAAI,GAAG,GAAG;IACpD,uCAAiB,OAAO,KAAK,GAAG,KAAK,GAAG,KAAK;IAC7C,IAAI,MAAM,GAAG,uCAAiB,OAAO,KAAK,GAAG,KAAK,GAAG,KAAK;IAC1D,IAAI,IAAI,GAAG,8CAAwB,OAAO,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG;IAC7D,IAAI,IAAI,GAAG,8CAAwB,OAAO,IAAI,IAAI,IAAI,GAAG,CAAC,GAAG;IAC7D,IAAI,IAAI,GAAG,8CAAwB,OAAO,IAAI,IAAI,IAAI,GAAG,GAAG,CAAC;AACjE;AACA,yDAAyD;AACzD,IAAI,yCAAmB,CAAC,OAAO,GAAG,GAAG;IACjC,IAAI,MAAM,aAAa,SAAS,GAAG,GAAG,IAAI;IAC1C,MAAM,aAAa,IAAI,GAAG,GAAG;IAC7B,MAAM,iBAAiB,IAAI,GAAG,GAAG,GAAG;AACxC;AAMA;;;;AAIA,GACA,SAAS,gDAA0B,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAChD,IAAI,YAAY,MAAM;IACtB,IAAI,WAAW,MAAM;IACrB,IAAI,YAAY,SAAS,UAAU,MAAM,mBAAmB;IAC5D,IAAI,YAAY;IAChB,IAAI,aAAa,WAAW;IAE5B,IAAI,WAAW,MAAM,aAAa;IAClC,IAAI,SAAS,WAAW,GAAG;IAC3B,IAAI,UAAU,KAAK,IAAI,KAAK,SAAS,SAAS;IAC9C,IAAI,QAAQ;IACZ,IAAK,IAAI,KAAK,GAAG,KAAK,SAAS,KAAM;QACjC,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,QAAQ,CAAC,2CAAqB,SAAS,OAAO;QAC9D,IAAI,SAAS,SAAS,GAAG,GAAG,IAAI;QAChC,IAAI,UAAU,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK;QACvC,wDAAwD;QACxD,MAAM,gBAAgB,IAAI,GAAG,GAAG;QAChC,MAAM,iBAAiB,OAAO,GAAG,GAAG;QACpC,MAAM,cAAc,OAAO,GAAG,GAAG;QACjC,MAAM,mBAAmB,OAAO,GAAG,GAAG;QACtC,QAAQ;QACR;QACA,IAAI,YAAY,WAAW;IAC/B;IACA,yCAAmB,yCAAmB,SAAS;IAC/C,IAAI,OAAO,8CAAwB,OAAO,UAAU,IAAI,IAAI;AAChE;AACA,IAAI,yCAAmB;AAGvB;;;AAGA,GACA,SAAS,uCAAiB,KAAK;IAC3B,IAAI,YAAY;IAChB,IAAI,YAAY,MAAM,cAAc,UAAU,MAAM,mBAAmB;IACvE,IAAI,YAAY,WAAW;IAC3B,IAAI,WAAW,MAAM,aAAa;IAClC,IAAI,UAAU,KAAK,IAAI,IAAI,SAAS,SAAS;IAC7C,IAAK,IAAI,KAAK,GAAG,KAAK,SAAS,KAAM;QACjC,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,QAAQ,CAAC,yCAAmB,SAAS,OAAO;QAC5D,IAAI,QAAQ,MAAM,SAAS,kBAAkB,GAAG,GAAG;QACnD,IAAI,CAAC,OAAO;QACZ,IAAI,MAAM,mDAA6B,OAAO;QAC9C,IAAI,KAAK;QACT,IAAI,YAAY,WAAW;IAC/B;IACA,wCAAkB,SAAS;AAC/B;AACA,IAAI,uCAAiB;AAOrB;;;AAGA,GACA,SAAS,4CAAsB,KAAK,EAAE,GAAG;IACrC,IAAI,MAAM,MAAM,sBAAsB,IAAI,IAAI,CAAC,EAAE,EAAE,IAAI,IAAI,CAAC,EAAE,EAAE,IAAI,IAAI,CAAC,EAAE;IAC3E,IAAI,MAAM,MAAM,sBAAsB,IAAI,GAAG,CAAC,EAAE,EAAE,IAAI,GAAG,CAAC,EAAE,EAAE,IAAI,GAAG,CAAC,EAAE;IACxE,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;QACxB,IAAI,CAAC,OAAO,SAAS,IAAI,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,EAAE;QACvD,IAAI,CAAC,OAAO,SAAS,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE;IACzD;IACA,MAAM,aAAa,QAAQ,CAAA;QACvB,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG;QAChB,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,KAAK,GAAG,CAAC,EAAE,EAAE;QAC/B,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,KAAK,GAAG,CAAC,EAAE,EAAE;QAC/B,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,KAAK,GAAG,CAAC,EAAE,EAAE;QAC/B,MAAM,mBAAmB,IAAI,GAAG,GAAG;QACnC,MAAM,gBAAgB,OAAO,GAAG,GAAG;QACnC,MAAM,iBAAiB,OAAO,GAAG,GAAG;QACpC,MAAM,cAAc,OAAO,GAAG,GAAG;QACjC,MAAM,mBAAmB,OAAO,GAAG,GAAG;IAC1C;AACJ;AAQO,SAAS,0CAAqB,KAAK;IACtC,MAAM,mBAAmB,SAAS,MAAM;IACxC,MAAM,gBAAgB;IACtB,MAAM,iBAAiB;IACvB,MAAM,cAAc;IACpB,MAAM,mBAAmB;IACzB,8CAAwB,OAAO,MAAM;AACzC;AASA;;;AAGA,GACA,SAAS,0CAAoB,KAAK;IAC9B,IAAI,YAAY,MAAM;IACtB,IAAI,UAAU,WAAW,OAAO;IAChC,qEAAqE;IACrE,IAAI,UAAU,MAAM,eAAe;IACnC,IAAI,SAAS,MAAM,cAAc;IACjC,IAAI,WAAW,MAAM,0BAA0B,OAAO;IACtD,IAAI,UAAU,MAAM,yBAAyB,OAAO;IACpD,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,UAAU;IAC1B,sCAAgB,OAAO,GAAG,GAAG;IAC7B,OAAO,UAAU;AACrB;AAGA,yBAAyB,GACzB,SAAS,yCAAmB,KAAK;IAC7B,IAAI,QAAQ,MAAM;IAClB,IAAI,MAAM,WAAW,QAAQ,MAAM;IACnC,IAAI,MAAM,WAAW,OAAO;IAC5B,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM;IACtB,kCAAY,OAAO,GAAG,GAAG;IACzB,OAAQ,MAAM;AAClB;AAGA;;;AAGA,GACA,SAAS,0CAAoB,KAAK,EAAE,SAAS;IACzC,IAAI,QAAQ,MAAM;IAClB,IAAI,MAAM,aAAa,CAAC,WAAW,QAAQ,MAAM;IACjD,IAAI,MAAM,WAAW,OAAO;IAC5B,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM;IACtB,IAAI,MAAM,gBAAgB,SAAS,GAAG,GAAG,IAAI;IAC7C,IAAI,QAAQ,MAAM,SAAS,kBAAkB,GAAG,GAAG;IACnD,IAAI,OAAO,oCAAc,OAAO;AACpC;AAGA,yBAAyB,GACzB,SAAS,mDAA6B,KAAK,EAAE,KAAK;IAC9C,IAAI,CAAE,CAAA,MAAM,iBAAiB,MAAM,aAAY,GAAI,OAAO;IAC1D,IAAI,MAAM,iBAAiB,MAAM,oBAAoB,OAAO;IAC5D,IAAI,MAAM,cAAc,SAAS,MAAM,GAAG,MAAM,GAAG,MAAM,IAAI,OAAO;IACpE,IAAI,MAAM,mBAAmB,SAAS,MAAM,GAAG,MAAM,GAAG,MAAM,IAAI,OAAO;IACzE,IAAI,QAAQ,AAAC,MAAM,mBAAmB,KAClC,MAAM,qBAAqB,MAAM;IACrC,MAAM,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM;IAClC,MAAM;IACN,IAAI,MAAM,sBAAsB,IAAI;QAChC,8CAAwB,OAAO;QAC/B,MAAM,sBAAsB;IAChC;IACA,OAAO;AACX;AAOA;;;;;;;;AAQA,GAGA;;;AAGA,GACA,SAAS,sCAAgB,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,IAAI,OAAO,MAAM;IACjB,IAAI,UAAU,CAAA,GAAA,yCAAI,EAAE,kBAAkB,MAAM;IAC5C,IAAI,YAAY,MAAM,IAAI;IAC1B,IAAI,YAAY;QAAC;QAAG;QAAG;QAAG;KAAU,CAAC,KAAK;IAC1C,IAAI,IAAI,IAAI;IACZ,IAAI,IAAI,IAAI;IACZ,IAAI,IAAI,IAAI;IACZ,MAAM,eAAe,IAAI,GAAG,GAAG;IAC/B,MAAM,KAAK,mBAAmB,WAAW,SAAS,GAAG,GAAG,GAAG;IAC3D,0CAAoB;AACxB;AAEA;;;;AAIA,GACA,SAAS,mCAAa,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAW;IAC5D,IAAI,MAAM,MAAM,MAAM;IACtB,IAAI,IAAI,SAAS,IAAI;IACrB,IAAI,IAAI,SAAS,IAAI;IACrB,IAAI,IAAI,SAAS,IAAI;IACrB,IAAI,YAAY,IAAI,KAAK;IACzB,MAAM,eAAe,OAAO,GAAG,GAAG;IAClC,4DAA4D;IAC5D,IAAI,cAAc,MAAM,IAAI,WAAW;IACvC,uCAAuC;IACvC,IAAI,CAAC,MAAM,aAAa,SAAS,GAAG,GAAG,IAAI;IAC3C,IAAI,MAAM,gBAAgB,SAAS,GAAG,GAAG,IAAI;IAE7C,IAAI,QAAQ,MAAM,SAAS,kBAAkB,GAAG,GAAG;IACnD,IAAI,CAAC,OAAO;QACR,0CAA0C;QAC1C,IAAI,OAAO,MAAM;QACjB,QAAQ,IAAI,CAAA,GAAA,yCAAI,EAAE,MAAM,KAAK,OAAO,GAAG,GAAG,GAAG,MAAM,OAAO;QAC1D,MAAM,SAAS,oBAAoB,GAAG,GAAG,GAAG;QAC5C,MAAM,WAAW;QACjB,MAAM,IAAI,UAAU,yBAAyB;QAC7C,MAAM,KAAK,cAAc;IAC7B,OACI,iDAAiD;IACjD,MAAM,kBAAkB,OAAO;IAEnC,8CAA8C;IAC9C,mDAA6B,OAAO;IACpC,6CAAuB,OAAO,GAAG,GAAG,GAAG;IAEvC,0CAAoB;AACxB;AAIA;;;AAGA,GACA,SAAS,kCAAY,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC/B,IAAI,QAAQ,MAAM,SAAS,kBAAkB,GAAG,GAAG;IAEnD,IAAI,OAAO;QACP,MAAM,KAAK,qBAAqB,MAAM,WAAW,MAAM,QAAQ,MAAM;QACrE,MAAM,IAAI,UAAU,yBAAyB;QAC7C,MAAM;QACN,0CAAoB;QACpB,6CAAuB,OAAO,GAAG,GAAG,GAAG;IAC3C;IAEA,MAAM,SAAS,qBAAqB,GAAG,GAAG;IAC1C,MAAM,aAAa,OAAO,GAAG,GAAG;IAChC,MAAM,cAAc,OAAO,GAAG,GAAG;IACjC,MAAM,gBAAgB,OAAO,GAAG,GAAG;IACnC,MAAM,mBAAmB,OAAO,GAAG,GAAG;AAC1C;AAGA,yBAAyB,GACzB,SAAS,oCAAc,KAAK,EAAE,KAAK;IAC/B,MAAM,cAAc,OAAO,MAAM,GAAG,MAAM,GAAG,MAAM;IACnD,MAAM,mBAAmB,OAAO,MAAM,GAAG,MAAM,GAAG,MAAM;IACxD,MAAM;IACN,0CAAoB;AACxB;AAWA;;;;;;;AAOA,GAEA,SAAS,kDAA4B,CAAC,EAAE,CAAC,EAAE,CAAC;IACxC,IAAI,KAAK,IAAI,CAAC;IACd,OAAO;QAAC,KAAK,MAAM,IAAI,MAAM;QAAG,KAAK,MAAM,IAAI,MAAM;QAAG,KAAK,MAAM,IAAI,MAAM;KAAE;AACnF;AACA,SAAS,iDAA2B,CAAC,EAAE,CAAC,EAAE,CAAC;IACvC,IAAI,KAAK,IAAI,CAAC;IACd,IAAI,IAAI,AAAC,IAAI,KAAM;IAAG,IAAI,IAAI,GAAG,KAAK;IACtC,IAAI,IAAI,AAAC,IAAI,KAAM;IAAG,IAAI,IAAI,GAAG,KAAK;IACtC,IAAI,IAAI,AAAC,IAAI,KAAM;IAAG,IAAI,IAAI,GAAG,KAAK;IACtC,OAAO;QAAC;QAAG;QAAG;KAAE;AACpB;AACA,SAAS,qDAA+B,CAAC,EAAE,CAAC,EAAE,CAAC;IAC3C,IAAI,QAAQ,IAAI,CAAC;IACjB,OAAO;QAAE,KAAK,QAAS;QAAI,KAAK,QAAS;QAAI,KAAK,QAAS;KAAE;AACjE;AACA,SAAS,oDAA8B,CAAC,EAAE,CAAC,EAAE,CAAC;IAC1C,IAAI,OAAO,IAAI,CAAC;IAChB,OAAO;QAAE,IAAI,OAAQ;QAAI,IAAI,OAAQ;QAAI,IAAI,OAAQ;KAAE;AAC3D;AAQA;;;;;;;;AAQA,GAEA;;;AAGA,GACA,SAAS,8CAAwB,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,UAAU,KAAK;IACtE,IAAI,SAAS,MAAM,sBAAsB;IACzC,IAAI,YAAY,CAAC,GAAG,GAAG,IAAM,OAAO,KAAK,GAAG,KAAK,GAAG,KAAK;IACzD,IAAI,OAAO,WACP,CAAC,IAAI,IAAI,GAAG,GAAG,4CAAsB;IAEzC,MAAM,eAAe,WAAW;AACpC;AACA,IAAI,4CAAsB,CAAC,GAAG,GAAG,IAAM,AAAC,IAAI,IAAM,IAAI,IAAM,IAAI;AAKhE;;;AAGA,GACA,SAAS,6CAAuB,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK;IACpD,IAAI,iBAAiB,AAAC,CAAC,SAAW,SAAS,CAAC,MAAM;IAClD,IAAK,IAAI,IAAI,IAAI,KAAK,GAAG,IAAK;QAC1B,IAAK,IAAI,IAAI,IAAI,KAAK,GAAG,IACrB,IAAK,IAAI,IAAI,IAAI,KAAK,GAAG,IAAK;YAC1B,IAAI,AAAC,CAAA,IAAI,IAAI,CAAA,MAAO,GAAG;YACvB,IAAI,WAAW,MAAM,SAAS,kBAAkB,KAAK,GAAG,KAAK,GAAG,KAAK;YACrE,IAAI,CAAC,UAAU;YACf,gDAAgD;YAChD,IAAI,gBAAgB,SAAS,gBAAgB;YAC7C,mDAAmD;YACnD,IAAI,SAAS,CAAC,MAAM,WAAW,IAAI,GAAG,GAAG,IAAI;gBACzC,MAAM;gBACN,MAAM,WAAW,IAAI,GAAG,GAAG,GAAG;YAClC;YACA,IAAI,SAAS,SAAS,WAAW,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;YAC9C,IAAI,SAAS,CAAC,QAAQ;gBAClB,SAAS;gBACT,SAAS,WAAW,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG;gBACpC,gDAAgD;gBAChD,IAAI,SAAS,mBAAmB,IAC5B,mDAA6B,OAAO;YAE5C;YACA,IAAI,CAAC,SAAS,QAAQ;gBAClB,SAAS;gBACT,SAAS,WAAW,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG;YACxC;QACJ;IAER;AACJ;AAGA,kFAAkF;AAClF,SAAS,+CAAyB,KAAK,EAAE,KAAK;IAC1C,IAAI,MAAM,QAAQ;IAClB,IAAI,MAAM,QAAQ;IAClB,iBAAiB;IACjB,IAAI,UAAU,OAAO,OAAO,CAAC,GAAG,GAAG,IAAO,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK;IACnE,uCAAuC;IACvC,IAAI,QAAQ,OAAO,OAAO,CAAC,GAAG,GAAG;QAC7B,IAAI,KAAK,IAAI,KAAK,OAAO,OAAO;QAChC,OAAQ,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK;IACrC;IACA,OAAO,CAAC,GAAG,GAAG;QACV,IAAI,OAAO,IAAI,IAAI,IAAI;QACvB,IAAI,OAAO,KAAK,OAAO;QACvB,OAAQ,OAAO,IAAI,KAAK;IAC5B;AACJ;AAWA;;;;;;;;;;AAUA,GAEA,cAAc,GACd,0CAAM,UAAU,SAAS;IACrB,QAAQ,IAAI,sCAAsC,IAAI,CAAC;IACvD,8BAAQ,IAAI,EAAE,iBAAiB,IAAI,CAAC,aAAa,KAAK;IACtD,8BAAQ,IAAI,EAAE,iBAAiB,IAAI,CAAC,iBAAiB,KAAK;IAC1D,8BAAQ,IAAI,EAAE,iBAAiB,IAAI,CAAC,gBAAgB,KAAK;IACzD,8BAAQ,IAAI,EAAE,iBAAiB,IAAI,CAAC,mBAAmB,KAAK;IAC5D,8BAAQ,IAAI,EAAE,iBAAiB,IAAI,CAAC,eAAe,KAAK;IACxD,8BAAQ,IAAI,EAAE,iBAAiB,IAAI,CAAC,cAAc,KAAK;IACvD,8BAAQ,IAAI,EAAE,iBAAiB,IAAI,CAAC,mBAAmB,KAAK;AAChE;AAEA,SAAS,8BAAQ,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG;IAClC,IAAI,OAAO,GACP,QAAQ,GACR,QAAQ,GACR,aAAa,GACb,WAAW,EAAE;IACjB,IAAI,QAAQ,CAAA;QACR,IAAI,QAAQ,MAAM,SAAS,kBAAkB,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE;QACnE,IAAI,CAAC,OAAO;QACZ;QACA,SAAS,KAAK,MAAM;QACpB,IAAI,MAAM,SAAS;QACnB,IAAI,MAAM,UAAU;QACpB,IAAI,MAAM,mBAAmB,IAAI;IACrC;IACA,IAAI,MAAM,IAAI,OAAO,WAAW,OAAO;IACvC,OAAO,AAAC,CAAA,YAAY,KAAI,EAAG,OAAO;IAClC,OAAO,AAAC,CAAA,WAAW,IAAG,EAAG,OAAO;IAChC,OAAO,AAAC,CAAA,YAAY,KAAI,EAAG,OAAO;IAClC,OAAO,AAAC,CAAA,WAAW,UAAS,EAAG,OAAO;IACtC,IAAI,KAAK;QACL,IAAI,MAAM,SAAS,OAAO,CAAC,KAAK,MAAQ,MAAM,KAAK;QACnD,IAAI,MAAM,SAAS,OAAO,CAAC,KAAK,MAAQ,KAAK,IAAI,KAAK,MAAM;QAC5D,IAAI,MAAM,SAAS,OAAO,CAAC,KAAK,MAAQ,KAAK,IAAI,KAAK,MAAM;QAC5D,OAAO,uBAAuB,AAAC,CAAA,MAAM,KAAI,EAAG,QAAQ;QACpD,OAAO,WAAW;QAClB,OAAO,WAAW;IACtB;IACA,QAAQ,IAAI,MAAM;AACtB;AAIA,IAAI,qCAAe,CAAA,GAAA,yCAAc,EAAE,qCAAe,gBAAgB;AAClE,IAAI,4CAAsB,AAAC,CAAA,CAAC;IACxB,IAAI,CAAE,CAAA,QAAQ,CAAA,GAAI,OAAO,KAAQ;IACjC,IAAI,OAAO;IACX,IAAI,SAAS,CAAC;IACd,IAAI,SAAS,CAAC;IACd,IAAI,UAAU,YAAY;IAC1B,OAAO,SAAS,oBAAoB,KAAK,EAAE,KAAK;QAC5C,IAAI,UAAU,SAAS;QACvB,IAAI,UAAU,OAAO,OAAO,MAAM,CAAC,MAAM,GAAG,AAAC,CAAA,MAAM,CAAC,MAAM,IAAI,CAAA,IAAK;QACnE,OAAO,QAAQ,AAAC,CAAA,OAAO,SAAS,CAAA,IAAK,MAAM,iBAAiB;QAC5D,OAAO,QAAQ,AAAC,CAAA,OAAO,SAAS,CAAA,IAAK,MAAM,eAAe;QAC1D,OAAO,SAAS,AAAC,CAAA,OAAO,UAAU,CAAA,IAAK,MAAM,cAAc,UAAU,MAAM,mBAAmB;QAC9F,OAAO,UAAU,AAAC,CAAA,OAAO,WAAW,CAAA,IAAK,MAAM,mBAAmB;QAClE,OAAO,QAAQ,AAAC,CAAA,OAAO,SAAS,CAAA,IAAK,MAAM,gBAAgB;QAC3D,IAAI,EAAE,OAAO,OAAO;QACpB,IAAI,IAAI,YAAY,OAAO,KAAK,IAAI;QACpC,IAAI,MAAM,CAAC;QACX,OAAO,KAAK,QAAQ,QAAQ,CAAA;YACxB,IAAI,MAAM,KAAK,MAAM,AAAC,CAAA,MAAM,CAAC,EAAE,IAAI,CAAA,IAAK;YACxC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,SAAS;QACjC;QACA,OAAO,KAAK,QAAQ,QAAQ,CAAA;YACxB,IAAI,MAAM,KAAK,MAAM,AAAC,CAAA,MAAM,CAAC,EAAE,IAAI,CAAA,IAAK,OAAO;YAC/C,GAAG,CAAC,EAAE,GAAG,AAAC,CAAA,KAAK,GAAE,EAAG,SAAS;QACjC;QACA,QAAQ,IAAI,gBACR,CAAC,EAAE,IAAI,MAAM,GAAG,EAAE,IAAI,WAAW,EAAE,QAAQ,CAAC,EAC5C,CAAC,EAAE,IAAI,MAAM,GAAG,EAAE,IAAI,WAAW,EAAE,QAAQ,CAAC,EAC5C,CAAC,EAAG,IAAI,OAAQ,GAAG,EAAE,IAAI,QAAQ,EAAE,SAAS,CAAC,EAC7C,CAAC,EAAE,IAAI,MAAM,GAAG,EAAE,IAAI,WAAW,EAAE,QAAQ,CAAC,EAC5C,CAAC,YAAY,EAAE,IAAI,QAAQ,OAAO,CAAC,CAAC;QAExC,OAAO;QACP,SAAS,CAAC;QACV,SAAS,CAAC;QACV,UAAU,YAAY;IAC1B;AACJ,CAAA,EAAG;;;;AzB1gCH,gCAAgC;AAChC,IAAI,gCAAU;AACd,IAAI,uCAAiB;AAGrB,IAAI,uCAAiB;IACjB,OAAO;IACP,QAAQ;IACR,eAAe;IACf,cAAc;IACd,aAAa;IACb,aAAa;QAAC;QAAG;QAAI;KAAE;IACvB,gBAAgB;IAChB,uBAAuB;IACvB,UAAU;IACV,eAAe;IACf,mBAAmB;IACnB,mBAAmB;IACnB,8BAA8B;IAC9B,kBAAkB;IAClB,yBAAyB;IACzB,sBAAsB;AAC1B;AAoBO,MAAM,kDAAe,CAAA,GAAA,mBAAW;IAEnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoCA,GACA,YAAY,OAAO,CAAC,CAAC,CAAE;QACnB,KAAK;QACL,OAAO,OAAO,OAAO,CAAC,GAAG,sCAAgB;QAEzC,oCAAoC,GACpC,IAAI,CAAC,KAAK,QAAQ;YACd,IAAI,WAAW,AAAC,KAAK,QAAS,aAAa;YAC3C,QAAQ,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC;QACxC;QAEA,cAAc,GACd,IAAI,CAAC,UAAU;QAEf,cAAc,GACd,IAAI,CAAC,wBAAwB,KAAK;QAElC,kEAAkE;QAClE,cAAc,GACd,IAAI,CAAC,oBAAoB;YAAC;YAAG;YAAG;SAAE;QAElC,gEAAgE;QAChE,cAAc,GACd,IAAI,CAAC,wBAAwB;QAE7B;;;QAGA,GACA,IAAI,CAAC,YAAY;QAEjB;;;;QAIA,GACA,IAAI,CAAC,YAAY;QAEjB,iEAAiE,GACjE,IAAI,CAAC,YAAY,IAAI,CAAA,GAAA,yCAAQ,EAAE,IAAI,EAAE;QAErC;;;QAGA,GACA,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU,OAAO;QACtC,OAAO,eAAe,IAAI,EAAE,YAAY;YACpC,KAAK,IAAM,IAAI,CAAC,UAAU,OAAO;QACrC;QAEA;;SAEC,GACD,IAAI,CAAC,gBAAgB,IAAI,CAAC,UAAU,OAAO;QAC3C,OAAO,eAAe,IAAI,EAAE,iBAAiB;YACzC,KAAK,IAAM,IAAI,CAAC,UAAU,OAAO;YACjC,KAAK,CAAC;gBAAQ,IAAI,CAAC,UAAU,OAAO,gBAAgB,KAAK;YAAE;QAC/D;QAGA,yCAAyC,GACzC,IAAI,CAAC,SAAS,IAAI,CAAA,GAAA,yCAAK,EAAE,IAAI,EAAE,MAAM,IAAI,CAAC,UAAU;QAEpD,2DAA2D,GAC3D,IAAI,CAAC,WAAW,IAAI,CAAA,GAAA,wCAAO,EAAE,IAAI,EAAE;QAEnC,kDAAkD,GAClD,IAAI,CAAC,QAAQ,IAAI,CAAA,GAAA,yCAAI,EAAE,IAAI,EAAE;QAE7B,IAAI,cAAc,QAAQ;QAC1B,IAAI,KAAK,eAAe,QAAQ,MAAM,KAAQ;QAE9C,sBAAsB,GACtB,IAAI,CAAC,YAAY,IAAI,CAAA,GAAA,yCAAQ,EAAE,IAAI,EAAE,MAAM,IAAI,CAAC,UAAU;QAE1D,IAAI,KAAK,eAAe,QAAQ,MAAM;QAEtC,yDAAyD,GACzD,IAAI,CAAC,UAAU,IAAI,CAAA,GAAA,yCAAM,EAAE,IAAI,EAAE;QAEjC,mDAAmD,GACnD,IAAI,CAAC,WAAW,IAAI,CAAA,GAAA,yCAAO,EAAE,IAAI,EAAE;QAEnC,4BAA4B,GAC5B,IAAI,CAAC,OAAO,IAAI,CAAC;QACjB,IAAI,OAAO,IAAI,CAAC;QAEhB,oCAAoC,GACpC,IAAI,CAAC,eAAe,KAAK,IACrB,KAAK,aACL,KAAK,aAAa,KAAK,cACvB,MAAM,MACN,MAAM,KAAK;QAGf,gEAAgE;QAChE,KAAK,aAAa,IAAI,CAAC,cAAc,KAAK,MAAM;QAChD,KAAK,aAAa,IAAI,CAAC,cAAc,KAAK,MAAM;QAEhD,oCAAoC;QACpC,IAAI,OAAO,KAAK,WAAW,IAAI,CAAC,cAAc;QAC9C,KAAK,oBAAoB,EAAE,cAAc;;QACzC,KAAK,WAAW,KAAK,eAAe,wBAAwB;;QAE5D,iEAAiE;QACjE,KAAK,aAAa,IAAI,CAAC,cAAc,KAAK,MAAM;QAEhD,+DAA+D;QAC/D,KAAK,aAAa,IAAI,CAAC,cAAc,KAAK,MAAM;QAEhD,+CAA+C;QAC/C,KAAK,aAAa,IAAI,CAAC,cAAc,KAAK,MAAM,UAAU;YACtD,UAAU;QACd;QAEA,6DAA6D,GAC7D,IAAI,CAAC,SAAS,IAAI,CAAA,GAAA,yCAAK,EAAE,IAAI,EAAE;QAE/B;;QAEA,GACA,IAAI,CAAC,oBAAoB,KAAK;QAE9B;;;;QAIA,GACA,IAAI,CAAC,qBAAqB,IAAI,CAAC,SAAS;QAExC;;;;;;;;QAQA,GACA,IAAI,CAAC,gBAAgB;QAErB,4CAA4C;QAC5C,IAAI,CAAC,KAAK,yBAAyB;YAC/B,gFAAgF;YAChF,IAAI,CAAC,gCAAgC,CAAC;gBAClC,IAAI,KACA,IAAI,CAAC,UAAU,mBAAmB,MAAM,IAAI,UAAU,IAAI;qBAE1D,IAAI,CAAC,UAAU,mBAAmB;YAE1C;YACA,IAAI,CAAC,GAAG,sBAAsB,IAAI,CAAC;QACvC;QAGA;;;;QAIA,GAEA,cAAc,GACd,IAAI,CAAC,iBAAiB,IAAI,CAAA,GAAA,yCAAY,EAAE,IAAI;QAE5C,cAAc,GACd,IAAI,CAAC,gBAAgB,IAAI,CAAA,GAAA,yCAAW,EAAE,IAAI;QAE1C,cAAc,GACd,IAAI,CAAC,oBAAoB;YACrB,SAAS;YACT,UAAU,CAAA,GAAA,aAAG,EAAE;YACf,QAAQ,CAAA,GAAA,aAAG,EAAE;YACb,UAAU,CAAA,GAAA,aAAG,EAAE;QACnB;QAEA,cAAc,GACd,IAAI,CAAC,kBAAkB;QAGvB,cAAc,GACd,IAAI,CAAC,WAAW,CAAA,GAAA,aAAG,EAAE;QAErB,cAAc,GACd,IAAI,CAAC,cAAc;YACf,gBAAgB,CAAA,GAAA,aAAG,EAAE;YACrB,UAAU;gBAAC;gBAAG;gBAAG;aAAE;YACnB,QAAQ;gBAAC;gBAAG;gBAAG;aAAE;QACrB;QAMA,6BAA6B;QAC7B,IAAI,KAAK,OAAO;YACZ,4BAA4B;YAC5B,cAAc,GACd,IAAI,CAAC,OAAO,CAAA,GAAA,aAAG;YACf,cAAc,GACd,IAAI,CAAC,UAAU,CAAA,GAAA,cAAM;YACrB,kBAAkB;YAClB,KAAK,YAAY,GAAG,WAAW;YAC/B,wCAAwC;YACxC,IAAI,MAAM,gBAAgB,GAAI;YAC9B,IAAI,MAAM,IAAI;YACd,IAAI,OAAO,CAAA,GAAA,aAAG;YACd,IAAI,UAAU,CAAA,GAAA,cAAM;YACpB,IAAI,QAAQ,IAAI,CAAC,UAAU;QAC/B;QAEA,kEAAkE;QAClE,qCAAe,IAAI;IACvB;IAIA;;;;;;IAMA,GAEA;;;;IAIA,GAEA,KAAK,EAAE,EAAE;QACL,MAAM,IAAI,CAAC,aAAa;QAExB,kDAAkD;QAClD,IAAI,IAAI,CAAC,SAAS;YACd,IAAI,IAAI,CAAC,MAAM,qBAAqB,IAAI,CAAC,MAAM;YAC/C;QACJ;QACA,mCAAa;QACb,uCAAiB,IAAI;QACrB,IAAI,CAAC,MAAM,OAAO,yBAAyB;;QAC3C,mCAAa;QACb,IAAI,CAAC,IAAI,CAAC,MAAM,mBAAmB;YAC/B,iEAAiE;YACjE,IAAI,CAAC,UAAU,KAAK;YACpB;QACJ;QACA,IAAI,CAAC,QAAQ,KAAK,IAAI,mBAAmB;;QACzC,mCAAa;QACb,IAAI,CAAC,cAAc,OAAO,4BAA4B;;QACtD,IAAI,CAAC,UAAU,KAAK,IAAI,8BAA8B;;QACtD,mCAAa;QACb,yCAAmB,IAAI,EAAE,sDAAsD;;QAC/E,mCAAa;QACb,IAAI,CAAC,SAAS,KAAK,IAAI,0BAA0B;;QACjD,mCAAa;QACb,IAAI,CAAC,KAAK,QAAQ;QAClB,mCAAa;QACb,mCAAa;QACb,mEAAmE;QACnE,IAAI,MAAM,IAAI,CAAC,OAAO;QACtB,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU;IAC9C;IAKA;;;;;IAKA,GACA,OAAO,EAAE,EAAE,SAAS,EAAE;QAClB,MAAM,IAAI,CAAC,aAAa;QAExB,0DAA0D;QAC1D,sDAAsD;QACtD,sDAAsD;QAEtD,wDAAwD;QACxD,IAAI,CAAC,wBAAwB;QAE7B,wDAAwD;QACxD,IAAI,IAAI,CAAC,SAAS;YACd,IAAI,IAAI,CAAC,MAAM,qBAAqB,IAAI,CAAC,MAAM;YAC/C;QACJ;QAEA,0CAAoB;QAEpB,sEAAsE;QACtE,IAAI,CAAC,OAAO;QACZ,0CAAoB;QAEpB,kCAAkC;QAClC,IAAI,CAAC,MAAM;QACX,0CAAoB;QAEpB,wBAAwB;QACxB,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,SAAS,OAAO;QACrB,IAAI,CAAC,OAAO;QACZ,0CAAoB;QAEpB,oBAAoB;QACpB,IAAI,CAAC,KAAK,gBAAgB;QAC1B,0CAAoB;QAEpB,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,UAAU;QACf,0CAAoB;QAEpB,IAAI,CAAC,KAAK,eAAe;QACzB,0CAAoB;QACpB,0CAAoB;QAEpB,uEAAuE;QACvE,IAAI,CAAC,OAAO,aAAa,KAAK,IAAI,CAAC,OAAO,aAAa,KAAK;IAChE;IAKA,+DAA+D,GAC/D,UAAU,SAAS,KAAK,EAAE;QACtB,IAAI,CAAC,UAAU,CAAC,CAAC;QACjB,kDAAkD;QAClD,IAAI,CAAC,QACD,IAAI,CAAC,OAAO,aAAa,KAAK,IAAI,CAAC,OAAO,aAAa,KAAK;IAEpE;IAEA;;IAEA,GACA,SAAS,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;QACtB,IAAI,EAAE,QAAQ,OAAO,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;QAC3D,OAAO,IAAI,CAAC,MAAM,WAAW,GAAG,GAAG;IACvC;IAEA;;;KAGC,GACD,SAAS,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;QAC1B,IAAI,EAAE,QAAQ,OAAO,IAAI,CAAC,MAAM,WAAW,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;QAC/D,OAAO,IAAI,CAAC,MAAM,WAAW,IAAI,GAAG,GAAG;IAC3C;IAEA;;IAEA,GACA,SAAS,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE;QAC1B,+DAA+D;QAC/D,IAAI,EAAE,QAAQ;YACV,IAAI,IAAI,CAAC,SAAS,iBAAiB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG;YACtD,IAAI,CAAC,MAAM,WAAW,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;YAC1C,OAAO;QACX,OAAO;YACH,IAAI,IAAI,CAAC,SAAS,iBAAiB,GAAG,GAAG,IAAI;YAC7C,IAAI,CAAC,MAAM,WAAW,IAAI,GAAG,GAAG;YAChC,OAAO;QACX;IACJ;IAQA;;IAEA,GAGA;;;;;;;;;;KAUC,GACD,cAAc,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE;QACxC,IAAI,MAAM,IAAI,CAAC;QACf,IAAI,eAAe;YACf,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBACxB,IAAI,QAAQ,MAAM,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE;gBAC9B,SAAS,aAAa,CAAC,EAAE;gBACzB,KAAK,CAAC,EAAE,GAAG;YACf;YACA,OAAO;QACX,OACI,OAAO,CAAA,GAAA,aAAG,EAAE,SAAS,OAAO,QAAQ;IAE5C;IAEA;;;;;;;;;;;;;;IAcA,GACA,cAAc,KAAK,EAAE,MAAM,EAAE,gBAAgB,IAAI,EAAE;QAC/C,IAAI,MAAM,IAAI,CAAC;QACf,IAAI,eAAe;YACf,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;gBACxB,IAAI,UAAU,KAAK,MAAM,KAAK,CAAC,EAAE;gBACjC,MAAM,CAAC,EAAE,GAAG,UAAU,GAAG,CAAC,EAAE;gBAC5B,aAAa,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG;YAClC;YACA,OAAO;QACX,OACI,OAAO,CAAA,GAAA,aAAG,EAAE,IAAI,QAAQ,OAAO;IAEvC;IAKA;;IAEA,GAEA;;;;;;;;;IASA,GACA,KAAK,MAAM,IAAI,EAAE,MAAM,IAAI,EAAE,OAAO,EAAE,EAAE,oBAAoB,IAAI,EAAE;QAC9D,IAAI,SAAS,GAAG,OAAO;QACvB,yCAAyC;QACzC,IAAI,UAAU,IAAI,CAAC;QACnB,IAAI,KAAK;YACL,IAAI,CAAC,cAAc,KAAK,MAAM;YAC9B,MAAM;QACV;QACA,OAAO,IAAI,CAAC,WAAW,KAAK,KAAK,MAAM;IAC3C;IAGA;;;;;;;;;;;;;KAaC,GACD,WAAW,MAAM,IAAI,EAAE,MAAM,IAAI,EAAE,OAAO,EAAE,EAAE,oBAAoB,IAAI,EAAE;QACpE,qEAAqE;QACrE,IAAI,SAAS,GAAG,OAAO;QACvB,IAAI,SAAS,qBAAqB,IAAI,CAAC,SAAS;QAChD,IAAI,QAAQ,IAAI,CAAC;QACjB,IAAI,MAAM,IAAI,CAAC;QACf,IAAI,YAAY,SAAU,CAAC,EAAE,CAAC,EAAE,CAAC;YAC7B,IAAI,KAAK,MAAM,WAAW,IAAI,GAAG,CAAC,EAAE,EAAE,IAAI,GAAG,CAAC,EAAE,EAAE,IAAI,GAAG,CAAC,EAAE;YAC5D,OAAO,OAAO;QAClB;QACA,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,OAAO;QAC5B,MAAM,OAAO,IAAI,CAAC,OAAO;QACzB,OAAO,QAAQ;QACf,IAAI,OAAO,GAAG,OAAO,IAAI,CAAC;QAC1B,IAAI,SAAS,IAAI,CAAC;QAClB,IAAI,OAAO,OAAO;QAClB,IAAI,QAAQ,OAAO;QACnB,IAAI,MAAM,CAAA,GAAA,uBAAM,EAAE,WAAW,KAAK,KAAK,MAAM,MAAM;QACnD,IAAI,CAAC,KAAK,OAAO;QACjB,kFAAkF;QAClF,iEAAiE;QACjE,CAAA,GAAA,aAAG,EAAE,YAAY,MAAM,MAAM,OAAO;QACpC,oBAAoB;QACpB,IAAI,CAAC,cAAc,MAAM,OAAO;QAChC,OAAO;IACX;AAEJ;AAIA;;;;;;;;;AASA,GAKA;;;;AAIA,GACA,SAAS,uCAAiB,GAAG;IACzB,IAAI,OAAO,IAAI,KAAK,gBAAgB,IAAI,cAAc;IACtD,IAAI,SAAS,IAAI;IACjB,IAAI,CAAA,GAAA,aAAG,EAAE,OAAO,QAAQ,SAAS,QAAQ;IACzC,IAAI,QAAQ,EAAE;IACd,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;QACxB,KAAK,CAAC,EAAE,GAAG,KAAK,MAAM,IAAI,CAAC,EAAE;QAC7B,IAAI,iBAAiB,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE;IACxC;IACA,IAAI,UAAU,cAAc;IAC5B,IAAI,SAAS,cAAc;IAC3B,IAAI,cAAc,cAAc;AACpC;AAMA,8DAA8D;AAC9D,wDAAwD;AACxD,SAAS,yCAAmB,GAAG;IAC3B,IAAI,UAAU;IACd,IAAI,YAAY,IAAI,sBAAsB,IAAI,SAAS;IACvD,IAAI,SAAS,IAAI,WAAW,MAAM,MAAM,MAAM;IAC9C,IAAI,QAAQ;QACR,IAAI,MAAM,IAAI;QACd,8EAA8E;QAC9E,CAAA,GAAA,aAAG,EAAE,MAAM,IAAI,UAAU,OAAO;QAChC,CAAA,GAAA,aAAG,EAAE,KAAK,IAAI,QAAQ,OAAO;QAC7B,CAAA,GAAA,aAAG,EAAE,SAAS,IAAI,UAAU,IAAI,UAAU,IAAI;QAC9C,IAAI,UAAU,IAAI,MAAM,WAAW,IAAI,QAAQ,CAAC,EAAE,EAAE,IAAI,QAAQ,CAAC,EAAE,EAAE,IAAI,QAAQ,CAAC,EAAE;QACpF,IAAI,gBAAgB;QACpB,uEAAuE;QACvE,IAAI,MAAM,IAAI,UAAU,OAAO,IAAI;QACnC,IAAI,IAAI,CAAA,GAAA,sCAAa,EAAE,GAAG,CAAC,EAAE,GAAG,IAAI,SAAS,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE;QAC3D,KAAK,CAAA,GAAA,sCAAa,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,IAAI,CAAC,EAAE;QAC3D,UAAU;IACd,OACI,IAAI,gBAAgB;IAExB,IAAI,WAAW,IAAI,iBAAiB;QAChC,IAAI,KAAK,sBAAsB,IAAI;QACnC,IAAI,kBAAkB;IAC1B;AACJ;AAIA;;;;CAIC,GAED,SAAS,qCAAe,GAAG;IACvB,IAAI,MAAM,CAAC,IAAI,CAAC;IAChB,IAAI,MAAM,CAAC,KAAK,MAAM;QAClB,IAAI,UAAU;YAAQ,MAAM,CAAC,yBAAyB,EAAE,IAAI,GAAG,EAAE,IAAI,CAAC;QAAC;QACvE,OAAO,eAAe,KAAK,MAAM;YAAE,KAAK;YAAS,KAAK;QAAQ;IAClE;IACA,IAAI,KAAK,wBAAwB;IACjC,IAAI,KAAK,wBAAwB;IACjC,IAAI,KAAK,qBAAqB;IAC9B,IAAI,KAAK,mBAAmB;IAC5B,IAAI,KAAK,iBAAiB;IAC1B,IAAI,KAAK,cAAc;IACvB,IAAI,IAAI,WAAW,gBAAgB;IACnC,IAAI,IAAI,WAAW,gBAAgB;IACnC,IAAI,IAAI,WAAW,oBAAoB;IACvC,IAAI,IAAI,WAAW,mBAAmB;IACtC,IAAI,IAAI,WAAW,qBAAqB;IACxC,IAAI,IAAI,WAAW,qBAAqB;IACxC,IAAI,IAAI,WAAW,qBAAqB;IACxC,MAAM;IACN,IAAI,IAAI,WAAW,oBAAoB;IACvC,IAAI,IAAI,OAAO,6BAA6B;IAC5C,IAAI,IAAI,OAAO,4BAA4B;IAC3C,IAAI,IAAI,OAAO,yBAAyB;IACxC,IAAI,IAAI,OAAO,2BAA2B;IAC1C,MAAM;IACN,IAAI,KAAK,cAAc;IACvB,MAAM;IACN,IAAI,KAAK,aAAa;IACtB,IAAI,IAAI,WAAW,aAAa;IAChC,MAAM;IACN,IAAI,IAAI,OAAO,aAAa;IAC5B,IAAI,IAAI,OAAO,oBAAoB;IACnC,IAAI,IAAI,OAAO,uBAAuB;IACtC,MAAM;IACN,IAAI,IAAI,WAAW,4BAA4B;AACnD;AAIA,IAAI,qCAAe,AAAC,gCAAU,IAC1B,CAAA,GAAA,yCAAc,EAAE,+BAAS,aAAa,KAAQ;AAClD,IAAI,4CAAsB,AAAC,uCAAiB,IACxC,CAAA,GAAA,yCAAc,EAAE,sCAAgB,aAAa,KAAQ","sources":["src/index.js","src/lib/shims.js","src/lib/inputs.js","src/lib/container.js","src/lib/camera.js","src/lib/entities.js","src/components/position.js","src/components/physics.js","src/components/collideEntities.js","src/components/collideTerrain.js","src/components/fadeOnZoom.js","src/components/followsEntity.js","src/components/mesh.js","src/components/movement.js","src/components/receivesInputs.js","src/components/shadow.js","src/components/smoothCamera.js","src/lib/objectMesher.js","src/lib/util.js","src/lib/terrainMesher.js","src/lib/terrainMaterials.js","src/lib/registry.js","src/lib/rendering.js","src/lib/sceneOctreeManager.js","src/lib/physics.js","src/lib/world.js","src/lib/chunk.js"],"sourcesContent":["\n/*!\n * noa: an experimental voxel game engine.\n * @url      github.com/fenomas/noa\n * @author   Andy Hall <andy@fenomas.com>\n * @license  MIT\n */\n\nimport './lib/shims'\n\nimport { EventEmitter } from 'events'\nimport vec3 from 'gl-vec3'\nimport ndarray from 'ndarray'\nimport raycast from 'fast-voxel-raycast'\n\nimport { Inputs } from './lib/inputs'\nimport { Container } from './lib/container'\nimport { Camera } from './lib/camera'\nimport { Entities } from './lib/entities'\nimport { ObjectMesher } from './lib/objectMesher'\nimport { TerrainMesher } from './lib/terrainMesher'\nimport { Registry } from './lib/registry'\nimport { Rendering } from './lib/rendering'\nimport { Physics } from './lib/physics'\nimport { World } from './lib/world'\nimport { locationHasher } from './lib/util'\nimport { makeProfileHook } from './lib/util'\n\n\n// profile every N ticks/renders\nvar PROFILE = 0\nvar PROFILE_RENDER = 0\n\n\nvar defaultOptions = {\n    debug: false,\n    silent: false,\n    silentBabylon: false,\n    playerHeight: 1.8,\n    playerWidth: 0.6,\n    playerStart: [0, 10, 0],\n    playerAutoStep: false,\n    playerShadowComponent: true,\n    tickRate: 30,           // ticks per second\n    maxRenderRate: 0,       // max FPS, 0 for uncapped \n    blockTestDistance: 10,\n    stickyPointerLock: true,\n    dragCameraOutsidePointerLock: true,\n    stickyFullscreen: false,\n    skipDefaultHighlighting: false,\n    originRebaseDistance: 25,\n}\n\n\n/**\n * Main engine class.  \n * Takes an object full of optional settings as a parameter.\n * \n * ```js\n * import { Engine } from 'noa-engine'\n * var noa = new Engine({\n *    debug: false,\n * })\n * ```\n * \n * Note that the options object is also passed to noa's \n * child modules ({@link Rendering}, {@link Container}, etc).\n * See docs for each module for their options.\n * \n*/\n\nexport class Engine extends EventEmitter {\n\n    /**\n     * The core Engine constructor uses the following options:\n     * \n     * ```js\n     * var defaultOptions = {\n     *    debug: false,\n     *    silent: false,\n     *    playerHeight: 1.8,\n     *    playerWidth: 0.6,\n     *    playerStart: [0, 10, 0],\n     *    playerAutoStep: false,\n     *    playerShadowComponent: true,\n     *    tickRate: 30,           // ticks per second\n     *    maxRenderRate: 0,       // max FPS, 0 for uncapped \n     *    blockTestDistance: 10,\n     *    stickyPointerLock: true,\n     *    dragCameraOutsidePointerLock: true,\n     *    stickyFullscreen: false,\n     *    skipDefaultHighlighting: false,\n     *    originRebaseDistance: 25,\n     * }\n     * ```\n     * \n     * **Events:**\n     *  + `tick => (dt)`  \n     *    Tick update, `dt` is (fixed) tick duration in ms\n     *  + `beforeRender => (dt)`  \n     *    `dt` is the time (in ms) since the most recent tick\n     *  + `afterRender => (dt)`  \n     *    `dt` is the time (in ms) since the most recent tick\n     *  + `targetBlockChanged => (blockInfo)`  \n     *    Emitted each time the user's targeted world block changes\n     *  + `addingTerrainMesh => (mesh)`  \n     *    Alerts client about a terrain mesh being added to the scene\n     *  + `removingTerrainMesh => (mesh)`  \n     *    Alerts client before a terrain mesh is removed.\n    */\n    constructor(opts = {}) {\n        super()\n        opts = Object.assign({}, defaultOptions, opts)\n\n        /** Version string, e.g. `\"0.25.4\"` */\n        if (!opts.silent) {\n            var debugstr = (opts.debug) ? ' (debug)' : ''\n            console.log(`noa-engine ${debugstr}`)\n        }\n\n        /** @internal */\n        this._paused = false\n\n        /** @internal */\n        this._originRebaseDistance = opts.originRebaseDistance\n\n        // world origin offset, used throughout engine for origin rebasing\n        /** @internal */\n        this.worldOriginOffset = [0, 0, 0]\n\n        // how far engine is into the current tick. Updated each render.\n        /** @internal */\n        this.positionInCurrentTick = 0\n\n        /** \n         * String identifier for the current world. \n         * It's safe to ignore this if your game has only one level/world. \n        */\n        this.worldName = 'default'\n\n        /**\n         * Multiplier for how fast time moves. Setting this to a value other than \n         * `1` will make the game speed up or slow down. This can significantly \n         * affect how core systems behave (particularly physics!).\n        */\n        this.timeScale = 1\n\n        /** Child module for managing the game's container, canvas, etc. */\n        this.container = new Container(this, opts)\n\n        /** The game's tick rate (number of ticks per second) \n         * @type {number}\n         * @readonly \n        */\n        this.tickRate = this.container._shell.tickRate\n        Object.defineProperty(this, 'tickRate', {\n            get: () => this.container._shell.tickRate\n        })\n\n        /** The game's max framerate (use `0` for uncapped)\n         * @type {number}\n         */\n        this.maxRenderRate = this.container._shell.maxRenderRate\n        Object.defineProperty(this, 'maxRenderRate', {\n            get: () => this.container._shell.maxRenderRate,\n            set: (v) => { this.container._shell.maxRenderRate = v || 0 },\n        })\n\n\n        /** Manages key and mouse input bindings */\n        this.inputs = new Inputs(this, opts, this.container.element)\n\n        /** A registry where voxel/material properties are managed */\n        this.registry = new Registry(this, opts)\n\n        /** Manages the world, chunks, and all voxel data */\n        this.world = new World(this, opts)\n\n        var _consoleLog = console.log\n        if (opts.silentBabylon) console.log = () => { }\n\n        /** Rendering manager */\n        this.rendering = new Rendering(this, opts, this.container.canvas)\n\n        if (opts.silentBabylon) console.log = _consoleLog\n\n        /** Physics engine - solves collisions, properties, etc. */\n        this.physics = new Physics(this, opts)\n\n        /** Entity manager / Entity Component System (ECS) */\n        this.entities = new Entities(this, opts)\n\n        /** Alias to `noa.entities` */\n        this.ents = this.entities\n        var ents = this.entities\n\n        /** Entity id for the player entity */\n        this.playerEntity = ents.add(\n            opts.playerStart, // starting location\n            opts.playerWidth, opts.playerHeight,\n            null, null, // no mesh for now, no meshOffset, \n            true, opts.playerShadowComponent,\n        )\n\n        // make player entity it collide with terrain and other entities\n        ents.addComponent(this.playerEntity, ents.names.collideTerrain)\n        ents.addComponent(this.playerEntity, ents.names.collideEntities)\n\n        // adjust default physics parameters\n        var body = ents.getPhysics(this.playerEntity).body\n        body.gravityMultiplier = 2 // less floaty\n        body.autoStep = opts.playerAutoStep // auto step onto blocks\n\n        // input component - sets entity's movement state from key inputs\n        ents.addComponent(this.playerEntity, ents.names.receivesInputs)\n\n        // add a component to make player mesh fade out when zooming in\n        ents.addComponent(this.playerEntity, ents.names.fadeOnZoom)\n\n        // movement component - applies movement forces\n        ents.addComponent(this.playerEntity, ents.names.movement, {\n            airJumps: 1\n        })\n\n        /** Manages the game's camera, view angle, sensitivity, etc. */\n        this.camera = new Camera(this, opts)\n\n        /** How far to check for a solid voxel the player is currently looking at \n         * @type {number}\n        */\n        this.blockTestDistance = opts.blockTestDistance\n\n        /** \n         * Callback to determine which voxels can be targeted. \n         * Defaults to a solidity check, but can be overridden with arbitrary logic.\n         * @type {(blockID: number) => boolean} \n        */\n        this.blockTargetIdCheck = this.registry.getBlockSolidity\n\n        /** \n         * Dynamically updated object describing the currently targeted block.\n         * @type {null | { \n         *      blockID:number,\n         *      position: number[],\n         *      normal: number[],\n         *      adjacent: number[],\n         * }} \n        */\n        this.targetedBlock = null\n\n        // add a default block highlighting function\n        if (!opts.skipDefaultHighlighting) {\n            // the default listener, defined onto noa in case people want to remove it later\n            this.defaultBlockHighlightFunction = (tgt) => {\n                if (tgt) {\n                    this.rendering.highlightBlockFace(true, tgt.position, tgt.normal)\n                } else {\n                    this.rendering.highlightBlockFace(false)\n                }\n            }\n            this.on('targetBlockChanged', this.defaultBlockHighlightFunction)\n        }\n\n\n        /*\n         *\n         *      Various internals...\n         *\n        */\n\n        /** @internal */\n        this._terrainMesher = new TerrainMesher(this)\n\n        /** @internal */\n        this._objectMesher = new ObjectMesher(this)\n\n        /** @internal */\n        this._targetedBlockDat = {\n            blockID: 0,\n            position: vec3.create(),\n            normal: vec3.create(),\n            adjacent: vec3.create(),\n        }\n\n        /** @internal */\n        this._prevTargetHash = 0\n\n\n        /** @internal */\n        this._pickPos = vec3.create()\n\n        /** @internal */\n        this._pickResult = {\n            _localPosition: vec3.create(),\n            position: [0, 0, 0],\n            normal: [0, 0, 0],\n        }\n\n\n\n\n\n        // temp hacks for development\n        if (opts.debug) {\n            // expose often-used classes\n            /** @internal */\n            this.vec3 = vec3\n            /** @internal */\n            this.ndarray = ndarray\n            // gameplay tweaks\n            ents.getMovement(1).airJumps = 999\n            // decorate window while making TS happy\n            var win = /** @type {any} */ (window)\n            win.noa = this\n            win.vec3 = vec3\n            win.ndarray = ndarray\n            win.scene = this.rendering.scene\n        }\n\n        // add hooks to throw helpful errors when using deprecated methods\n        deprecateStuff(this)\n    }\n\n\n\n    /*\n     *\n     *\n     *              Core Engine APIs\n     *\n     *\n    */\n\n    /**\n     * Tick function, called by container module at a fixed timestep. \n     * Clients should not normally need to call this manually.\n     * @internal\n    */\n\n    tick(dt) {\n        dt *= this.timeScale || 1\n\n        // note dt is a fixed value, not an observed delay\n        if (this._paused) {\n            if (this.world.worldGenWhilePaused) this.world.tick()\n            return\n        }\n        profile_hook('start')\n        checkWorldOffset(this)\n        this.world.tick() // chunk creation/removal\n        profile_hook('world')\n        if (!this.world.playerChunkLoaded) {\n            // when waiting on worldgen, just tick the meshing queue and exit\n            this.rendering.tick(dt)\n            return\n        }\n        this.physics.tick(dt) // iterates physics\n        profile_hook('physics')\n        this._objectMesher.tick() // rebuild objects if needed\n        this.rendering.tick(dt) // does deferred chunk meshing\n        profile_hook('rendering')\n        updateBlockTargets(this) // finds targeted blocks, and highlights one if needed\n        profile_hook('targets')\n        this.entities.tick(dt) // runs all entity systems\n        profile_hook('entities')\n        this.emit('tick', dt)\n        profile_hook('tick event')\n        profile_hook('end')\n        // clear accumulated scroll inputs (mouseMove is cleared on render)\n        var pst = this.inputs.pointerState\n        pst.scrollx = pst.scrolly = pst.scrollz = 0\n    }\n\n\n\n\n    /**\n     * Render function, called every animation frame. Emits #beforeRender(dt), #afterRender(dt) \n     * where dt is the time in ms *since the last tick*.\n     * Clients should not normally need to call this manually.\n     * @internal\n    */\n    render(dt, framePart) {\n        dt *= this.timeScale || 1\n\n        // note: framePart is how far we are into the current tick\n        // dt is the *actual* time (ms) since last render, for\n        // animating things that aren't tied to game tick rate\n\n        // frame position - for rendering movement between ticks\n        this.positionInCurrentTick = framePart\n\n        // when paused, just optionally ping worldgen, then exit\n        if (this._paused) {\n            if (this.world.worldGenWhilePaused) this.world.render()\n            return\n        }\n\n        profile_hook_render('start')\n\n        // rotate camera per user inputs - specific rules for this in `camera`\n        this.camera.applyInputsToCamera()\n        profile_hook_render('init')\n\n        // brief run through meshing queue\n        this.world.render()\n        profile_hook_render('meshing')\n\n        // entity render systems\n        this.camera.updateBeforeEntityRenderSystems()\n        this.entities.render(dt)\n        this.camera.updateAfterEntityRenderSystems()\n        profile_hook_render('entities')\n\n        // events and render\n        this.emit('beforeRender', dt)\n        profile_hook_render('before render')\n\n        this.rendering.render()\n        this.rendering.postRender()\n        profile_hook_render('render')\n\n        this.emit('afterRender', dt)\n        profile_hook_render('after render')\n        profile_hook_render('end')\n\n        // clear accumulated mouseMove inputs (scroll inputs cleared on render)\n        this.inputs.pointerState.dx = this.inputs.pointerState.dy = 0\n    }\n\n\n\n\n    /** Pausing the engine will also stop render/tick events, etc. */\n    setPaused(paused = false) {\n        this._paused = !!paused\n        // when unpausing, clear any built-up mouse inputs\n        if (!paused) {\n            this.inputs.pointerState.dx = this.inputs.pointerState.dy = 0\n        }\n    }\n\n    /** \n     * Get the voxel ID at the specified position\n    */\n    getBlock(x, y = 0, z = 0) {\n        if (x.length) return this.world.getBlockID(x[0], x[1], x[2])\n        return this.world.getBlockID(x, y, z)\n    }\n\n    /** \n     * Sets the voxel ID at the specified position. \n     * Does not check whether any entities are in the way! \n     */\n    setBlock(id, x, y = 0, z = 0) {\n        if (x.length) return this.world.setBlockID(id, x[0], x[1], x[2])\n        return this.world.setBlockID(id, x, y, z)\n    }\n\n    /**\n     * Adds a block, unless there's an entity in the way.\n    */\n    addBlock(id, x, y = 0, z = 0) {\n        // add a new terrain block, if nothing blocks the terrain there\n        if (x.length) {\n            if (this.entities.isTerrainBlocked(x[0], x[1], x[2])) return\n            this.world.setBlockID(id, x[0], x[1], x[2])\n            return id\n        } else {\n            if (this.entities.isTerrainBlocked(x, y, z)) return\n            this.world.setBlockID(id, x, y, z)\n            return id\n        }\n    }\n\n\n\n\n\n\n\n    /*\n     *              Rebasing local <-> global coords\n    */\n\n\n    /** \n     * Precisely converts a world position to the current internal \n     * local frame of reference.\n     * \n     * See `/docs/positions.md` for more info.\n     * \n     * Params: \n     *  * `global`: input position in global coords\n     *  * `globalPrecise`: (optional) sub-voxel offset to the global position\n     *  * `local`: output array which will receive the result\n     */\n    globalToLocal(global, globalPrecise, local) {\n        var off = this.worldOriginOffset\n        if (globalPrecise) {\n            for (var i = 0; i < 3; i++) {\n                var coord = global[i] - off[i]\n                coord += globalPrecise[i]\n                local[i] = coord\n            }\n            return local\n        } else {\n            return vec3.subtract(local, global, off)\n        }\n    }\n\n    /** \n     * Precisely converts a world position to the current internal \n     * local frame of reference.\n     * \n     * See `/docs/positions.md` for more info.\n     * \n     * Params: \n     *  * `local`: input array of local coords\n     *  * `global`: output array which receives the result\n     *  * `globalPrecise`: (optional) sub-voxel offset to the output global position\n     * \n     * If both output arrays are passed in, `global` will get int values and \n     * `globalPrecise` will get fractional parts. If only one array is passed in,\n     * `global` will get the whole output position.\n    */\n    localToGlobal(local, global, globalPrecise = null) {\n        var off = this.worldOriginOffset\n        if (globalPrecise) {\n            for (var i = 0; i < 3; i++) {\n                var floored = Math.floor(local[i])\n                global[i] = floored + off[i]\n                globalPrecise[i] = local[i] - floored\n            }\n            return global\n        } else {\n            return vec3.add(global, local, off)\n        }\n    }\n\n\n\n\n    /*\n     *              Picking / raycasting\n    */\n\n    /**\n     * Raycast through the world, returning a result object for any non-air block\n     * \n     * See `/docs/positions.md` for info on working with precise positions.\n     * \n     * @param {number[]} pos where to pick from (default: player's eye pos)\n     * @param {number[]} dir direction to pick along (default: camera vector)\n     * @param {number} dist pick distance (default: `noa.blockTestDistance`)\n     * @param {(id:number) => boolean} blockTestFunction which voxel IDs can be picked (default: any solid voxel)\n    */\n    pick(pos = null, dir = null, dist = -1, blockTestFunction = null) {\n        if (dist === 0) return null\n        // input position to local coords, if any\n        var pickPos = this._pickPos\n        if (pos) {\n            this.globalToLocal(pos, null, pickPos)\n            pos = pickPos\n        }\n        return this._localPick(pos, dir, dist, blockTestFunction)\n    }\n\n\n    /**\n     * @internal\n     * Do a raycast in local coords. \n     * See `/docs/positions.md` for more info.\n     * @param {number[]} pos where to pick from (default: player's eye pos)\n     * @param {number[]} dir direction to pick along (default: camera vector)\n     * @param {number} dist pick distance (default: `noa.blockTestDistance`)\n     * @param {(id:number) => boolean} blockTestFunction which voxel IDs can be picked (default: any solid voxel)\n     * @returns { null | {\n     *      position: number[],\n     *      normal: number[],\n     *      _localPosition: number[],\n     * }}\n     */\n    _localPick(pos = null, dir = null, dist = -1, blockTestFunction = null) {\n        // do a raycast in local coords - result obj will be in global coords\n        if (dist === 0) return null\n        var testFn = blockTestFunction || this.registry.getBlockSolidity\n        var world = this.world\n        var off = this.worldOriginOffset\n        var testVoxel = function (x, y, z) {\n            var id = world.getBlockID(x + off[0], y + off[1], z + off[2])\n            return testFn(id)\n        }\n        if (!pos) pos = this.camera._localGetTargetPosition()\n        dir = dir || this.camera.getDirection()\n        dist = dist || -1\n        if (dist < 0) dist = this.blockTestDistance\n        var result = this._pickResult\n        var rpos = result._localPosition\n        var rnorm = result.normal\n        var hit = raycast(testVoxel, pos, dir, dist, rpos, rnorm)\n        if (!hit) return null\n        // position is right on a voxel border - adjust it so that flooring works reliably\n        // adjust along normal direction, i.e. away from the block struck\n        vec3.scaleAndAdd(rpos, rpos, rnorm, 0.01)\n        // add global result\n        this.localToGlobal(rpos, result.position)\n        return result\n    }\n\n}\n\n\n\n/*\n * \n * \n * \n *                  INTERNAL HELPERS\n * \n * \n * \n * \n*/\n\n\n\n\n/*\n *\n *      rebase world origin offset around the player if necessary\n *\n*/\nfunction checkWorldOffset(noa) {\n    var lpos = noa.ents.getPositionData(noa.playerEntity)._localPosition\n    var cutoff = noa._originRebaseDistance\n    if (vec3.sqrLen(lpos) < cutoff * cutoff) return\n    var delta = []\n    for (var i = 0; i < 3; i++) {\n        delta[i] = Math.floor(lpos[i])\n        noa.worldOriginOffset[i] += delta[i]\n    }\n    noa.rendering._rebaseOrigin(delta)\n    noa.entities._rebaseOrigin(delta)\n    noa._objectMesher._rebaseOrigin(delta)\n}\n\n\n\n\n\n// Each frame, by default pick along the player's view vector \n// and tell rendering to highlight the struck block face\nfunction updateBlockTargets(noa) {\n    var newhash = 0\n    var blockIdFn = noa.blockTargetIdCheck || noa.registry.getBlockSolidity\n    var result = noa._localPick(null, null, null, blockIdFn)\n    if (result) {\n        var dat = noa._targetedBlockDat\n        // pick stops just shy of voxel boundary, so floored pos is the adjacent voxel\n        vec3.floor(dat.adjacent, result.position)\n        vec3.copy(dat.normal, result.normal)\n        vec3.subtract(dat.position, dat.adjacent, dat.normal)\n        dat.blockID = noa.world.getBlockID(dat.position[0], dat.position[1], dat.position[2])\n        noa.targetedBlock = dat\n        // arbitrary hash so we know when the targeted blockID/pos/face changes\n        var pos = dat.position, norm = dat.normal\n        var x = locationHasher(pos[0] + dat.blockID, pos[1], pos[2])\n        x ^= locationHasher(norm[0], norm[1] + dat.blockID, norm[2])\n        newhash = x\n    } else {\n        noa.targetedBlock = null\n    }\n    if (newhash != noa._prevTargetHash) {\n        noa.emit('targetBlockChanged', noa.targetedBlock)\n        noa._prevTargetHash = newhash\n    }\n}\n\n\n\n/*\n * \n *  add some hooks for guidance on removed APIs\n * \n */\n\nfunction deprecateStuff(noa) {\n    var ver = `0.27`\n    var dep = (loc, name, msg) => {\n        var throwFn = () => { throw `This property changed in ${ver} - ${msg}` }\n        Object.defineProperty(loc, name, { get: throwFn, set: throwFn })\n    }\n    dep(noa, 'getPlayerEyePosition', 'to get the camera/player offset see API docs for `noa.camera.cameraTarget`')\n    dep(noa, 'setPlayerEyePosition', 'to set the camera/player offset see API docs for `noa.camera.cameraTarget`')\n    dep(noa, 'getPlayerPosition', 'use `noa.ents.getPosition(noa.playerEntity)` or similar')\n    dep(noa, 'getCameraVector', 'use `noa.camera.getDirection`')\n    dep(noa, 'getPlayerMesh', 'use `noa.ents.getMeshData(noa.playerEntity).mesh` or similar')\n    dep(noa, 'playerBody', 'use `noa.ents.getPhysicsBody(noa.playerEntity)`')\n    dep(noa.rendering, 'zoomDistance', 'use `noa.camera.zoomDistance`')\n    dep(noa.rendering, '_currentZoom', 'use `noa.camera.currentZoom`')\n    dep(noa.rendering, '_cameraZoomSpeed', 'use `noa.camera.zoomSpeed`')\n    dep(noa.rendering, 'getCameraVector', 'use `noa.camera.getDirection`')\n    dep(noa.rendering, 'getCameraPosition', 'use `noa.camera.getLocalPosition`')\n    dep(noa.rendering, 'getCameraRotation', 'use `noa.camera.heading` and `noa.camera.pitch`')\n    dep(noa.rendering, 'setCameraRotation', 'to customize camera behavior see API docs for `noa.camera`')\n    ver = '0.28'\n    dep(noa.rendering, 'makeMeshInstance', 'removed, use Babylon\\'s `mesh.createInstance`')\n    dep(noa.world, '_maxChunksPendingCreation', 'use `maxChunksPendingCreation` (no \"_\")')\n    dep(noa.world, '_maxChunksPendingMeshing', 'use `maxChunksPendingMeshing` (no \"_\")')\n    dep(noa.world, '_maxProcessingPerTick', 'use `maxProcessingPerTick` (no \"_\")')\n    dep(noa.world, '_maxProcessingPerRender', 'use `maxProcessingPerRender` (no \"_\")')\n    ver = '0.29'\n    dep(noa, '_constants', 'removed, voxel IDs are no longer packed with bit flags')\n    ver = '0.30'\n    dep(noa, '_tickRate', 'tickRate is now at `noa.tickRate`')\n    dep(noa.container, '_tickRate', 'tickRate is now at `noa.tickRate`')\n    ver = '0.31'\n    dep(noa.world, 'chunkSize', 'effectively an internal, so changed to `_chunkSize`')\n    dep(noa.world, 'chunkAddDistance', 'set this with `noa.world.setAddRemoveDistance`')\n    dep(noa.world, 'chunkRemoveDistance', 'set this with `noa.world.setAddRemoveDistance`')\n    ver = '0.33'\n    dep(noa.rendering, 'postMaterialCreationHook', 'Removed - use mesh post-creation hook instead`')\n}\n\n\n\nvar profile_hook = (PROFILE > 0) ?\n    makeProfileHook(PROFILE, 'tick   ') : () => { }\nvar profile_hook_render = (PROFILE_RENDER > 0) ?\n    makeProfileHook(PROFILE_RENDER, 'render ') : () => { }\n","\n/**\n * This works around some old node-style code in a\n * dependency of box-intersect.\n*/\nif (window && !window['global']) {\n    window['global'] = window.globalThis || {}\n}\n\n","\nimport { GameInputs } from 'game-inputs'\n\nvar defaultOptions = {\n    preventDefaults: false,\n    stopPropagation: false,\n    allowContextMenu: false,\n}\n\nvar defaultBindings = {\n    \"forward\": [\"KeyW\", \"ArrowUp\"],\n    \"backward\": [\"KeyS\", \"ArrowDown\"],\n    \"left\": [\"KeyA\", \"ArrowLeft\"],\n    \"right\": [\"KeyD\", \"ArrowRight\"],\n    \"fire\": \"Mouse1\",\n    \"mid-fire\": [\"Mouse2\", \"KeyQ\"],\n    \"alt-fire\": [\"Mouse3\", \"KeyE\"],\n    \"jump\": \"Space\",\n}\n\n/**\n * `noa.inputs` - Handles key and mouse input bindings.\n * \n * This module extends \n * [game-inputs](https://github.com/fenomas/game-inputs),\n * so turn on \"Inherited\" to see its APIs here, or view the base module \n * for full docs.\n * \n * This module uses the following default options (from the options\n * object passed to the {@link Engine}):\n * \n * ```js\n *   defaultBindings: {\n *     \"forward\":  [\"KeyW\", \"ArrowUp\"],\n *     \"backward\": [\"KeyS\", \"ArrowDown\"],\n *     \"left\":     [\"KeyA\", \"ArrowLeft\"],\n *     \"right\":    [\"KeyD\", \"ArrowRight\"],\n *     \"fire\":     \"Mouse1\",\n *     \"mid-fire\": [\"Mouse2\", \"KeyQ\"],\n *     \"alt-fire\": [\"Mouse3\", \"KeyE\"],\n *     \"jump\":     \"Space\",\n *   }\n * ```\n */\n\nexport class Inputs extends GameInputs {\n\n    /** @internal */\n    constructor(noa, opts, element) {\n        opts = Object.assign({}, defaultOptions, opts)\n        super(element, opts)\n\n        var b = opts.bindings || defaultBindings\n        for (var name in b) {\n            var keys = Array.isArray(b[name]) ? b[name] : [b[name]]\n            this.bind(name, ...keys)\n        }\n    }\n}\n\n","\nimport { EventEmitter } from 'events'\nimport { MicroGameShell } from 'micro-game-shell'\n\n\n\n\n\n/**\n * `noa.container` - manages the game's HTML container element, canvas, \n * fullscreen, pointerLock, and so on.\n * \n * This module wraps `micro-game-shell`, which does most of the implementation.\n * \n * **Events**\n *  + `DOMready => ()`  \n *    Relays the browser DOMready event, after noa does some initialization\n *  + `gainedPointerLock => ()`  \n *    Fires when the game container gains pointerlock.\n *  + `lostPointerLock => ()`  \n *    Fires when the game container loses pointerlock.\n */\n\nexport class Container extends EventEmitter {\n\n    /** @internal */\n    constructor(noa, opts) {\n        super()\n        opts = opts || {}\n\n        /** \n         * @internal\n         * @type {import('../index').Engine}\n        */\n        this.noa = noa\n\n        /** The game's DOM element container */\n        var domEl = opts.domElement || null\n        if (typeof domEl === 'string') {\n            domEl = document.querySelector(domEl)\n        }\n        this.element = domEl || createContainerDiv()\n\n        /** The `canvas` element that the game will draw into */\n        this.canvas = getOrCreateCanvas(this.element)\n        doCanvasBugfix(noa, this.canvas) // grumble...\n\n\n        /** Whether the browser supports pointerLock. @readonly */\n        this.supportsPointerLock = false\n\n        /** Whether the user's pointer is within the game area. @readonly */\n        this.pointerInGame = false\n\n        /** Whether the game is focused. @readonly */\n        this.isFocused = !!document.hasFocus()\n\n        /** Gets the current state of pointerLock. @readonly */\n        this.hasPointerLock = false\n\n\n\n        // shell manages tick/render rates, and pointerlock/fullscreen\n        var pollTime = 10\n        /** @internal */\n        this._shell = new MicroGameShell(this.element, pollTime)\n        this._shell.tickRate = opts.tickRate\n        this._shell.maxRenderRate = opts.maxRenderRate\n        this._shell.stickyPointerLock = opts.stickyPointerLock\n        this._shell.stickyFullscreen = opts.stickyFullscreen\n        this._shell.maxTickTime = 50\n\n\n\n        // core timing events\n        this._shell.onTick = noa.tick.bind(noa)\n        this._shell.onRender = noa.render.bind(noa)\n\n        // shell listeners\n        this._shell.onPointerLockChanged = (hasPL) => {\n            this.hasPointerLock = hasPL\n            this.emit((hasPL) ? 'gainedPointerLock' : 'lostPointerLock')\n            // this works around a Firefox bug where no mouse-in event \n            // gets issued after starting pointerlock\n            if (hasPL) this.pointerInGame = true\n        }\n\n        // catch and relay domReady event\n        this._shell.onInit = () => {\n            this._shell.onResize = noa.rendering.resize.bind(noa.rendering)\n            // listeners to track when game has focus / pointer\n            detectPointerLock(this)\n            this.element.addEventListener('mouseenter', () => { this.pointerInGame = true })\n            this.element.addEventListener('mouseleave', () => { this.pointerInGame = false })\n            window.addEventListener('focus', () => { this.isFocused = true })\n            window.addEventListener('blur', () => { this.isFocused = false })\n            // catch edge cases for initial states\n            var onFirstMousedown = () => {\n                this.pointerInGame = true\n                this.isFocused = true\n                this.element.removeEventListener('mousedown', onFirstMousedown)\n            }\n            this.element.addEventListener('mousedown', onFirstMousedown)\n            // emit for engine core\n            this.emit('DOMready')\n            // done and remove listener\n            this._shell.onInit = null\n        }\n    }\n\n\n    /*\n     *\n     *\n     *              PUBLIC API \n     *\n     *\n    */\n\n    /** @internal */\n    appendTo(htmlElement) {\n        this.element.appendChild(htmlElement)\n    }\n\n    /** \n     * Sets whether `noa` should try to acquire or release pointerLock\n    */\n    setPointerLock(lock = false) {\n        // not sure if this will work robustly\n        this._shell.pointerLock = !!lock\n    }\n}\n\n\n\n/*\n *\n *\n *              INTERNALS\n *\n *\n*/\n\n\nfunction createContainerDiv() {\n    // based on github.com/mikolalysenko/game-shell - makeDefaultContainer()\n    var container = document.createElement(\"div\")\n    container.tabIndex = 1\n    container.style.position = \"fixed\"\n    container.style.left = \"0px\"\n    container.style.right = \"0px\"\n    container.style.top = \"0px\"\n    container.style.bottom = \"0px\"\n    container.style.height = \"100%\"\n    container.style.overflow = \"hidden\"\n    document.body.appendChild(container)\n    document.body.style.overflow = \"hidden\" //Prevent bounce\n    document.body.style.height = \"100%\"\n    container.id = 'noa-container'\n    return container\n}\n\n\nfunction getOrCreateCanvas(el) {\n    // based on github.com/stackgl/gl-now - default canvas\n    var canvas = el.querySelector('canvas')\n    if (!canvas) {\n        canvas = document.createElement('canvas')\n        canvas.style.position = \"absolute\"\n        canvas.style.left = \"0px\"\n        canvas.style.top = \"0px\"\n        canvas.style.height = \"100%\"\n        canvas.style.width = \"100%\"\n        canvas.id = 'noa-canvas'\n        el.insertBefore(canvas, el.firstChild)\n    }\n    return canvas\n}\n\n\n// set up stuff to detect pointer lock support.\n// Needlessly complex because Chrome/Android claims to support but doesn't.\n// For now, just feature detect, but assume no support if a touch event occurs\n// TODO: see if this makes sense on hybrid touch/mouse devices\nfunction detectPointerLock(self) {\n    var lockElementExists =\n        ('pointerLockElement' in document) ||\n        ('mozPointerLockElement' in document) ||\n        ('webkitPointerLockElement' in document)\n    if (lockElementExists) {\n        self.supportsPointerLock = true\n        var listener = function (e) {\n            self.supportsPointerLock = false\n            document.removeEventListener(e.type, listener)\n        }\n        document.addEventListener('touchmove', listener)\n    }\n}\n\n\n/**\n * This works around a weird bug that seems to be chrome/mac only?\n * Without this, the page sometimes initializes with the canva\n * zoomed into its lower left quadrant. \n * Resizing the canvas fixes the issue (also: resizing page, changing zoom...)\n */\nfunction doCanvasBugfix(noa, canvas) {\n    var ct = 0\n    var fixCanvas = () => {\n        var w = canvas.width\n        canvas.width = w + 1\n        canvas.width = w\n        if (ct++ > 10) noa.off('beforeRender', fixCanvas)\n    }\n    noa.on('beforeRender', fixCanvas)\n}\n","\nimport vec3 from 'gl-vec3'\nimport aabb from 'aabb-3d'\nimport sweep from 'voxel-aabb-sweep'\n\n\n\n// default options\nfunction CameraDefaults() {\n    this.inverseX = false\n    this.inverseY = false\n    this.sensitivityMult = 1\n    this.sensitivityMultOutsidePointerlock = 0\n    this.sensitivityX = 10\n    this.sensitivityY = 10\n    this.initialZoom = 0\n    this.zoomSpeed = 0.2\n}\n\n\n// locals\nvar tempVectors = [\n    vec3.create(),\n    vec3.create(),\n    vec3.create(),\n]\nvar originVector = vec3.create()\n\n\n/**\n * `noa.camera` - manages the camera, its position and direction, \n * mouse sensitivity, and so on.\n * \n * This module uses the following default options (from the options\n * object passed to the {@link Engine}):\n * ```js\n * var defaults = {\n *     inverseX: false,\n *     inverseY: false,\n *     sensitivityX: 10,\n *     sensitivityY: 10,\n *     initialZoom: 0,\n *     zoomSpeed: 0.2,\n * }\n * ```\n*/\n\nexport class Camera {\n\n    /** \n     * @internal \n     * @param {import('../index').Engine} noa\n     * @param {Partial.<CameraDefaults>} opts\n    */\n    constructor(noa, opts) {\n        opts = Object.assign({}, new CameraDefaults, opts)\n        this.noa = noa\n\n        /** Horizontal mouse sensitivity. Same scale as Overwatch (typical values around `5..10`) */\n        this.sensitivityX = +opts.sensitivityX\n\n        /** Vertical mouse sensitivity. Same scale as Overwatch (typical values around `5..10`) */\n        this.sensitivityY = +opts.sensitivityY\n\n        /** Mouse look inverse (horizontal) */\n        this.inverseX = !!opts.inverseX\n\n        /** Mouse look inverse (vertical) */\n        this.inverseY = !!opts.inverseY\n\n        /** \n         * Multiplier for temporarily altering mouse sensitivity.\n         * Set this to `0` to temporarily disable camera controls.\n        */\n        this.sensitivityMult = opts.sensitivityMult\n\n        /** \n         * Multiplier for altering mouse sensitivity when pointerlock\n         * is not active - default of `0` means no camera movement.\n         * Note this setting is ignored if pointerLock isn't supported.\n         */\n        this.sensitivityMultOutsidePointerlock = opts.sensitivityMultOutsidePointerlock\n\n        /** \n         * Camera yaw angle. \n         * Returns the camera's rotation angle around the vertical axis. \n         * Range: `0..2π`  \n         * This value is writeable, but it's managed by the engine and \n         * will be overwritten each frame.\n        */\n        this.heading = 0\n\n        /** Camera pitch angle. \n         * Returns the camera's up/down rotation angle. The pitch angle is \n         * clamped by a small epsilon, such that the camera never quite \n         * points perfectly up or down.  \n         * Range: `-π/2..π/2`.  \n         * This value is writeable, but it's managed by the engine and \n         * will be overwritten each frame.\n        */\n        this.pitch = 0\n\n        /** \n         * Entity ID of a special entity that exists for the camera to point at.\n         * \n         * By default this entity follows the player entity, so you can \n         * change the player's eye height by changing the `follow` component's offset:\n         * ```js\n         * var followState = noa.ents.getState(noa.camera.cameraTarget, 'followsEntity')\n         * followState.offset[1] = 0.9 * myPlayerHeight\n         * ```\n         * \n         * For customized camera controls you can change the follow \n         * target to some other entity, or override the behavior entirely:\n         * ```js\n         * // make cameraTarget stop following the player\n         * noa.ents.removeComponent(noa.camera.cameraTarget, 'followsEntity')\n         * // control cameraTarget position directly (or whatever..)\n         * noa.ents.setPosition(noa.camera.cameraTarget, [x,y,z])\n         * ```\n        */\n        this.cameraTarget = this.noa.ents.createEntity(['position'])\n\n        // make the camera follow the cameraTarget entity\n        var eyeOffset = 0.9 * noa.ents.getPositionData(noa.playerEntity).height\n        noa.ents.addComponent(this.cameraTarget, 'followsEntity', {\n            entity: noa.playerEntity,\n            offset: [0, eyeOffset, 0],\n        })\n\n        /** How far back the camera should be from the player's eye position */\n        this.zoomDistance = opts.initialZoom\n\n        /** How quickly the camera moves to its `zoomDistance` (0..1) */\n        this.zoomSpeed = opts.zoomSpeed\n\n        /** Current actual zoom distance. This differs from `zoomDistance` when\n         * the camera is in the process of moving towards the desired distance, \n         * or when it's obstructed by solid terrain behind the player.\n         * This value will get overwritten each tick, but you may want to write to it\n         * when overriding the camera zoom speed.\n        */\n        this.currentZoom = opts.initialZoom\n\n        /** @internal */\n        this._dirVector = vec3.fromValues(0, 0, 1)\n    }\n\n\n\n\n    /*\n     * \n     * \n     *          API\n     * \n     * \n    */\n\n\n    /*\n     *      Local position functions for high precision\n    */\n    /** @internal */\n    _localGetTargetPosition() {\n        var pdat = this.noa.ents.getPositionData(this.cameraTarget)\n        var pos = tempVectors[0]\n        return vec3.copy(pos, pdat._renderPosition)\n    }\n    /** @internal */\n    _localGetPosition() {\n        var loc = this._localGetTargetPosition()\n        if (this.currentZoom === 0) return loc\n        return vec3.scaleAndAdd(loc, loc, this._dirVector, -this.currentZoom)\n    }\n\n\n\n    /**\n     * Returns the camera's current target position - i.e. the player's \n     * eye position. When the camera is zoomed all the way in, \n     * this returns the same location as `camera.getPosition()`.\n    */\n    getTargetPosition() {\n        var loc = this._localGetTargetPosition()\n        var globalCamPos = tempVectors[1]\n        return this.noa.localToGlobal(loc, globalCamPos)\n    }\n\n\n    /**\n     * Returns the current camera position (read only)\n    */\n    getPosition() {\n        var loc = this._localGetPosition()\n        var globalCamPos = tempVectors[2]\n        return this.noa.localToGlobal(loc, globalCamPos)\n    }\n\n\n    /**\n     * Returns the camera direction vector (read only)\n    */\n    getDirection() {\n        return this._dirVector\n    }\n\n\n\n\n    /*\n     * \n     * \n     * \n     *          internals below\n     * \n     * \n     * \n    */\n\n\n\n    /**\n     * Called before render, if mouseLock etc. is applicable.\n     * Applies current mouse x/y inputs to the camera angle and zoom\n     * @internal\n    */\n\n    applyInputsToCamera() {\n\n        // conditional changes to mouse sensitivity\n        var senseMult = this.sensitivityMult\n        if (this.noa.container.supportsPointerLock) {\n            if (!this.noa.container.hasPointerLock) {\n                senseMult *= this.sensitivityMultOutsidePointerlock\n            }\n        }\n        if (senseMult === 0) return\n\n        // dx/dy from input state\n        var pointerState = this.noa.inputs.pointerState\n        bugFix(pointerState) // TODO: REMOVE EVENTUALLY    \n\n        // convert to rads, using (sens * 0.0066 deg/pixel), like Overwatch\n        var conv = 0.0066 * Math.PI / 180\n        var dx = pointerState.dx * this.sensitivityX * senseMult * conv\n        var dy = pointerState.dy * this.sensitivityY * senseMult * conv\n        if (this.inverseX) dx = -dx\n        if (this.inverseY) dy = -dy\n\n        // normalize/clamp angles, update direction vector\n        var twopi = 2 * Math.PI\n        this.heading += (dx < 0) ? dx + twopi : dx\n        if (this.heading > twopi) this.heading -= twopi\n        var maxPitch = Math.PI / 2 - 0.001\n        this.pitch = Math.max(-maxPitch, Math.min(maxPitch, this.pitch + dy))\n\n        vec3.set(this._dirVector, 0, 0, 1)\n        var dir = this._dirVector\n        var origin = originVector\n        vec3.rotateX(dir, dir, origin, this.pitch)\n        vec3.rotateY(dir, dir, origin, this.heading)\n    }\n\n\n\n    /**\n     *  Called before all renders, pre- and post- entity render systems\n     * @internal\n    */\n    updateBeforeEntityRenderSystems() {\n        // zoom update\n        this.currentZoom += (this.zoomDistance - this.currentZoom) * this.zoomSpeed\n    }\n\n    /** @internal */\n    updateAfterEntityRenderSystems() {\n        // clamp camera zoom not to clip into solid terrain\n        var maxZoom = cameraObstructionDistance(this)\n        if (this.currentZoom > maxZoom) this.currentZoom = maxZoom\n    }\n\n}\n\n\n\n\n/*\n *  check for obstructions behind camera by sweeping back an AABB\n*/\n\nfunction cameraObstructionDistance(self) {\n    if (!self._sweepBox) {\n        self._sweepBox = new aabb([0, 0, 0], [0.2, 0.2, 0.2])\n        self._sweepGetVoxel = self.noa.world.getBlockSolidity.bind(self.noa.world)\n        self._sweepVec = vec3.create()\n        self._sweepHit = () => true\n    }\n    var pos = vec3.copy(self._sweepVec, self._localGetTargetPosition())\n    vec3.add(pos, pos, self.noa.worldOriginOffset)\n    for (var i = 0; i < 3; i++) pos[i] -= 0.1\n    self._sweepBox.setPosition(pos)\n    var dist = Math.max(self.zoomDistance, self.currentZoom) + 0.1\n    vec3.scale(self._sweepVec, self.getDirection(), -dist)\n    return sweep(self._sweepGetVoxel, self._sweepBox, self._sweepVec, self._sweepHit, true)\n}\n\n\n\n\n\n\n// workaround for this Chrome 63 + Win10 bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=781182\n// later updated to also address: https://github.com/fenomas/noa/issues/153\nfunction bugFix(pointerState) {\n    var dx = pointerState.dx\n    var dy = pointerState.dy\n    var badx = (Math.abs(dx) > 400 && Math.abs(dx / lastx) > 4)\n    var bady = (Math.abs(dy) > 400 && Math.abs(dy / lasty) > 4)\n    if (badx || bady) {\n        pointerState.dx = lastx\n        pointerState.dy = lasty\n        lastx = (lastx + dx) / 2\n        lasty = (lasty + dy) / 2\n    } else {\n        lastx = dx || 1\n        lasty = dy || 1\n    }\n}\n\nvar lastx = 0\nvar lasty = 0\n","\nimport ECS from 'ent-comp'\nimport vec3 from 'gl-vec3'\nimport { updatePositionExtents } from '../components/position'\nimport { setPhysicsFromPosition } from '../components/physics'\n\n// Component definitions\nimport collideEntitiesComp from \"../components/collideEntities.js\"\nimport collideTerrainComp from \"../components/collideTerrain.js\"\nimport fadeOnZoomComp from \"../components/fadeOnZoom.js\"\nimport followsEntityComp from \"../components/followsEntity.js\"\nimport meshComp from \"../components/mesh.js\"\nimport movementComp from \"../components/movement.js\"\nimport physicsComp from \"../components/physics.js\"\nimport positionComp from \"../components/position.js\"\nimport receivesInputsComp from \"../components/receivesInputs.js\"\nimport shadowComp from \"../components/shadow.js\"\nimport smoothCameraComp from \"../components/smoothCamera.js\"\n\n\n\nvar defaultOptions = {\n    shadowDistance: 10,\n}\n\n\n/**\n * `noa.entities` - manages entities and components.\n * \n * This class extends [ent-comp](https://github.com/fenomas/ent-comp), \n * a general-purpose ECS. It's also decorated with noa-specific helpers and \n * accessor functions for querying entity positions, etc.\n * \n * Expects entity definitions in a specific format - see source `components` \n * folder for examples.\n * \n * This module uses the following default options (from the options\n * object passed to the {@link Engine}):\n * \n * ```js\n * var defaults = {\n *     shadowDistance: 10,\n * }\n * ```\n*/\n\nexport class Entities extends ECS {\n\n\n    /** @internal */\n    constructor(noa, opts) {\n        super()\n        opts = Object.assign({}, defaultOptions, opts)\n        // optional arguments to supply to component creation functions\n        var componentArgs = {\n            'shadow': opts.shadowDistance,\n        }\n\n        /** \n         * @internal\n         * @type {import('../index').Engine}\n        */\n        this.noa = noa\n\n        /** Hash containing the component names of built-in components.\n         * @type {{ [key:string]: string }} \n        */\n        this.names = {}\n\n\n        // call `createComponent` on all component definitions, and\n        // store their names in ents.names\n        var compDefs = {\n            collideEntities: collideEntitiesComp,\n            collideTerrain: collideTerrainComp,\n            fadeOnZoom: fadeOnZoomComp,\n            followsEntity: followsEntityComp,\n            mesh: meshComp,\n            movement: movementComp,\n            physics: physicsComp,\n            position: positionComp,\n            receivesInputs: receivesInputsComp,\n            shadow: shadowComp,\n            smoothCamera: smoothCameraComp,\n        }\n\n        Object.keys(compDefs).forEach(bareName => {\n            var arg = componentArgs[bareName] || undefined\n            var compFn = compDefs[bareName]\n            var compDef = compFn(noa, arg)\n            this.names[bareName] = this.createComponent(compDef)\n        })\n\n\n\n        /*\n         *\n         *\n         * \n         *          ENTITY ACCESSORS\n         *\n         * A whole bunch of getters and such for accessing component state.\n         * These are moderately faster than `ents.getState(whatever)`.\n         * \n         * \n         * \n        */\n\n        /** @internal */\n        this.cameraSmoothed = this.getComponentAccessor(this.names.smoothCamera)\n\n\n        /**\n         * Returns whether the entity has a physics body\n         * @type {(id:number) => boolean}\n        */\n        this.hasPhysics = this.getComponentAccessor(this.names.physics)\n\n        /**\n         * Returns whether the entity has a position\n         * @type {(id:number) => boolean}\n        */\n        this.hasPosition = this.getComponentAccessor(this.names.position)\n\n        /**\n         * Returns the entity's position component state\n         * @type {(id:number) => null | import(\"../components/position\").PositionState} \n        */\n        this.getPositionData = this.getStateAccessor(this.names.position)\n\n        /**\n         * Returns the entity's position vector.\n         * @type {(id:number) => number[]}\n        */\n        this.getPosition = (id) => {\n            var state = this.getPositionData(id)\n            return (state) ? state.position : null\n        }\n\n        /**\n         * Get the entity's `physics` component state.\n         * @type {(id:number) => null | import(\"../components/physics\").PhysicsState} \n        */\n        this.getPhysics = this.getStateAccessor(this.names.physics)\n\n        /**\n         * Returns the entity's physics body\n         * Note, will throw if the entity doesn't have the position component!\n         * @type {(id:number) => null | import(\"voxel-physics-engine\").RigidBody} \n        */\n        this.getPhysicsBody = (id) => {\n            var state = this.getPhysics(id)\n            return (state) ? state.body : null\n        }\n\n        /**\n         * Returns whether the entity has a mesh\n         * @type {(id:number) => boolean}\n        */\n        this.hasMesh = this.getComponentAccessor(this.names.mesh)\n\n        /**\n         * Returns the entity's `mesh` component state\n         * @type {(id:number) => {mesh:any, offset:number[]}}\n        */\n        this.getMeshData = this.getStateAccessor(this.names.mesh)\n\n        /**\n         * Returns the entity's `movement` component state\n         * @type {(id:number) => import('../components/movement').MovementState}\n        */\n        this.getMovement = this.getStateAccessor(this.names.movement)\n\n        /**\n         * Returns the entity's `collideTerrain` component state\n         * @type {(id:number) => {callback: function}}\n        */\n        this.getCollideTerrain = this.getStateAccessor(this.names.collideTerrain)\n\n        /**\n         * Returns the entity's `collideEntities` component state\n         * @type {(id:number) => {\n         *      cylinder:boolean, collideBits:number, \n         *      collideMask:number, callback: function}}\n        */\n        this.getCollideEntities = this.getStateAccessor(this.names.collideEntities)\n\n\n        /**\n         * Pairwise collideEntities event - assign your own function to this \n         * property if you want to handle entity-entity overlap events.\n         * @type {(id1:number, id2:number) => void}\n         */\n        this.onPairwiseEntityCollision = function (id1, id2) { }\n    }\n\n\n\n\n    /*\n     * \n     * \n     *      PUBLIC ENTITY STATE ACCESSORS\n     * \n     * \n    */\n\n\n    /** Set an entity's position, and update all derived state.\n     * \n     * In general, always use this to set an entity's position unless\n     * you're familiar with engine internals.\n     * \n     * ```js\n     * noa.ents.setPosition(playerEntity, [5, 6, 7])\n     * noa.ents.setPosition(playerEntity, 5, 6, 7)  // also works\n     * ```\n     * \n     * @param {number} id\n     */\n    setPosition(id, pos, y = 0, z = 0) {\n        if (typeof pos === 'number') pos = [pos, y, z]\n        // convert to local and defer impl\n        var loc = this.noa.globalToLocal(pos, null, [])\n        this._localSetPosition(id, loc)\n    }\n\n    /** Set an entity's size \n     * @param {number} xs\n     * @param {number} ys\n     * @param {number} zs\n    */\n    setEntitySize(id, xs, ys, zs) {\n        var posDat = this.getPositionData(id)\n        posDat.width = (xs + zs) / 2\n        posDat.height = ys\n        this._updateDerivedPositionData(id, posDat)\n    }\n\n\n\n\n    /**\n     * called when engine rebases its local coords\n     * @internal\n     */\n    _rebaseOrigin(delta) {\n        for (var state of this.getStatesList(this.names.position)) {\n            var locPos = state._localPosition\n            var hw = state.width / 2\n            nudgePosition(locPos, 0, -hw, hw, state.__id)\n            nudgePosition(locPos, 1, 0, state.height, state.__id)\n            nudgePosition(locPos, 2, -hw, hw, state.__id)\n            vec3.subtract(locPos, locPos, delta)\n            this._updateDerivedPositionData(state.__id, state)\n        }\n    }\n\n    /** @internal */\n    _localGetPosition(id) {\n        return this.getPositionData(id)._localPosition\n    }\n\n    /** @internal */\n    _localSetPosition(id, pos) {\n        var posDat = this.getPositionData(id)\n        vec3.copy(posDat._localPosition, pos)\n        this._updateDerivedPositionData(id, posDat)\n    }\n\n\n    /** \n     * helper to update everything derived from `_localPosition`\n     * @internal \n    */\n    _updateDerivedPositionData(id, posDat) {\n        vec3.copy(posDat._renderPosition, posDat._localPosition)\n        var offset = this.noa.worldOriginOffset\n        vec3.add(posDat.position, posDat._localPosition, offset)\n        updatePositionExtents(posDat)\n        var physDat = this.getPhysics(id)\n        if (physDat) setPhysicsFromPosition(physDat, posDat)\n    }\n\n\n\n\n\n    /*\n     *\n     *\n     *      OTHER ENTITY MANAGEMENT APIs\n     * \n     *      note most APIs are on the original ECS module (ent-comp)\n     *      these are some overlaid extras for noa\n     *\n     *\n    */\n\n\n    /** \n     * Safely add a component - if the entity already had the \n     * component, this will remove and re-add it.\n    */\n    addComponentAgain(id, name, state) {\n        // removes component first if necessary\n        if (this.hasComponent(id, name)) this.removeComponent(id, name)\n        this.addComponent(id, name, state)\n    }\n\n\n    /** \n     * Checks whether a voxel is obstructed by any entity (with the \n     * `collidesTerrain` component)\n    */\n    isTerrainBlocked(x, y, z) {\n        // checks if terrain location is blocked by entities\n        var off = this.noa.worldOriginOffset\n        var xlocal = Math.floor(x - off[0])\n        var ylocal = Math.floor(y - off[1])\n        var zlocal = Math.floor(z - off[2])\n        var blockExt = [\n            xlocal + 0.001, ylocal + 0.001, zlocal + 0.001,\n            xlocal + 0.999, ylocal + 0.999, zlocal + 0.999,\n        ]\n        var list = this.getStatesList(this.names.collideTerrain)\n        for (var i = 0; i < list.length; i++) {\n            var id = list[i].__id\n            var ext = this.getPositionData(id)._extents\n            if (extentsOverlap(blockExt, ext)) return true\n        }\n        return false\n    }\n\n\n\n    /** \n     * Gets an array of all entities overlapping the given AABB\n    */\n    getEntitiesInAABB(box, withComponent) {\n        // extents to test against\n        var off = this.noa.worldOriginOffset\n        var testExtents = [\n            box.base[0] - off[0], box.base[1] - off[1], box.base[2] - off[2],\n            box.max[0] - off[0], box.max[1] - off[1], box.max[2] - off[2],\n        ]\n        // entity position state list\n        var entStates\n        if (withComponent) {\n            entStates = []\n            for (var compState of this.getStatesList(withComponent)) {\n                var pdat = this.getPositionData(compState.__id)\n                if (pdat) entStates.push(pdat)\n            }\n        } else {\n            entStates = this.getStatesList(this.names.position)\n        }\n\n        // run each test\n        var hits = []\n        for (var i = 0; i < entStates.length; i++) {\n            var state = entStates[i]\n            if (extentsOverlap(testExtents, state._extents)) {\n                hits.push(state.__id)\n            }\n        }\n        return hits\n    }\n\n\n\n    /** \n     * Helper to set up a general entity, and populate with some common components depending on arguments.\n    */\n    add(position = null, width = 1, height = 1,\n        mesh = null, meshOffset = null, doPhysics = false, shadow = false) {\n\n        var self = this\n\n        // new entity\n        var eid = this.createEntity()\n\n        // position component\n        this.addComponent(eid, this.names.position, {\n            position: position || vec3.create(),\n            width: width,\n            height: height,\n        })\n\n        // rigid body in physics simulator\n        if (doPhysics) {\n            // body = this.noa.physics.addBody(box)\n            this.addComponent(eid, this.names.physics)\n            var body = this.getPhysics(eid).body\n\n            // handler for physics engine to call on auto-step\n            var smoothName = this.names.smoothCamera\n            body.onStep = function () {\n                self.addComponentAgain(eid, smoothName)\n            }\n        }\n\n        // mesh for the entity\n        if (mesh) {\n            if (!meshOffset) meshOffset = vec3.create()\n            this.addComponent(eid, this.names.mesh, {\n                mesh: mesh,\n                offset: meshOffset\n            })\n        }\n\n        // add shadow-drawing component\n        if (shadow) {\n            this.addComponent(eid, this.names.shadow, { size: width })\n        }\n\n        return eid\n    }\n}\n\n\n/*\n * \n * \n * \n *          HELPERS\n * \n * \n * \n*/\n\n// safety helper - when rebasing, nudge extent away from \n// voxel boudaries, so floating point error doesn't carry us accross\nfunction nudgePosition(pos, index, dmin, dmax, id) {\n    var min = pos[index] + dmin\n    var max = pos[index] + dmax\n    if (Math.abs(min - Math.round(min)) < 0.002) pos[index] += 0.002\n    if (Math.abs(max - Math.round(max)) < 0.001) pos[index] -= 0.001\n}\n\n// compare extent arrays\nfunction extentsOverlap(extA, extB) {\n    if (extA[0] > extB[3]) return false\n    if (extA[1] > extB[4]) return false\n    if (extA[2] > extB[5]) return false\n    if (extA[3] < extB[0]) return false\n    if (extA[4] < extB[1]) return false\n    if (extA[5] < extB[2]) return false\n    return true\n}\n\n","/** \n * @module \n * @internal \n */\n\nimport vec3 from 'gl-vec3'\n\n\n\n// definition for this component's state object\nexport class PositionState {\n    constructor() {\n        /** Position in global coords (may be low precision) \n         * @type {null | number[]} */\n        this.position = null\n        this.width = 0.8\n        this.height = 0.8\n\n        /** Precise position in local coords\n         * @type {null | number[]} */\n        this._localPosition = null\n\n        /** [x,y,z] in LOCAL COORDS\n         * @type {null | number[]} */\n        this._renderPosition = null\n\n        /** [lo,lo,lo, hi,hi,hi] in LOCAL COORDS\n         * @type {null | number[]} */\n        this._extents = null\n    }\n}\n\n\n\n\n/**\n * \tComponent holding entity's position, width, and height.\n *  By convention, entity's \"position\" is the bottom center of its AABB\n * \n *  Of the various properties, _localPosition is the \"real\", \n *  single-source-of-truth position. Others are derived.\n *  Local coords are relative to `noa.worldOriginOffset`.\n * @param {import('..').Engine} noa\n*/\n\nexport default function (noa) {\n\n    return {\n\n        name: 'position',\n\n        order: 60,\n\n        state: new PositionState,\n\n        onAdd: function (eid, state) {\n            // copy position into a plain array\n            var pos = [0, 0, 0]\n            if (state.position) vec3.copy(pos, state.position)\n            state.position = pos\n\n            state._localPosition = vec3.create()\n            state._renderPosition = vec3.create()\n            state._extents = new Float32Array(6)\n\n            // on init only, set local from global\n            noa.globalToLocal(state.position, null, state._localPosition)\n            vec3.copy(state._renderPosition, state._localPosition)\n            updatePositionExtents(state)\n        },\n\n        onRemove: null,\n\n\n\n        system: function (dt, states) {\n            var off = noa.worldOriginOffset\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                vec3.add(state.position, state._localPosition, off)\n                updatePositionExtents(state)\n            }\n        },\n\n\n    }\n}\n\n\n\n// update an entity's position state `_extents` \nexport function updatePositionExtents(state) {\n    var hw = state.width / 2\n    var lpos = state._localPosition\n    var ext = state._extents\n    ext[0] = lpos[0] - hw\n    ext[1] = lpos[1]\n    ext[2] = lpos[2] - hw\n    ext[3] = lpos[0] + hw\n    ext[4] = lpos[1] + state.height\n    ext[5] = lpos[2] + hw\n}\n","/** \n * @module\n * @internal\n */\n\nimport vec3 from 'gl-vec3'\n\n\nexport class PhysicsState {\n    constructor() {\n        /** @type {import('voxel-physics-engine').RigidBody} */\n        this.body = null\n    }\n}\n\n\n/**\n * Physics component, stores an entity's physics engbody.\n * @param {import('..').Engine} noa\n*/\n\nexport default function (noa) {\n\n    return {\n\n        name: 'physics',\n\n        order: 40,\n\n        state: new PhysicsState,\n\n        onAdd: function (entID, state) {\n            state.body = noa.physics.addBody()\n            // implicitly assume body has a position component, to get size\n            var posDat = noa.ents.getPositionData(state.__id)\n            setPhysicsFromPosition(state, posDat)\n        },\n\n\n        onRemove: function (entID, state) {\n            // update position before removing\n            // this lets entity wind up at e.g. the result of a collision\n            // even if physics component is removed in collision handler\n            if (noa.ents.hasPosition(state.__id)) {\n                var pdat = noa.ents.getPositionData(state.__id)\n                setPositionFromPhysics(state, pdat)\n                backtrackRenderPos(state, pdat, 0, false)\n            }\n            noa.physics.removeBody(state.body)\n        },\n\n\n        system: function (dt, states) {\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                var pdat = noa.ents.getPositionData(state.__id)\n                setPositionFromPhysics(state, pdat)\n            }\n        },\n\n\n        renderSystem: function (dt, states) {\n\n            var tickPos = noa.positionInCurrentTick\n            var tickTime = 1000 / noa.container._shell.tickRate\n            tickTime *= noa.timeScale\n            var tickMS = tickPos * tickTime\n\n            // tickMS is time since last physics engine tick\n            // to avoid temporal aliasing, render the state as if lerping between\n            // the last position and the next one \n            // since the entity data is the \"next\" position this amounts to \n            // offsetting each entity into the past by tickRate - dt\n            // http://gafferongames.com/game-physics/fix-your-timestep/\n\n            var backtrackAmt = (tickMS - tickTime) / 1000\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                var id = state.__id\n                var pdat = noa.ents.getPositionData(id)\n                var smoothed = noa.ents.cameraSmoothed(id)\n                backtrackRenderPos(state, pdat, backtrackAmt, smoothed)\n            }\n        }\n\n    }\n\n}\n\n\n\n// var offset = vec3.create()\nvar local = vec3.create()\n\nexport function setPhysicsFromPosition(physState, posState) {\n    var box = physState.body.aabb\n    var ext = posState._extents\n    vec3.copy(box.base, ext)\n    vec3.set(box.vec, posState.width, posState.height, posState.width)\n    vec3.add(box.max, box.base, box.vec)\n}\n\n\nfunction setPositionFromPhysics(physState, posState) {\n    var base = physState.body.aabb.base\n    var hw = posState.width / 2\n    vec3.set(posState._localPosition, base[0] + hw, base[1], base[2] + hw)\n}\n\n\nfunction backtrackRenderPos(physState, posState, backtrackAmt, smoothed) {\n    // pos = pos + backtrack * body.velocity\n    var vel = physState.body.velocity\n    vec3.scaleAndAdd(local, posState._localPosition, vel, backtrackAmt)\n\n    // smooth out update if component is present\n    // (this is set after sudden movements like auto-stepping)\n    if (smoothed) vec3.lerp(local, posState._renderPosition, local, 0.3)\n\n    // copy values over to renderPosition, \n    vec3.copy(posState._renderPosition, local)\n}\n","import boxIntersect from 'box-intersect'\n\n\n\n/*\n * \tEvery frame, entities with this component will get mutually checked for colliions\n * \n *   * cylinder: flag for checking collisions as a vertical cylindar (rather than AABB)\n *   * collideBits: category for this entity\n *   * collideMask: categories this entity collides with\n *   * callback: function(other_id) - called when `own.collideBits & other.collideMask` is true\n * \n * \n * \t\tNotes:\n * \tSet collideBits=0 for entities like bullets, which can collide with things \n * \t\tbut are never the target of a collision.\n * \tSet collideMask=0 for things with no callback - things that get collided with,\n * \t\tbut don't themselves instigate collisions.\n * \n */\n\n\n\nexport default function (noa) {\n\n    var intervals = []\n\n    return {\n\n        name: 'collideEntities',\n\n        order: 70,\n\n        state: {\n            cylinder: false,\n            collideBits: 1 | 0,\n            collideMask: 1 | 0,\n            callback: null,\n        },\n\n        onAdd: null,\n\n        onRemove: null,\n\n\n        system: function entityCollider(dt, states) {\n            var ents = noa.ents\n\n            // data struct that boxIntersect looks for\n            // - array of [lo, lo, lo, hi, hi, hi] extents\n            for (var i = 0; i < states.length; i++) {\n                var id = states[i].__id\n                var dat = ents.getPositionData(id)\n                intervals[i] = dat._extents\n            }\n            intervals.length = states.length\n\n            // run the intersect library\n            boxIntersect(intervals, function (a, b) {\n                var stateA = states[a]\n                var stateB = states[b]\n                if (!stateA || !stateB) return\n                var intervalA = intervals[a]\n                var intervalB = intervals[b]\n                if (cylindricalHitTest(stateA, stateB, intervalA, intervalB)) {\n                    handleCollision(noa, stateA, stateB)\n                }\n            })\n\n        }\n    }\n\n\n\n    /*\n     * \n     * \t\tIMPLEMENTATION\n     * \n     */\n\n\n    function handleCollision(noa, stateA, stateB) {\n        var idA = stateA.__id\n        var idB = stateB.__id\n\n        // entities really do overlap, so check masks and call event handlers\n        if (stateA.collideMask & stateB.collideBits) {\n            if (stateA.callback) stateA.callback(idB)\n        }\n        if (stateB.collideMask & stateA.collideBits) {\n            if (stateB.callback) stateB.callback(idA)\n        }\n\n        // general pairwise handler\n        noa.ents.onPairwiseEntityCollision(idA, idB)\n    }\n\n\n\n    // For entities whose extents overlap, \n    // test if collision still happens when taking cylinder flags into account\n\n    function cylindricalHitTest(stateA, stateB, intervalA, intervalB) {\n        if (stateA.cylinder) {\n            if (stateB.cylinder) {\n                return cylinderCylinderTest(intervalA, intervalB)\n            } else {\n                return cylinderBoxTest(intervalA, intervalB)\n            }\n        } else if (stateB.cylinder) {\n            return cylinderBoxTest(intervalB, intervalA)\n        }\n        return true\n    }\n\n\n\n\n    // Cylinder-cylinder hit test (AABBs are known to overlap)\n    // given their extent arrays [lo, lo, lo, hi, hi, hi]\n\n    function cylinderCylinderTest(a, b) {\n        // distance between cylinder centers\n        var rada = (a[3] - a[0]) / 2\n        var radb = (b[3] - b[0]) / 2\n        var dx = a[0] + rada - (b[0] + radb)\n        var dz = a[2] + rada - (b[2] + radb)\n        // collide if dist <= sum of radii\n        var distsq = dx * dx + dz * dz\n        var radsum = rada + radb\n        return (distsq <= radsum * radsum)\n    }\n\n\n\n\n    // Cylinder-Box hit test (AABBs are known to overlap)\n    // given their extent arrays [lo, lo, lo, hi, hi, hi]\n\n    function cylinderBoxTest(cyl, cube) {\n        // X-z center of cylinder\n        var rad = (cyl[3] - cyl[0]) / 2\n        var cx = cyl[0] + rad\n        var cz = cyl[2] + rad\n        // point in X-Z square closest to cylinder\n        var px = clamp(cx, cube[0], cube[3])\n        var pz = clamp(cz, cube[2], cube[5])\n        // collision if distance from that point to circle <= cylinder radius\n        var dx = px - cx\n        var dz = pz - cz\n        var distsq = dx * dx + dz * dz\n        return (distsq <= rad * rad)\n    }\n\n    function clamp(val, lo, hi) {\n        return (val < lo) ? lo : (val > hi) ? hi : val\n    }\n\n\n\n\n}\n","\n\nexport default function (noa) {\n    return {\n\n        name: 'collideTerrain',\n\n        order: 0,\n\n        state: {\n            callback: null\n        },\n\n        onAdd: function (eid, state) {\n            // add collide handler for physics engine to call\n            var ents = noa.entities\n            if (ents.hasPhysics(eid)) {\n                var body = ents.getPhysics(eid).body\n                body.onCollide = function bodyOnCollide(impulse) {\n                    var cb = noa.ents.getCollideTerrain(eid).callback\n                    if (cb) cb(impulse, eid)\n                }\n            }\n        },\n\n        onRemove: function (eid, state) {\n            var ents = noa.entities\n            if (ents.hasPhysics(eid)) {\n                ents.getPhysics(eid).body.onCollide = null\n            }\n        },\n\n\n\n    }\n}\n","\n/**\n * Component for the player entity, when active hides the player's mesh \n * when camera zoom is less than a certain amount\n */\n\nexport default function (noa) {\n    return {\n\n        name: 'fadeOnZoom',\n\n        order: 99,\n\n        state: {\n            cutoff: 1.5,\n        },\n\n        onAdd: null,\n\n        onRemove: null,\n\n        system: function fadeOnZoomProc(dt, states) {\n            var zoom = noa.camera.currentZoom\n            for (var i = 0; i < states.length; i++) {\n                checkZoom(states[i], zoom, noa)\n            }\n        }\n    }\n}\n\n\nfunction checkZoom(state, zoom, noa) {\n    if (!noa.ents.hasMesh(state.__id)) return\n    var mesh = noa.ents.getMeshData(state.__id).mesh\n    if (!mesh.metadata) return\n    var shouldHide = (zoom < state.cutoff)\n    noa.rendering.setMeshVisibility(mesh, !shouldHide)\n}\n","\nimport vec3 from 'gl-vec3'\n\n\n/*\n * Indicates that an entity should be moved to another entity's position each tick,\n * possibly by a fixed offset, and the same for renderPositions each render\n */\n\nexport default function (noa) {\n\n    return {\n\n        name: 'followsEntity',\n\n        order: 50,\n\n        state: {\n            entity: 0 | 0,\n            offset: null,\n            onTargetMissing: null,\n        },\n\n        onAdd: function (eid, state) {\n            var off = vec3.create()\n            state.offset = (state.offset) ? vec3.copy(off, state.offset) : off\n            updatePosition(state)\n            updateRenderPosition(state)\n        },\n\n        onRemove: null,\n\n\n        // on tick, copy over regular positions\n        system: function followEntity(dt, states) {\n            for (var i = 0; i < states.length; i++) {\n                updatePosition(states[i])\n            }\n        },\n\n\n        // on render, copy over render positions\n        renderSystem: function followEntityMesh(dt, states) {\n            for (var i = 0; i < states.length; i++) {\n                updateRenderPosition(states[i])\n            }\n        }\n    }\n\n\n\n    function updatePosition(state) {\n        var id = state.__id\n        var self = noa.ents.getPositionData(id)\n        var other = noa.ents.getPositionData(state.entity)\n        if (!other) {\n            if (state.onTargetMissing) state.onTargetMissing(id)\n            noa.ents.removeComponent(id, noa.ents.names.followsEntity)\n        } else {\n            vec3.add(self._localPosition, other._localPosition, state.offset)\n        }\n    }\n\n    function updateRenderPosition(state) {\n        var id = state.__id\n        var self = noa.ents.getPositionData(id)\n        var other = noa.ents.getPositionData(state.entity)\n        if (other) {\n            vec3.add(self._renderPosition, other._renderPosition, state.offset)\n        }\n    }\n\n}\n","\nimport vec3 from 'gl-vec3'\n\n\nexport default function (noa) {\n    return {\n\n        name: 'mesh',\n\n        order: 100,\n\n        state: {\n            mesh: null,\n            offset: null\n        },\n\n\n        onAdd: function (eid, state) {\n            // implicitly assume there's already a position component\n            var posDat = noa.ents.getPositionData(eid)\n            if (state.mesh) {\n                noa.rendering.addMeshToScene(state.mesh, false, posDat.position)\n            } else {\n                throw new Error('Mesh component added without a mesh - probably a bug!')\n            }\n            if (!state.offset) state.offset = vec3.create()\n\n            // set mesh to correct position\n            var rpos = posDat._renderPosition\n            state.mesh.position.copyFromFloats(\n                rpos[0] + state.offset[0],\n                rpos[1] + state.offset[1],\n                rpos[2] + state.offset[2])\n        },\n\n\n        onRemove: function (eid, state) {\n            state.mesh.dispose()\n        },\n\n\n\n        renderSystem: function (dt, states) {\n            // before render move each mesh to its render position, \n            // set by the physics engine or driving logic\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                var id = state.__id\n\n                var rpos = noa.ents.getPositionData(id)._renderPosition\n                state.mesh.position.copyFromFloats(\n                    rpos[0] + state.offset[0],\n                    rpos[1] + state.offset[1],\n                    rpos[2] + state.offset[2])\n            }\n        }\n\n\n    }\n}\n","\nimport vec3 from 'gl-vec3'\n\n\n\n\n\n/** \n * \n * State object of the `movement` component\n * \n*/\nexport function MovementState() {\n    this.heading = 0 // radians\n    this.running = false\n    this.jumping = false\n\n    // options\n    this.maxSpeed = 10\n    this.moveForce = 30\n    this.responsiveness = 15\n    this.runningFriction = 0\n    this.standingFriction = 2\n\n    // jumps\n    this.airMoveMult = 0.5\n    this.jumpImpulse = 10\n    this.jumpForce = 12\n    this.jumpTime = 500 // ms\n    this.airJumps = 1\n\n    // internal state\n    this._jumpCount = 0\n    this._currjumptime = 0\n    this._isJumping = false\n}\n\n\n\n\n\n/**\n * Movement component. State stores settings like jump height, etc.,\n * as well as current state (running, jumping, heading angle).\n * Processor checks state and applies movement/friction/jump forces\n * to the entity's physics body. \n * @param {import('..').Engine} noa\n*/\n\nexport default function (noa) {\n    return {\n\n        name: 'movement',\n\n        order: 30,\n\n        state: new MovementState(),\n\n        onAdd: null,\n\n        onRemove: null,\n\n\n        system: function movementProcessor(dt, states) {\n            var ents = noa.entities\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                var phys = ents.getPhysics(state.__id)\n                if (phys) applyMovementPhysics(dt, state, phys.body)\n            }\n        }\n\n\n    }\n}\n\n\nvar tempvec = vec3.create()\nvar tempvec2 = vec3.create()\nvar zeroVec = vec3.create()\n\n\n/**\n * @param {number} dt \n * @param {MovementState} state \n * @param {*} body \n*/\n\nfunction applyMovementPhysics(dt, state, body) {\n    // move implementation originally written as external module\n    //   see https://github.com/fenomas/voxel-fps-controller\n    //   for original code\n\n    // jumping\n    var onGround = (body.atRestY() < 0)\n    var canjump = (onGround || state._jumpCount < state.airJumps)\n    if (onGround) {\n        state._isJumping = false\n        state._jumpCount = 0\n    }\n\n    // process jump input\n    if (state.jumping) {\n        if (state._isJumping) { // continue previous jump\n            if (state._currjumptime > 0) {\n                var jf = state.jumpForce\n                if (state._currjumptime < dt) jf *= state._currjumptime / dt\n                body.applyForce([0, jf, 0])\n                state._currjumptime -= dt\n            }\n        } else if (canjump) { // start new jump\n            state._isJumping = true\n            if (!onGround) state._jumpCount++\n            state._currjumptime = state.jumpTime\n            body.applyImpulse([0, state.jumpImpulse, 0])\n            // clear downward velocity on airjump\n            if (!onGround && body.velocity[1] < 0) body.velocity[1] = 0\n        }\n    } else {\n        state._isJumping = false\n    }\n\n    // apply movement forces if entity is moving, otherwise just friction\n    var m = tempvec\n    var push = tempvec2\n    if (state.running) {\n\n        var speed = state.maxSpeed\n        // todo: add crouch/sprint modifiers if needed\n        // if (state.sprint) speed *= state.sprintMoveMult\n        // if (state.crouch) speed *= state.crouchMoveMult\n        vec3.set(m, 0, 0, speed)\n\n        // rotate move vector to entity's heading\n        vec3.rotateY(m, m, zeroVec, state.heading)\n\n        // push vector to achieve desired speed & dir\n        // following code to adjust 2D velocity to desired amount is patterned on Quake: \n        // https://github.com/id-Software/Quake-III-Arena/blob/master/code/game/bg_pmove.c#L275\n        vec3.subtract(push, m, body.velocity)\n        push[1] = 0\n        var pushLen = vec3.length(push)\n        vec3.normalize(push, push)\n\n        if (pushLen > 0) {\n            // pushing force vector\n            var canPush = state.moveForce\n            if (!onGround) canPush *= state.airMoveMult\n\n            // apply final force\n            var pushAmt = state.responsiveness * pushLen\n            if (canPush > pushAmt) canPush = pushAmt\n\n            vec3.scale(push, push, canPush)\n            body.applyForce(push)\n        }\n\n        // different friction when not moving\n        // idea from Sonic: http://info.sonicretro.org/SPG:Running\n        body.friction = state.runningFriction\n    } else {\n        body.friction = state.standingFriction\n    }\n}\n","\n/**\n * \n * Input processing component - gets (key) input state and  \n * applies it to receiving entities by updating their movement \n * component state (heading, movespeed, jumping, etc.)\n * \n */\n\nexport default function (noa) {\n    return {\n\n        name: 'receivesInputs',\n\n        order: 20,\n\n        state: {},\n\n        onAdd: null,\n\n        onRemove: null,\n\n        system: function inputProcessor(dt, states) {\n            var ents = noa.entities\n            var inputState = noa.inputs.state\n            var camHeading = noa.camera.heading\n\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                var moveState = ents.getMovement(state.__id)\n                setMovementState(moveState, inputState, camHeading)\n            }\n        }\n\n    }\n}\n\n\n\n/**\n * @param {import('../components/movement').MovementState} state \n * @param {Object<string, boolean>} inputs \n * @param {number} camHeading \n*/\n\nfunction setMovementState(state, inputs, camHeading) {\n    state.jumping = !!inputs.jump\n\n    var fb = inputs.forward ? (inputs.backward ? 0 : 1) : (inputs.backward ? -1 : 0)\n    var rl = inputs.right ? (inputs.left ? 0 : 1) : (inputs.left ? -1 : 0)\n\n    if ((fb | rl) === 0) {\n        state.running = false\n    } else {\n        state.running = true\n        if (fb) {\n            if (fb == -1) camHeading += Math.PI\n            if (rl) {\n                camHeading += Math.PI / 4 * fb * rl // didn't plan this but it works!\n            }\n        } else {\n            camHeading += rl * Math.PI / 2\n        }\n        state.heading = camHeading\n    }\n\n}\n","\nimport vec3 from 'gl-vec3'\n\nimport { Color3 } from '@babylonjs/core/Maths/math.color'\nimport { CreateDisc } from '@babylonjs/core/Meshes/Builders/discBuilder'\nimport '@babylonjs/core/Meshes/instancedMesh'\n\n\n/** @param {import('../index').Engine} noa  */\nexport default function (noa, distance = 10) {\n\n    var shadowDist = distance\n\n    // create a mesh to re-use for shadows\n    var scene = noa.rendering.getScene()\n    var disc = CreateDisc('shadow', { radius: 0.75, tessellation: 30 }, scene)\n    disc.rotation.x = Math.PI / 2\n    var mat = noa.rendering.makeStandardMaterial('shadow_component_mat')\n    mat.diffuseColor.set(0, 0, 0)\n    mat.ambientColor.set(0, 0, 0)\n    mat.alpha = 0.5\n    disc.material = mat\n    mat.freeze()\n\n    // source mesh needn't be in the scene graph\n    noa.rendering.setMeshVisibility(disc, false)\n\n\n    return {\n\n        name: 'shadow',\n\n        order: 80,\n\n        state: {\n            size: 0.5,\n            _mesh: null,\n        },\n\n\n        onAdd: function (eid, state) {\n            var mesh = disc.createInstance('shadow_instance')\n            noa.rendering.addMeshToScene(mesh)\n            mesh.setEnabled(false)\n            state._mesh = mesh\n        },\n\n\n        onRemove: function (eid, state) {\n            state._mesh.dispose()\n            state._mesh = null\n        },\n\n\n        system: function shadowSystem(dt, states) {\n            var cpos = noa.camera._localGetPosition()\n            var dist = shadowDist\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                var posState = noa.ents.getPositionData(state.__id)\n                var physState = noa.ents.getPhysics(state.__id)\n                updateShadowHeight(noa, posState, physState, state._mesh, state.size, dist, cpos)\n            }\n        },\n\n\n        renderSystem: function (dt, states) {\n            // before render adjust shadow x/z to render positions\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                var rpos = noa.ents.getPositionData(state.__id)._renderPosition\n                var spos = state._mesh.position\n                spos.x = rpos[0]\n                spos.z = rpos[2]\n            }\n        }\n\n\n\n\n    }\n}\n\nvar shadowPos = vec3.fromValues(0, 0, 0)\nvar down = vec3.fromValues(0, -1, 0)\n\nfunction updateShadowHeight(noa, posDat, physDat, mesh, size, shadowDist, camPos) {\n\n    // local Y ground position - from physics or raycast\n    var localY\n    if (physDat && physDat.body.resting[1] < 0) {\n        localY = posDat._localPosition[1]\n    } else {\n        var res = noa._localPick(posDat._localPosition, down, shadowDist)\n        if (!res) {\n            mesh.setEnabled(false)\n            return\n        }\n        localY = res.position[1] - noa.worldOriginOffset[1]\n    }\n\n    // round Y pos and offset upwards slightly to avoid z-fighting\n    localY = Math.round(localY)\n    vec3.copy(shadowPos, posDat._localPosition)\n    shadowPos[1] = localY\n    var sqdist = vec3.squaredDistance(camPos, shadowPos)\n    // offset ~ 0.01 for nearby shadows, up to 0.1 at distance of ~40\n    var offset = 0.01 + 0.1 * (sqdist / 1600)\n    if (offset > 0.1) offset = 0.1\n    mesh.position.y = localY + offset\n    // set shadow scale\n    var dist = posDat._localPosition[1] - localY\n    var scale = size * 0.7 * (1 - dist / shadowDist)\n    mesh.scaling.copyFromFloats(scale, scale, scale)\n    mesh.setEnabled(true)\n}\n","\n\nexport default function (noa) {\n\n    var compName = 'smoothCamera'\n\n    return {\n\n        name: compName,\n\n        order: 99,\n\n        state: {\n            time: 100.1\n        },\n\n        onAdd: null,\n\n        onRemove: null,\n\n        system: function (dt, states) {\n            // remove self after time elapses\n            for (var i = 0; i < states.length; i++) {\n                var state = states[i]\n                state.time -= dt\n                if (state.time < 0) noa.ents.removeComponent(state.__id, compName)\n            }\n        },\n\n    }\n}\n","\nimport { TransformNode } from '@babylonjs/core/Meshes/transformNode'\nimport { makeProfileHook } from './util'\nimport '@babylonjs/core/Meshes/thinInstanceMesh'\n\n\nvar PROFILE = 0\n\n\n\n\n\n/*\n *\n *          Object meshing\n * \n *      Per-chunk handling of the creation/disposal of static meshes\n *      associated with particular voxel IDs\n * \n * \n*/\n\n\n/** \n * @internal\n * @param {import('../index').Engine} noa\n*/\nexport function ObjectMesher(noa) {\n\n    // transform node for all instance meshes to be parented to\n    this.rootNode = new TransformNode('objectMeshRoot', noa.rendering.scene)\n\n    // tracking rebase amount inside matrix data\n    var rebaseOffset = [0, 0, 0]\n\n    // flag to trigger a rebuild after a chunk is disposed\n    var rebuildNextTick = false\n\n    // mock object to pass to customMesh handler, to get transforms\n    var transformObj = new TransformNode('')\n\n    // list of known base meshes\n    this.allBaseMeshes = []\n\n    // internal storage of instance managers, keyed by ID\n    // has check to dedupe by mesh, since babylon chokes on\n    // separate sets of instances for the same mesh/clone/geometry\n    var managers = {}\n    var getManager = (id) => {\n        if (managers[id]) return managers[id]\n        var mesh = noa.registry._blockMeshLookup[id]\n        for (var id2 in managers) {\n            var prev = managers[id2].mesh\n            if (prev === mesh || (prev.geometry === mesh.geometry)) {\n                return managers[id] = managers[id2]\n            }\n        }\n        this.allBaseMeshes.push(mesh)\n        if (!mesh.metadata) mesh.metadata = {}\n        mesh.metadata[objectMeshFlag] = true\n        return managers[id] = new InstanceManager(noa, mesh)\n    }\n    var objectMeshFlag = 'noa_object_base_mesh'\n\n\n\n    /*\n     * \n     *      public API\n     * \n    */\n\n\n    // add any properties that will get used for meshing\n    this.initChunk = function (chunk) {\n        chunk._objectBlocks = {}\n    }\n\n\n    // called by world when an object block is set or cleared\n    this.setObjectBlock = function (chunk, blockID, i, j, k) {\n        var x = chunk.x + i\n        var y = chunk.y + j\n        var z = chunk.z + k\n        var key = `${x}:${y}:${z}`\n\n        var oldID = chunk._objectBlocks[key] || 0\n        if (oldID === blockID) return // should be impossible\n        if (oldID > 0) {\n            var oldMgr = getManager(oldID)\n            oldMgr.removeInstance(chunk, key)\n        }\n\n        if (blockID > 0) {\n            // if there's a block event handler, call it with\n            // a mock object so client can add transforms\n            var handlers = noa.registry._blockHandlerLookup[blockID]\n            var onCreate = handlers && handlers.onCustomMeshCreate\n            if (onCreate) {\n                transformObj.position.copyFromFloats(0.5, 0, 0.5)\n                transformObj.scaling.setAll(1)\n                transformObj.rotation.setAll(0)\n                onCreate(transformObj, x, y, z)\n            }\n            var mgr = getManager(blockID)\n            var xform = (onCreate) ? transformObj : null\n            mgr.addInstance(chunk, key, i, j, k, xform, rebaseOffset)\n        }\n\n        if (oldID > 0 && !blockID) delete chunk._objectBlocks[key]\n        if (blockID > 0) chunk._objectBlocks[key] = blockID\n    }\n\n\n\n    // called by world when it knows that objects have been updated\n    this.buildObjectMeshes = function () {\n        profile_hook('start')\n\n        for (var id in managers) {\n            var mgr = managers[id]\n            mgr.updateMatrix()\n            if (mgr.count === 0) mgr.dispose()\n            if (mgr.disposed) delete managers[id]\n        }\n\n        profile_hook('rebuilt')\n        profile_hook('end')\n    }\n\n\n\n    // called by world at end of chunk lifecycle\n    this.disposeChunk = function (chunk) {\n        for (var key in chunk._objectBlocks) {\n            var id = chunk._objectBlocks[key]\n            if (id > 0) {\n                var mgr = getManager(id)\n                mgr.removeInstance(chunk, key)\n            }\n        }\n        chunk._objectBlocks = null\n\n        // since some instance managers will have been updated\n        rebuildNextTick = true\n    }\n\n\n\n    // tick handler catches case where objects are dirty due to disposal\n    this.tick = function () {\n        if (rebuildNextTick) {\n            this.buildObjectMeshes()\n            rebuildNextTick = false\n        }\n    }\n\n\n\n    // world rebase handler\n    this._rebaseOrigin = function (delta) {\n        rebaseOffset[0] += delta[0]\n        rebaseOffset[1] += delta[1]\n        rebaseOffset[2] += delta[2]\n\n        for (var id1 in managers) managers[id1].rebased = false\n        for (var id2 in managers) {\n            var mgr = managers[id2]\n            if (mgr.rebased) continue\n            for (var i = 0; i < mgr.count; i++) {\n                var ix = i << 4\n                mgr.buffer[ix + 12] -= delta[0]\n                mgr.buffer[ix + 13] -= delta[1]\n                mgr.buffer[ix + 14] -= delta[2]\n            }\n            mgr.rebased = true\n            mgr.dirty = true\n        }\n        rebuildNextTick = true\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n * \n * \n *      manager class for thin instances of a given object block ID \n * \n * \n*/\n\n/** @param {import('../index').Engine} noa*/\nfunction InstanceManager(noa, mesh) {\n    this.noa = noa\n    this.mesh = mesh\n    this.buffer = null\n    this.capacity = 0\n    this.count = 0\n    this.dirty = false\n    this.rebased = true\n    this.disposed = false\n    // dual struct to map keys (locations) to buffer locations, and back\n    this.keyToIndex = {}\n    this.locToKey = []\n    // prepare mesh for rendering\n    this.mesh.position.setAll(0)\n    this.mesh.parent = noa._objectMesher.rootNode\n    this.noa.rendering.addMeshToScene(this.mesh, false)\n    this.noa.emit('addingTerrainMesh', this.mesh)\n    this.mesh.isPickable = false\n    this.mesh.doNotSyncBoundingInfo = true\n    this.mesh.alwaysSelectAsActiveMesh = true\n}\n\n\n\nInstanceManager.prototype.dispose = function () {\n    if (this.disposed) return\n    this.mesh.thinInstanceCount = 0\n    this.setCapacity(0)\n    this.noa.emit('removingTerrainMesh', this.mesh)\n    this.noa.rendering.setMeshVisibility(this.mesh, false)\n    this.mesh = null\n    this.keyToIndex = null\n    this.locToKey = null\n    this.disposed = true\n}\n\n\nInstanceManager.prototype.addInstance = function (chunk, key, i, j, k, transform, rebaseVec) {\n    maybeExpandBuffer(this)\n    var ix = this.count << 4\n    this.locToKey[this.count] = key\n    this.keyToIndex[key] = ix\n    if (transform) {\n        transform.position.x += (chunk.x - rebaseVec[0]) + i\n        transform.position.y += (chunk.y - rebaseVec[1]) + j\n        transform.position.z += (chunk.z - rebaseVec[2]) + k\n        transform.computeWorldMatrix(true)\n        var xformArr = transform._localMatrix._m\n        copyMatrixData(xformArr, 0, this.buffer, ix)\n    } else {\n        var matArray = tempMatrixArray\n        matArray[12] = (chunk.x - rebaseVec[0]) + i + 0.5\n        matArray[13] = (chunk.y - rebaseVec[1]) + j\n        matArray[14] = (chunk.z - rebaseVec[2]) + k + 0.5\n        copyMatrixData(matArray, 0, this.buffer, ix)\n    }\n    this.count++\n    this.dirty = true\n}\n\n\nInstanceManager.prototype.removeInstance = function (chunk, key) {\n    var remIndex = this.keyToIndex[key]\n    if (!(remIndex >= 0)) throw 'tried to remove object instance not in storage'\n    delete this.keyToIndex[key]\n    var remLoc = remIndex >> 4\n    // copy tail instance's data to location of one we're removing\n    var tailLoc = this.count - 1\n    if (remLoc !== tailLoc) {\n        var tailIndex = tailLoc << 4\n        copyMatrixData(this.buffer, tailIndex, this.buffer, remIndex)\n        // update key/location structs\n        var tailKey = this.locToKey[tailLoc]\n        this.keyToIndex[tailKey] = remIndex\n        this.locToKey[remLoc] = tailKey\n    }\n    this.count--\n    this.dirty = true\n    maybeContractBuffer(this)\n}\n\n\nInstanceManager.prototype.updateMatrix = function () {\n    if (!this.dirty) return\n    this.mesh.thinInstanceCount = this.count\n    this.mesh.thinInstanceBufferUpdated('matrix')\n    this.mesh.isVisible = (this.count > 0)\n    this.dirty = false\n}\n\n\n\nInstanceManager.prototype.setCapacity = function (size = 4) {\n    this.capacity = size\n    if (size === 0) {\n        this.buffer = null\n    } else {\n        var newBuff = new Float32Array(this.capacity * 16)\n        if (this.buffer) {\n            var len = Math.min(this.buffer.length, newBuff.length)\n            for (var i = 0; i < len; i++) newBuff[i] = this.buffer[i]\n        }\n        this.buffer = newBuff\n    }\n    this.mesh.thinInstanceSetBuffer('matrix', this.buffer)\n    this.updateMatrix()\n}\n\n\nfunction maybeExpandBuffer(mgr) {\n    if (mgr.count < mgr.capacity) return\n    var size = Math.max(8, mgr.capacity * 2)\n    mgr.setCapacity(size)\n}\n\nfunction maybeContractBuffer(mgr) {\n    if (mgr.count > mgr.capacity * 0.4) return\n    if (mgr.capacity < 100) return\n    mgr.setCapacity(Math.round(mgr.capacity / 2))\n    mgr.locToKey.length = Math.min(mgr.locToKey.length, mgr.capacity)\n}\n\n\n\n// helpers\n\nvar tempMatrixArray = [\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0,\n]\n\nfunction copyMatrixData(src, srcOff, dest, destOff) {\n    for (var i = 0; i < 16; i++) dest[destOff + i] = src[srcOff + i]\n}\n\n\n\n\n\n\n\n\n\n\n\n\nvar profile_hook = (PROFILE) ?\n    makeProfileHook(PROFILE, 'Object meshing') : () => { }\n","\n\n\n\n// helper to swap item to end and pop(), instead of splice()ing\nexport function removeUnorderedListItem(list, item) {\n    var i = list.indexOf(item)\n    if (i < 0) return\n    if (i === list.length - 1) {\n        list.pop()\n    } else {\n        list[i] = list.pop()\n    }\n}\n\n\n\n\n\n\n\n// ....\nexport function numberOfVoxelsInSphere(rad) {\n    if (rad === prevRad) return prevAnswer\n    var ext = Math.ceil(rad), ct = 0, rsq = rad * rad\n    for (var i = -ext; i <= ext; ++i) {\n        for (var j = -ext; j <= ext; ++j) {\n            for (var k = -ext; k <= ext; ++k) {\n                var dsq = i * i + j * j + k * k\n                if (dsq < rsq) ct++\n            }\n        }\n    }\n    prevRad = rad\n    prevAnswer = ct\n    return ct\n}\nvar prevRad = 0, prevAnswer = 0\n\n\n\n\n\n// partly \"unrolled\" loops to copy contents of ndarrays\n// when there's no source, zeroes out the array instead\nexport function copyNdarrayContents(src, tgt, pos, size, tgtPos) {\n    if (typeof src === 'number') {\n        doNdarrayFill(src, tgt, tgtPos[0], tgtPos[1], tgtPos[2],\n            size[0], size[1], size[2])\n    } else {\n        doNdarrayCopy(src, tgt, pos[0], pos[1], pos[2],\n            size[0], size[1], size[2], tgtPos[0], tgtPos[1], tgtPos[2])\n    }\n}\nfunction doNdarrayCopy(src, tgt, i0, j0, k0, si, sj, sk, ti, tj, tk) {\n    var sdx = src.stride[2]\n    var tdx = tgt.stride[2]\n    for (var i = 0; i < si; i++) {\n        for (var j = 0; j < sj; j++) {\n            var six = src.index(i0 + i, j0 + j, k0)\n            var tix = tgt.index(ti + i, tj + j, tk)\n            for (var k = 0; k < sk; k++) {\n                tgt.data[tix] = src.data[six]\n                six += sdx\n                tix += tdx\n            }\n        }\n    }\n}\n\nfunction doNdarrayFill(value, tgt, i0, j0, k0, si, sj, sk) {\n    var dx = tgt.stride[2]\n    for (var i = 0; i < si; i++) {\n        for (var j = 0; j < sj; j++) {\n            var ix = tgt.index(i0 + i, j0 + j, k0)\n            for (var k = 0; k < sk; k++) {\n                tgt.data[ix] = value\n                ix += dx\n            }\n        }\n    }\n}\n\n\n\n\n// iterates over 3D positions a given manhattan distance from (0,0,0)\n// and exit early if the callback returns true\n// skips locations beyond a horiz or vertical max distance\nexport function iterateOverShellAtDistance(d, xmax, ymax, cb) {\n    if (d === 0) return cb(0, 0, 0)\n    // larger top/bottom planes of current shell\n    var dx = Math.min(d, xmax)\n    var dy = Math.min(d, ymax)\n    if (d <= ymax) {\n        for (var x = -dx; x <= dx; x++) {\n            for (var z = -dx; z <= dx; z++) {\n                if (cb(x, d, z)) return true\n                if (cb(x, -d, z)) return true\n            }\n        }\n    }\n    // smaller side planes of shell\n    if (d <= xmax) {\n        for (var i = -d; i < d; i++) {\n            for (var y = -dy + 1; y < dy; y++) {\n                if (cb(i, y, d)) return true\n                if (cb(-i, y, -d)) return true\n                if (cb(d, y, -i)) return true\n                if (cb(-d, y, i)) return true\n            }\n        }\n    }\n    return false\n}\n\n\n\n\n\n\n// function to hash three indexes (i,j,k) into one integer\n// note that hash wraps around every 1024 indexes.\n//      i.e.:   hash(1, 1, 1) === hash(1025, 1, -1023)\nexport function locationHasher(i, j, k) {\n    return (i & 1023)\n        | ((j & 1023) << 10)\n        | ((k & 1023) << 20)\n}\n\n\n\n/*\n * \n *      chunkStorage - a Map-backed abstraction for storing/\n *      retrieving chunk objects by their location indexes\n * \n*/\n\n/** @internal */\nexport class ChunkStorage {\n    constructor() {\n        this.hash = {}\n    }\n\n    /** @returns {import('./chunk').Chunk} */\n    getChunkByIndexes(i = 0, j = 0, k = 0) {\n        return this.hash[locationHasher(i, j, k)] || null\n    }\n    /** @param {import('./chunk').Chunk} chunk */\n    storeChunkByIndexes(i = 0, j = 0, k = 0, chunk) {\n        this.hash[locationHasher(i, j, k)] = chunk\n    }\n    removeChunkByIndexes(i = 0, j = 0, k = 0) {\n        delete this.hash[locationHasher(i, j, k)]\n    }\n}\n\n\n\n\n\n\n/*\n * \n *      LocationQueue - simple array of [i,j,k] locations, \n *      backed by a hash for O(1) existence checks.\n *      removals by value are O(n).\n * \n*/\n\n/** @internal */\nexport class LocationQueue {\n    constructor() {\n        this.arr = []\n        this.hash = {}\n    }\n    forEach(cb, thisArg) {\n        this.arr.forEach(cb, thisArg)\n    }\n    includes(i, j, k) {\n        var id = locationHasher(i, j, k)\n        return !!this.hash[id]\n    }\n    add(i, j, k, toFront = false) {\n        var id = locationHasher(i, j, k)\n        if (this.hash[id]) return\n        if (toFront) {\n            this.arr.unshift([i, j, k, id])\n        } else {\n            this.arr.push([i, j, k, id])\n        }\n        this.hash[id] = true\n    }\n    removeByIndex(ix) {\n        var el = this.arr[ix]\n        delete this.hash[el[3]]\n        this.arr.splice(ix, 1)\n    }\n    remove(i, j, k) {\n        var id = locationHasher(i, j, k)\n        if (!this.hash[id]) return\n        delete this.hash[id]\n        for (var ix = 0; ix < this.arr.length; ix++) {\n            if (id === this.arr[ix][3]) {\n                this.arr.splice(ix, 1)\n                return\n            }\n        }\n        throw 'internal bug with location queue - hash value overlapped'\n    }\n    count() { return this.arr.length }\n    isEmpty() { return (this.arr.length === 0) }\n    empty() {\n        this.arr = []\n        this.hash = {}\n    }\n    pop() {\n        var el = this.arr.pop()\n        delete this.hash[el[3]]\n        return el\n    }\n    copyFrom(queue) {\n        this.arr = queue.arr.slice()\n        this.hash = {}\n        for (var key in queue.hash) this.hash[key] = true\n    }\n    sortByDistance(locToDist, reverse = false) {\n        sortLocationArrByDistance(this.arr, locToDist, reverse)\n    }\n}\n\n// internal helper for preceding class\nfunction sortLocationArrByDistance(arr, distFn, reverse) {\n    var hash = {}\n    for (var loc of arr) {\n        hash[loc[3]] = distFn(loc[0], loc[1], loc[2])\n    }\n    if (reverse) {\n        arr.sort((a, b) => hash[a[3]] - hash[b[3]]) // ascending\n    } else {\n        arr.sort((a, b) => hash[b[3]] - hash[a[3]]) // descending\n    }\n    hash = null\n}\n\n\n\n\n\n\n\n\n\n\n\n// simple thing for reporting time split up between several activities\nexport function makeProfileHook(every, title = '', filter) {\n    if (!(every > 0)) return () => { }\n    var times = {}\n    var started = 0, last = 0, iter = 0, total = 0\n\n    var start = () => {\n        started = last = performance.now()\n        iter++\n    }\n    var add = (name) => {\n        var t = performance.now()\n        times[name] = (times[name] || 0) + (t - last)\n        last = t\n    }\n    var report = () => {\n        total += performance.now() - started\n        if (iter < every) return\n        var out = `${title}: ${(total / every).toFixed(2)}ms  --  `\n        out += Object.keys(times).map(name => {\n            if (filter && (times[name] / total) < 0.05) return ''\n            return `${name}: ${(times[name] / iter).toFixed(2)}ms`\n        }).join('  ')\n        console.log(out + `    (avg over ${every} runs)`)\n        times = {}\n        iter = total = 0\n    }\n    return (state) => {\n        if (state === 'start') start()\n        else if (state === 'end') report()\n        else add(state)\n    }\n}\n\n\n\n\n// simple thing for reporting time actions/sec\nexport function makeThroughputHook(_every, _title, filter) {\n    var title = _title || ''\n    var every = _every || 1\n    var counts = {}\n    var started = performance.now()\n    var iter = 0\n    return function profile_hook(state) {\n        if (state === 'start') return\n        if (state === 'end') {\n            if (++iter < every) return\n            var t = performance.now()\n            console.log(title + '   ' + Object.keys(counts).map(k => {\n                var through = counts[k] / (t - started) * 1000\n                counts[k] = 0\n                return k + ':' + through.toFixed(2) + '   '\n            }).join(''))\n            started = t\n            iter = 0\n        } else {\n            if (!counts[state]) counts[state] = 0\n            counts[state]++\n        }\n    }\n}\n","\nimport ndarray from 'ndarray'\nimport { Mesh } from '@babylonjs/core/Meshes/mesh'\nimport { VertexData } from '@babylonjs/core/Meshes/mesh.vertexData'\nimport { TerrainMatManager } from './terrainMaterials'\nimport { makeProfileHook } from './util'\n\n\n\n// enable for profiling..\nvar PROFILE_EVERY = 0\n\n\n\n\n/*\n * \n *          TERRAIN MESHER!!\n * \n * \n *  top-level entry point:\n *      takes a chunk, passes it to the greedy mesher,\n *      gets back an intermediate struct of face data,\n *      passes that to the mesh builder,\n *      gets back an array of Mesh objects,\n *      and finally puts those into the 3D engine\n *      \n*/\n\n\n/** \n * @internal\n * @param {import('../index').Engine} noa \n*/\nexport function TerrainMesher(noa) {\n\n    // wrangles which block materials can be merged into the same mesh\n    var terrainMatManager = new TerrainMatManager(noa)\n    this.allTerrainMaterials = terrainMatManager.allMaterials\n\n    // internally expose the default flat material used for untextured terrain\n    this._defaultMaterial = terrainMatManager._defaultMat\n\n    // two-pass implementations for this module\n    var greedyMesher = new GreedyMesher(noa, terrainMatManager)\n    var meshBuilder = new MeshBuilder(noa, terrainMatManager)\n\n\n    /*\n     * \n     *      API\n     * \n    */\n\n    // set or clean up any per-chunk properties needed for terrain meshing\n    this.initChunk = function (chunk) {\n        chunk._terrainMeshes.length = 0\n    }\n\n    this.disposeChunk = function (chunk) {\n        chunk._terrainMeshes.forEach(mesh => {\n            noa.emit('removingTerrainMesh', mesh)\n            mesh.dispose()\n        })\n        chunk._terrainMeshes.length = 0\n    }\n\n\n    /**\n     * meshing entry point and high-level flow\n     * @param {import('./chunk').Chunk} chunk \n     */\n    this.meshChunk = function (chunk, ignoreMaterials = false) {\n        profile_hook('start')\n\n        // remove any previous terrain meshes\n        this.disposeChunk(chunk)\n        profile_hook('cleanup')\n\n        // greedy mesher generates struct of face data\n        var faceDataSet = greedyMesher.mesh(chunk, ignoreMaterials)\n        profile_hook('geom')\n\n        // builder generates mesh data (positions, normals, etc)\n        var meshes = meshBuilder.buildMesh(chunk, faceDataSet, ignoreMaterials)\n        profile_hook('build')\n\n        profile_hook('end')\n\n        // add meshes to scene and finish\n        meshes.forEach((mesh) => {\n            mesh.cullingStrategy = Mesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\n            noa.rendering.addMeshToScene(mesh, true, chunk.pos, this)\n            noa.emit('addingTerrainMesh', mesh)\n            mesh.freezeNormals()\n            mesh.freezeWorldMatrix()\n            chunk._terrainMeshes.push(mesh)\n            if (!mesh.metadata) mesh.metadata = {}\n            mesh.metadata[terrainMeshFlag] = true\n        })\n    }\n    var terrainMeshFlag = 'noa_chunk_terrain_mesh'\n\n}\n\n\n\n\n\n\n\n/*\n * \n * \n * \n * \n *      Intermediate struct to hold data for a bunch of merged block faces\n * \n *      The greedy mesher produces these (one per terrainID), \n *      and the mesh builder turns each one into a Mesh instance.\n *\n * \n * \n * \n * \n*/\n\nfunction MeshedFaceData() {\n    this.terrainID = 0\n    this.numFaces = 0\n    // following arrays are all one element per quad\n    this.matIDs = []\n    this.dirs = []\n    this.is = []\n    this.js = []\n    this.ks = []\n    this.wids = []\n    this.hts = []\n    this.packedAO = []\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * \n * \n * \n *      Greedy meshing algorithm\n *      \n *      Originally based on algo by Mikola Lysenko:\n *          http://0fps.net/2012/07/07/meshing-minecraft-part-2/\n *      but probably no code remaining from there anymore.\n *      Ad-hoc AO handling by me, made of cobwebs and dreams\n * \n *    \n *      Takes in a Chunk instance, and returns an object containing \n *      GeometryData structs, keyed by terrain material ID, \n *      which the terrain builder can then make into meshes.\n * \n * \n * @param {import('../index').Engine} noa\n * @param {import('./terrainMaterials').TerrainMatManager} terrainMatManager\n*/\n\nfunction GreedyMesher(noa, terrainMatManager) {\n\n    // class-wide cached structs and getters\n    var maskCache = new Int16Array(16)\n    var aoMaskCache = new Int16Array(16)\n\n    // terrain ID accessor can be overridded for hacky reasons\n    var realGetTerrainID = terrainMatManager.getTerrainMatId.bind(terrainMatManager)\n    var fakeGetTerrainID = (matID) => 1\n    var terrainIDgetter = realGetTerrainID\n\n\n\n\n\n    /** \n     * Entry point\n     * \n     * @param {import('./chunk').Chunk} chunk\n     * @returns {Object.<string, MeshedFaceData>} keyed by terrain material ID \n     */\n    this.mesh = function (chunk, ignoreMaterials) {\n        var cs = chunk.size\n        terrainIDgetter = (ignoreMaterials) ? fakeGetTerrainID : realGetTerrainID\n\n        // no internal faces for empty or entirely solid chunks\n        var edgesOnly = (chunk._isEmpty || chunk._isFull)\n\n        /** @type {Object.<string, MeshedFaceData>} */\n        var faceDataSet = {}\n        faceDataPool.reset()\n\n        // Sweep over each axis, mapping axes to [d,u,v]\n        for (var d = 0; d < 3; ++d) {\n            var u = (d === 2) ? 0 : 2\n            var v = (d === 1) ? 0 : 1\n\n            // transposed ndarrays of nearby chunk voxels (self and neighbors)\n            var nabVoxelsArr = chunk._neighbors.data.map(c => {\n                if (c && c.voxels) return c.voxels.transpose(d, u, v)\n                return null\n            })\n\n            // ndarray of the previous, similarly transposed\n            var nabVoxelsT = ndarray(nabVoxelsArr, [3, 3, 3])\n                .lo(1, 1, 1)\n                .transpose(d, u, v)\n\n            // embiggen the cached mask arrays if needed\n            if (maskCache.length < cs * cs) {\n                maskCache = new Int16Array(cs * cs)\n                aoMaskCache = new Int16Array(cs * cs)\n            }\n\n            // sets up transposed accessor for querying solidity of (i,j,k):\n            prepareSolidityLookup(nabVoxelsT, cs)\n\n\n            // ACTUAL MASK AND GEOMETRY CREATION\n\n\n            // mesh plane between this chunk and previous neighbor on i axis?\n            var prev = nabVoxelsT.get(-1, 0, 0)\n            var here = nabVoxelsT.get(0, 0, 0)\n            if (prev) {\n                // offset version of neighbor to make queries work at i=-1\n                var prevOff = prev.lo(cs, 0, 0)\n                var nFaces = constructMeshMask(d, prevOff, -1, here, 0)\n\n                if (nFaces > 0) {\n                    constructGeometryFromMasks(0, d, u, v, cs, cs, nFaces, faceDataSet)\n                }\n            }\n\n            // if only doing edges, we're done with this axis\n            if (edgesOnly) continue\n\n\n            // mesh the rest of the planes internal to this chunk\n            // note only looping up to (size-1), skipping final coord so as \n            // not to duplicate faces at chunk borders\n            for (var i = 0; i < cs - 1; i++) {\n\n                // maybe skip y axis, if both layers are all the same voxel\n                if (d === 1) {\n                    var v1 = chunk._wholeLayerVoxel[i]\n                    if (v1 >= 0 && v1 === chunk._wholeLayerVoxel[i + 1]) {\n                        continue\n                    }\n                }\n\n                // pass in layer array for skip checks, only if not already checked\n                var layerVoxRef = (d === 1) ? null : chunk._wholeLayerVoxel\n\n                var nf = constructMeshMask(d, here, i, here, i + 1, layerVoxRef)\n                if (nf > 0) {\n                    constructGeometryFromMasks(i + 1, d, u, v, cs, cs, nf, faceDataSet)\n                }\n            }\n\n            // we skip the i-positive neighbor so as not to duplicate edge faces\n        }\n\n        // done!\n        return faceDataSet\n    }\n\n\n\n\n\n\n    /**\n     * Rigging for a transposed (i,j,k) => boolean solidity lookup, \n     * that knows how to query into neigboring chunks at edges.\n     * This sets up the indirection used by `voxelIsSolid` below.\n    */\n    function prepareSolidityLookup(nabVoxelsT, size) {\n        if (solidityLookupInittedSize !== size) {\n            solidityLookupInittedSize = size\n            voxelIDtoSolidity = noa.registry._solidityLookup\n\n            for (var x = -1; x < size + 1; x++) {\n                var loc = (x < 0) ? 0 : (x < size) ? 1 : 2\n                coordToLoc[x + 1] = [0, 1, 2][loc]\n                edgeCoordLookup[x + 1] = [size - 1, x, 0][loc]\n                missingCoordLookup[x + 1] = [0, x, size - 1][loc]\n            }\n        }\n\n        var centerChunk = nabVoxelsT.get(0, 0, 0)\n        for (var i = 0; i < 3; i++) {\n            for (var j = 0; j < 3; j++) {\n                for (var k = 0; k < 3; k++) {\n                    var ix = i * 9 + j * 3 + k\n                    var nab = nabVoxelsT.get(i - 1, j - 1, k - 1)\n                    var type = 0\n                    if (!nab) type = 1\n                    if (nab === centerChunk) type = 2\n                    voxTypeLookup[ix] = type\n                    voxLookup[ix] = nab || centerChunk\n                }\n            }\n        }\n    }\n\n    var solidityLookupInittedSize = -1\n    var voxelIDtoSolidity = [false, true]\n    var voxLookup = Array(27).fill(null)\n    var voxTypeLookup = Array(27).fill(0)\n    var coordToLoc = [0, 1, 1, 1, 1, 1, 2]\n    var edgeCoordLookup = [3, 0, 1, 2, 3, 0]\n    var missingCoordLookup = [0, 0, 1, 2, 3, 3]\n\n\n    function voxelIsSolid(i, j, k) {\n        var li = coordToLoc[i + 1]\n        var lj = coordToLoc[j + 1]\n        var lk = coordToLoc[k + 1]\n        var ix = li * 9 + lj * 3 + lk\n        var voxArray = voxLookup[ix]\n        var type = voxTypeLookup[ix]\n        if (type === 2) {\n            return voxelIDtoSolidity[voxArray.get(i, j, k)]\n        }\n        var lookup = [edgeCoordLookup, missingCoordLookup][type]\n        var ci = lookup[i + 1]\n        var cj = lookup[j + 1]\n        var ck = lookup[k + 1]\n        return voxelIDtoSolidity[voxArray.get(ci, cj, ck)]\n    }\n\n\n\n\n\n\n\n\n    /**\n     * \n     *      Build a 2D array of mask values representing whether a \n     *      mesh face is needed at each position\n     * \n     *      Each mask value is a terrain material ID, negative if\n     *      the face needs to point in the -i direction (towards voxel arr A)\n     * \n     * @returns {number} number of mesh faces found\n     */\n\n    function constructMeshMask(d, arrA, iA, arrB, iB, wholeLayerVoxel = null) {\n        var len = arrA.shape[1]\n        var mask = maskCache\n        var aoMask = aoMaskCache\n        var doAO = noa.rendering.useAO\n        var skipRevAo = (noa.rendering.revAoVal === noa.rendering.aoVals[0])\n\n        var opacityLookup = noa.registry._opacityLookup\n        var getMaterial = noa.registry.getBlockFaceMaterial\n        var materialDir = d * 2\n\n        // mask is iterated by a simple integer, both here and later when\n        // merging meshes, so the j/k order must be the same in both places\n        var n = 0\n\n        // set up for quick ndarray traversals\n        var indexA = arrA.index(iA, 0, 0)\n        var jstrideA = arrA.stride[1]\n        var kstrideA = arrA.stride[2]\n        var indexB = arrB.index(iB, 0, 0)\n        var jstrideB = arrB.stride[1]\n        var kstrideB = arrB.stride[2]\n\n        var facesFound = 0\n\n        for (var k = 0; k < len; ++k) {\n            var dA = indexA\n            var dB = indexB\n            indexA += kstrideA\n            indexB += kstrideB\n\n            // skip this second axis, if whole layer is same voxel?\n            if (wholeLayerVoxel && wholeLayerVoxel[k] >= 0) {\n                n += len\n                continue\n            }\n\n            for (var j = 0; j < len; j++, n++, dA += jstrideA, dB += jstrideB) {\n\n                // mask[n] represents the face needed between the two voxel layers\n                // for now, assume we never have two faces in both directions\n\n                // note that mesher zeroes out the mask as it goes, so there's \n                // no need to zero it here when no face is needed\n\n                // IDs at i-1,j,k  and  i,j,k\n                var id0 = arrA.data[dA]\n                var id1 = arrB.data[dB]\n\n                // most common case: never a face between same voxel IDs, \n                // so skip out early\n                if (id0 === id1) continue\n\n                // no face if both blocks are opaque\n                var op0 = opacityLookup[id0]\n                var op1 = opacityLookup[id1]\n                if (op0 && op1) continue\n\n                // also no face if both block faces have the same block material\n                var m0 = getMaterial(id0, materialDir)\n                var m1 = getMaterial(id1, materialDir + 1)\n                if (m0 === m1) continue\n\n                // choose which block face to draw:\n                //   * if either block is opaque draw that one\n                //   * if either material is missing draw the other one\n                if (op0 || m1 === 0) {\n                    mask[n] = m0\n                    if (doAO) aoMask[n] = packAOMask(voxelIsSolid, iB, iA, j, k, skipRevAo)\n                    facesFound++\n                } else if (op1 || m0 === 0) {\n                    mask[n] = -m1\n                    if (doAO) aoMask[n] = packAOMask(voxelIsSolid, iA, iB, j, k, skipRevAo)\n                    facesFound++\n                } else {\n                    // leftover case is two different non-opaque blocks facing each other.\n                    // Someday we could try to draw both, but for now we draw neither.\n                }\n            }\n        }\n        return facesFound\n    }\n\n\n\n\n\n\n    // \n    //      Greedy meshing inner loop two\n    //\n    // construct geometry data from the masks\n\n    function constructGeometryFromMasks(i, d, u, v, len1, len2, numFaces, faceDataSet) {\n        var doAO = noa.rendering.useAO\n        var mask = maskCache\n        var aomask = aoMaskCache\n\n        var n = 0\n        var materialDir = d * 2\n        var x = [0, 0, 0]\n        x[d] = i\n\n        var maskCompareFcn = (doAO) ? maskCompare : maskCompare_noAO\n\n        for (var k = 0; k < len2; ++k) {\n            var w = 1\n            var h = 1\n            for (var j = 0; j < len1; j += w, n += w) {\n\n                var maskVal = mask[n] | 0\n                if (!maskVal) {\n                    w = 1\n                    continue\n                }\n\n                var ao = aomask[n] | 0\n\n                // Compute width and height of area with same mask/aomask values\n                for (w = 1; w < len1 - j; ++w) {\n                    if (!maskCompareFcn(n + w, mask, maskVal, aomask, ao)) break\n                }\n\n                OUTER:\n                for (h = 1; h < len2 - k; ++h) {\n                    for (var m = 0; m < w; ++m) {\n                        var ix = n + m + h * len1\n                        if (!maskCompareFcn(ix, mask, maskVal, aomask, ao)) break OUTER\n                    }\n                }\n\n                // for testing: doing the following will disable greediness\n                //w=h=1\n\n                //  materialID and terrain ID type for the face\n                var matID = Math.abs(maskVal)\n                var terrainID = terrainIDgetter(matID)\n\n                // if terrainID not seen before, start a new MeshedFaceData\n                // from the extremely naive object pool\n                if (!(terrainID in faceDataSet)) {\n                    var fdFromPool = faceDataPool.get()\n                    fdFromPool.numFaces = 0\n                    fdFromPool.terrainID = terrainID\n                    faceDataSet[terrainID] = fdFromPool\n                }\n\n                // pack one face worth of data into the return struct\n\n                var faceData = faceDataSet[terrainID]\n                var nf = faceData.numFaces\n                faceData.numFaces++\n\n                faceData.matIDs[nf] = matID\n                x[u] = j\n                x[v] = k\n                faceData.is[nf] = x[0]\n                faceData.js[nf] = x[1]\n                faceData.ks[nf] = x[2]\n                faceData.wids[nf] = w\n                faceData.hts[nf] = h\n                faceData.packedAO[nf] = ao\n                faceData.dirs[nf] = (maskVal > 0) ? materialDir : materialDir + 1\n\n\n                // Face now finished, zero out the used part of the mask\n                for (var hx = 0; hx < h; ++hx) {\n                    for (var wx = 0; wx < w; ++wx) {\n                        mask[n + wx + hx * len1] = 0\n                    }\n                }\n\n                // exit condition where no more faces are left to mesh\n                numFaces -= w * h\n                if (numFaces === 0) return\n            }\n        }\n    }\n\n    function maskCompare(index, mask, maskVal, aomask, aoVal) {\n        if (maskVal !== mask[index]) return false\n        if (aoVal !== aomask[index]) return false\n        return true\n    }\n\n    function maskCompare_noAO(index, mask, maskVal, aomask, aoVal) {\n        if (maskVal !== mask[index]) return false\n        return true\n    }\n\n}\n\n\n/**\n * Extremely naive object pool for MeshedFaceData objects\n*/\nvar faceDataPool = (() => {\n    var arr = [], ix = 0\n    var get = () => {\n        if (ix >= arr.length) arr.push(new MeshedFaceData)\n        ix++\n        return arr[ix - 1]\n    }\n    var reset = () => { ix = 0 }\n    return { get, reset }\n})()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * \n * \n * \n * \n *       Mesh Builder - consumes all the raw data in geomData to build\n *          Babylon.js mesh/submeshes, ready to be added to the scene\n * \n * \n * \n * \n * \n */\n\n/** @param {import('../index').Engine} noa  */\nfunction MeshBuilder(noa, terrainMatManager) {\n\n    /** \n     * Consume the intermediate FaceData struct and produce\n     * actual mesehes the 3D engine can render\n     * @param {Object.<string, MeshedFaceData>} faceDataSet  \n    */\n    this.buildMesh = function (chunk, faceDataSet, ignoreMaterials) {\n        var scene = noa.rendering.getScene()\n\n        var doAO = noa.rendering.useAO\n        var aoVals = noa.rendering.aoVals\n        var revAoVal = noa.rendering.revAoVal\n\n        var atlasIndexLookup = noa.registry._matAtlasIndexLookup\n        var matColorLookup = noa.registry._materialColorLookup\n        var white = [1, 1, 1]\n\n\n\n\n        // geometry data is already keyed by terrain type, so build\n        // one mesh per geomData object in the hash\n        var meshes = []\n        for (var key in faceDataSet) {\n            var faceData = faceDataSet[key]\n            var terrainID = faceData.terrainID\n\n            // will this mesh need texture atlas indexes?\n            var usesAtlas = false\n            if (!ignoreMaterials) {\n                var firstIx = atlasIndexLookup[faceData.matIDs[0]]\n                usesAtlas = (firstIx >= 0)\n            }\n\n            // build the necessary arrays\n            var nf = faceData.numFaces\n            var indices = new Uint16Array(nf * 6)\n            var positions = new Float32Array(nf * 12)\n            var normals = new Float32Array(nf * 12)\n            var colors = new Float32Array(nf * 16)\n            var uvs = new Float32Array(nf * 8)\n            var atlasIndexes\n            if (usesAtlas) atlasIndexes = new Float32Array(nf * 4)\n\n            // scan all faces in the struct, creating data for each\n            for (var f = 0; f < faceData.numFaces; f++) {\n\n                // basic data from struct\n                var matID = faceData.matIDs[f]\n                var materialDir = faceData.dirs[f]  // 0..5: x,-x, y,-y, z,-z\n\n                var i = faceData.is[f]\n                var j = faceData.js[f]\n                var k = faceData.ks[f]\n                var w = faceData.wids[f]\n                var h = faceData.hts[f]\n                var axis = (materialDir / 2) | 0\n                var dir = (materialDir % 2) ? -1 : 1\n\n\n                addPositionValues(positions, f, i, j, k, axis, w, h)\n                addUVs(uvs, f, axis, w, h, dir)\n\n                var norms = [0, 0, 0]\n                norms[axis] = dir\n                addNormalValues(normals, f, norms)\n\n                var ao = faceData.packedAO[f]\n                var [A, B, C, D] = unpackAOMask(ao)\n                var triDir = decideTriDir(A, B, C, D)\n\n                addIndexValues(indices, f, axis, dir, triDir)\n\n                if (usesAtlas) {\n                    var atlasIndex = atlasIndexLookup[matID]\n                    addAtlasIndices(atlasIndexes, f, atlasIndex)\n                }\n\n                var matColor = matColorLookup[matID] || white\n                if (doAO) {\n                    pushMeshColors(colors, f, matColor, aoVals, revAoVal, A, B, C, D)\n                } else {\n                    pushMeshColors_noAO(colors, f, matColor)\n                }\n            }\n\n\n\n            // the mesh and vertexData object\n            var name = `chunk_${chunk.requestID}_${terrainID}`\n            var mesh = new Mesh(name, scene)\n            var vdat = new VertexData()\n\n            // finish the mesh\n            vdat.positions = positions\n            vdat.indices = indices\n            vdat.normals = normals\n            vdat.colors = colors\n            vdat.uvs = uvs\n            vdat.applyToMesh(mesh)\n\n            // meshes using a texture atlas need atlasIndices\n            if (usesAtlas) {\n                mesh.setVerticesData('texAtlasIndices', atlasIndexes, false, 1)\n            }\n\n            // disable some unnecessary bounding checks\n            mesh.isPickable = false\n            mesh.doNotSyncBoundingInfo = true\n            mesh._refreshBoundingInfo = () => mesh\n\n            // materials wrangled by external module\n            if (!ignoreMaterials) {\n                mesh.material = terrainMatManager.getMaterial(terrainID)\n            }\n\n            // done\n            meshes.push(mesh)\n        }\n\n        return meshes\n    }\n\n\n\n\n    // HELPERS ---- these could probably be simplified and less magical\n\n    function addPositionValues(posArr, faceNum, i, j, k, axis, w, h) {\n        var offset = faceNum * 12\n\n        var loc = [i, j, k]\n        var du = [0, 0, 0]\n        var dv = [0, 0, 0]\n        du[(axis === 2) ? 0 : 2] = w\n        dv[(axis === 1) ? 0 : 1] = h\n\n        for (var ix = 0; ix < 3; ix++) {\n            posArr[offset + ix] = loc[ix]\n            posArr[offset + 3 + ix] = loc[ix] + du[ix]\n            posArr[offset + 6 + ix] = loc[ix] + du[ix] + dv[ix]\n            posArr[offset + 9 + ix] = loc[ix] + dv[ix]\n        }\n    }\n\n\n\n    function addUVs(uvArr, faceNum, d, w, h, dir) {\n        var offset = faceNum * 8\n        var epsilon = 0\n        for (var i = 0; i < 8; i++) uvArr[offset + i] = epsilon\n        if (d === 0) {\n            uvArr[offset + 1] = uvArr[offset + 3] = h - epsilon\n            uvArr[offset + 2] = uvArr[offset + 4] = dir * w\n        } else if (d === 1) {\n            uvArr[offset + 1] = uvArr[offset + 7] = w - epsilon\n            uvArr[offset + 4] = uvArr[offset + 6] = dir * h\n        } else {\n            uvArr[offset + 1] = uvArr[offset + 3] = h - epsilon\n            uvArr[offset + 2] = uvArr[offset + 4] = -dir * w\n        }\n    }\n\n    function addNormalValues(normArr, faceNum, norms) {\n        var offset = faceNum * 12\n        for (var i = 0; i < 12; i++) {\n            normArr[offset + i] = norms[i % 3]\n        }\n    }\n\n    function addIndexValues(indArr, faceNum, axis, dir, triDir) {\n        var offset = faceNum * 6\n        var baseIndex = faceNum * 4\n        if (axis === 0) dir = -dir\n        var ix = (dir < 0) ? 0 : 1\n        if (!triDir) ix += 2\n        var indexVals = indexLists[ix]\n        for (var i = 0; i < 6; i++) {\n            indArr[offset + i] = baseIndex + indexVals[i]\n        }\n    }\n    var indexLists = [\n        [0, 1, 2, 0, 2, 3], // base\n        [0, 2, 1, 0, 3, 2], // flipped\n        [1, 2, 3, 1, 3, 0], // opposite triDir\n        [1, 3, 2, 1, 0, 3], // opposite triDir\n    ]\n\n\n\n\n    function addAtlasIndices(indArr, faceNum, atlasIndex) {\n        var offset = faceNum * 4\n        for (var i = 0; i < 4; i++) {\n            indArr[offset + i] = atlasIndex\n        }\n    }\n\n    function decideTriDir(A, B, C, D) {\n        // this bit is pretty magical..\n        // (true means split along the a00-a11 axis)\n        if (A === C) {\n            return (D === B) ? (D === 2) : true\n        } else {\n            return (D === B) ? false : (A + C > D + B)\n        }\n    }\n\n    function pushMeshColors_noAO(colors, faceNum, col) {\n        var offset = faceNum * 16\n        for (var i = 0; i < 16; i += 4) {\n            colors[offset + i] = col[0]\n            colors[offset + i + 1] = col[1]\n            colors[offset + i + 2] = col[2]\n            colors[offset + i + 3] = 1\n        }\n    }\n\n    function pushMeshColors(colors, faceNum, col, aoVals, revAo, A, B, C, D) {\n        var offset = faceNum * 16\n        pushAOColor(colors, offset, col, A, aoVals, revAo)\n        pushAOColor(colors, offset + 4, col, D, aoVals, revAo)\n        pushAOColor(colors, offset + 8, col, C, aoVals, revAo)\n        pushAOColor(colors, offset + 12, col, B, aoVals, revAo)\n    }\n\n    // premultiply vertex colors by value depending on AO level\n    // then push them into color array\n    function pushAOColor(colors, ix, baseCol, ao, aoVals, revAoVal) {\n        var mult = (ao === 0) ? revAoVal : aoVals[ao - 1]\n        colors[ix] = baseCol[0] * mult\n        colors[ix + 1] = baseCol[1] * mult\n        colors[ix + 2] = baseCol[2] * mult\n        colors[ix + 3] = 1\n    }\n\n}\n\n\n\n\n\n\n\n\n/*\n *\n *\n *\n *\n *          SHARED HELPERS - used by both main classes\n *\n *\n *\n *\n *\n*/\n\n\n\n\n/**\n *\n *\n *\n *  packAOMask:\n *\n *    For a given face, find occlusion levels for each vertex, then\n *    pack 4 such (2-bit) values into one Uint8 value\n * \n *  Occlusion levels:\n *    1 is flat ground, 2 is partial occlusion, 3 is max (corners)\n *    0 is \"reverse occlusion\" - an unoccluded exposed edge \n *  Packing order var(bit offset):\n * \n *      B(2)  -  C(6)   ^  K\n *       -        -     +> J\n *      A(0)  -  D(4)\n * \n*/\n\nfunction packAOMask(isSolid, ipos, ineg, j, k, skipReverse = false) {\n    var A = 1\n    var B = 1\n    var D = 1\n    var C = 1\n\n    // inc occlusion of vertex next to obstructed side\n    if (isSolid(ipos, j + 1, k)) { ++D; ++C }\n    if (isSolid(ipos, j - 1, k)) { ++A; ++B }\n    if (isSolid(ipos, j, k + 1)) { ++B; ++C }\n    if (isSolid(ipos, j, k - 1)) { ++A; ++D }\n\n    // facing into a solid (non-opaque) block?\n    var facingSolid = isSolid(ipos, j, k)\n    if (facingSolid) {\n        // always 2, or 3 in corners\n        C = (C === 3 || isSolid(ipos, j + 1, k + 1)) ? 3 : 2\n        B = (B === 3 || isSolid(ipos, j - 1, k + 1)) ? 3 : 2\n        D = (D === 3 || isSolid(ipos, j + 1, k - 1)) ? 3 : 2\n        A = (A === 3 || isSolid(ipos, j - 1, k - 1)) ? 3 : 2\n        return C << 6 | D << 4 | B << 2 | A\n    }\n\n    // simpler logic if skipping reverse AO?\n    if (skipReverse) {\n        // treat corner as occlusion 3 only if not occluded already\n        if (C === 1 && (isSolid(ipos, j + 1, k + 1))) { C = 2 }\n        if (B === 1 && (isSolid(ipos, j - 1, k + 1))) { B = 2 }\n        if (D === 1 && (isSolid(ipos, j + 1, k - 1))) { D = 2 }\n        if (A === 1 && (isSolid(ipos, j - 1, k - 1))) { A = 2 }\n        return C << 6 | D << 4 | B << 2 | A\n    }\n\n    // check each corner, and if not present do reverse AO\n    if (C === 1) {\n        if (isSolid(ipos, j + 1, k + 1)) {\n            C = 2\n        } else if (!(isSolid(ineg, j, k + 1)) ||\n            !(isSolid(ineg, j + 1, k)) ||\n            !(isSolid(ineg, j + 1, k + 1))) {\n            C = 0\n        }\n    }\n\n    if (D === 1) {\n        if (isSolid(ipos, j + 1, k - 1)) {\n            D = 2\n        } else if (!(isSolid(ineg, j, k - 1)) ||\n            !(isSolid(ineg, j + 1, k)) ||\n            !(isSolid(ineg, j + 1, k - 1))) {\n            D = 0\n        }\n    }\n\n    if (B === 1) {\n        if (isSolid(ipos, j - 1, k + 1)) {\n            B = 2\n        } else if (!(isSolid(ineg, j, k + 1)) ||\n            !(isSolid(ineg, j - 1, k)) ||\n            !(isSolid(ineg, j - 1, k + 1))) {\n            B = 0\n        }\n    }\n\n    if (A === 1) {\n        if (isSolid(ipos, j - 1, k - 1)) {\n            A = 2\n        } else if (!(isSolid(ineg, j, k - 1)) ||\n            !(isSolid(ineg, j - 1, k)) ||\n            !(isSolid(ineg, j - 1, k - 1))) {\n            A = 0\n        }\n    }\n\n    return C << 6 | D << 4 | B << 2 | A\n}\n\n/**\n * \n *      Takes in a packed AO value representing a face,\n *      and returns four 2-bit numbers for the AO levels\n *      at the four corners.\n *      \n*/\nfunction unpackAOMask(aomask) {\n    var A = aomask & 3\n    var B = (aomask >> 2) & 3\n    var D = (aomask >> 4) & 3\n    var C = (aomask >> 6) & 3\n    return [A, B, C, D]\n}\n\n\n\n\n\n\n\n\nvar profile_hook = (PROFILE_EVERY) ?\n    makeProfileHook(PROFILE_EVERY, 'Meshing') : () => { }\n\n","\nimport { Engine } from '@babylonjs/core/Engines/engine'\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture'\nimport { MaterialPluginBase } from '@babylonjs/core/Materials/materialPluginBase'\nimport { RawTexture2DArray } from '@babylonjs/core/Materials/Textures/rawTexture2DArray'\n\n/**\n * \n * \n *      This module creates and manages Materials for terrain meshes. \n *      It tells the terrain mesher which block face materials can share\n *      the same material (and should thus be joined into a single mesh),\n *      and also creates the materials when needed.\n * \n * @internal\n*/\n\nexport class TerrainMatManager {\n\n    /** @param {import('../index').Engine} noa  */\n    constructor(noa) {\n        // make a baseline default material for untextured terrain with no alpha\n        this._defaultMat = noa.rendering.makeStandardMaterial('base-terrain')\n        this._defaultMat.freeze()\n\n        this.allMaterials = [this._defaultMat]\n\n        // internals\n        this.noa = noa\n        this._idCounter = 1000\n        this._blockMatIDtoTerrainID = {}\n        this._terrainIDtoMatObject = {}\n        this._texURLtoTerrainID = {}\n        this._renderMatToTerrainID = new Map()\n    }\n\n\n\n    /** \n     * Maps a given `matID` (from noa.registry) to a unique ID of which \n     * terrain material can be used for that block material.\n     * This lets the terrain mesher map which blocks can be merged into\n     * the same meshes.\n     * Internally, this accessor also creates the material for each \n     * terrainMatID as they are first encountered.\n     */\n\n    getTerrainMatId(blockMatID) {\n        // fast case where matID has been seen before\n        if (blockMatID in this._blockMatIDtoTerrainID) {\n            return this._blockMatIDtoTerrainID[blockMatID]\n        }\n        // decide a unique terrainID for this block material\n        var terrID = decideTerrainMatID(this, blockMatID)\n        // create a mat object for it, if needed\n        if (!(terrID in this._terrainIDtoMatObject)) {\n            var mat = createTerrainMat(this, blockMatID)\n            this.allMaterials.push(mat)\n            this._terrainIDtoMatObject[terrID] = mat\n        }\n        // cache results and done\n        this._blockMatIDtoTerrainID[blockMatID] = terrID\n        return terrID\n    }\n\n\n    /**\n     * Get a Babylon Material object, given a terrainMatID (gotten from this module)\n     */\n    getMaterial(terrainMatID = 1) {\n        return this._terrainIDtoMatObject[terrainMatID]\n    }\n\n\n\n\n\n}\n\n\n\n\n/**\n * \n * \n *      Implementations of creating/disambiguating terrain Materials\n * \n * \n*/\n\n/** \n * Decide a unique terrainID, based on block material ID properties\n * @param {TerrainMatManager} self \n*/\nfunction decideTerrainMatID(self, blockMatID = 0) {\n    var matInfo = self.noa.registry.getMaterialData(blockMatID)\n\n    // custom render materials get one unique terrainID per material\n    if (matInfo.renderMat) {\n        var mat = matInfo.renderMat\n        if (!self._renderMatToTerrainID.has(mat)) {\n            self._renderMatToTerrainID.set(mat, self._idCounter++)\n        }\n        return self._renderMatToTerrainID.get(mat)\n    }\n\n    // ditto for textures, unique URL\n    if (matInfo.texture) {\n        var url = matInfo.texture\n        if (!(url in self._texURLtoTerrainID)) {\n            self._texURLtoTerrainID[url] = self._idCounter++\n        }\n        return self._texURLtoTerrainID[url]\n    }\n\n    // plain color materials with an alpha value are unique by alpha\n    var alpha = matInfo.alpha\n    if (alpha > 0 && alpha < 1) return 10 + Math.round(alpha * 100)\n\n    // the only remaining case is the baseline, which always reuses one fixed ID\n    return 1\n}\n\n\n/** \n * Create (choose) a material for a given set of block material properties\n * @param {TerrainMatManager} self \n*/\nfunction createTerrainMat(self, blockMatID = 0) {\n    var matInfo = self.noa.registry.getMaterialData(blockMatID)\n\n    // custom render mats are just reused\n    if (matInfo.renderMat) return matInfo.renderMat\n\n    // if no texture: use a basic flat material, possibly with alpha\n    if (!matInfo.texture) {\n        var needsAlpha = (matInfo.alpha > 0 && matInfo.alpha < 1)\n        if (!needsAlpha) return self._defaultMat\n        var matName = 'terrain-alpha-' + blockMatID\n        var plainMat = self.noa.rendering.makeStandardMaterial(matName)\n        plainMat.alpha = matInfo.alpha\n        plainMat.freeze()\n        return plainMat\n    }\n\n    // remaining case is a new material with a diffuse texture\n    var scene = self.noa.rendering.getScene()\n    var mat = self.noa.rendering.makeStandardMaterial('terrain-textured-' + blockMatID)\n    var texURL = matInfo.texture\n    var sampling = Texture.NEAREST_SAMPLINGMODE\n    var tex = new Texture(texURL, scene, true, false, sampling)\n    if (matInfo.texHasAlpha) tex.hasAlpha = true\n    mat.diffuseTexture = tex\n\n    // it texture is an atlas, apply material plugin\n    // and check whether any material for the atlas needs alpha\n    if (matInfo.atlasIndex >= 0) {\n        new TerrainMaterialPlugin(mat, tex)\n        if (self.noa.registry._textureNeedsAlpha(matInfo.texture)) {\n            tex.hasAlpha = true\n        }\n    }\n\n    mat.freeze()\n    return mat\n}\n\n\n\n\n\n\n\n\n\n\n\n/**\n * \n *      Babylon material plugin - twiddles the defines/shaders/etc so that\n *      a standard material can use textures from a 2D texture atlas.\n * \n*/\n\nclass TerrainMaterialPlugin extends MaterialPluginBase {\n    constructor(material, texture) {\n        var priority = 200\n        var defines = { 'NOA_TWOD_ARRAY_TEXTURE': false }\n        super(material, 'TestPlugin', priority, defines)\n        this._enable(true)\n        this._atlasTextureArray = null\n\n        texture.onLoadObservable.add((tex) => {\n            this.setTextureArrayData(tex)\n        })\n    }\n\n    setTextureArrayData(texture) {\n        var { width, height } = texture.getSize()\n        var numLayers = Math.round(height / width)\n        height = width\n        var data = texture._readPixelsSync()\n\n        var format = Engine.TEXTUREFORMAT_RGBA\n        var genMipMaps = true\n        var invertY = false\n        var mode = Texture.NEAREST_SAMPLINGMODE\n        var scene = texture.getScene()\n\n        this._atlasTextureArray = new RawTexture2DArray(\n            data, width, height, numLayers,\n            format, scene, genMipMaps, invertY, mode,\n        )\n    }\n\n    prepareDefines(defines, scene, mesh) {\n        defines['NOA_TWOD_ARRAY_TEXTURE'] = true\n    }\n\n    getClassName() {\n        return 'TerrainMaterialPluginName'\n    }\n\n    getSamplers(samplers) {\n        samplers.push('atlasTexture')\n    }\n\n    getAttributes(attributes) {\n        attributes.push('texAtlasIndices')\n    }\n\n    getUniforms() {\n        return { ubo: [] }\n    }\n\n    bindForSubMesh(uniformBuffer, scene, engine, subMesh) {\n        if (this._atlasTextureArray) {\n            uniformBuffer.setTexture('atlasTexture', this._atlasTextureArray)\n        }\n    }\n\n    getCustomCode(shaderType) {\n        if (shaderType === 'vertex') return {\n            'CUSTOM_VERTEX_MAIN_BEGIN': `\n                texAtlasIndex = texAtlasIndices;\n            `,\n            'CUSTOM_VERTEX_DEFINITIONS': `\n                uniform highp sampler2DArray atlasTexture;\n                attribute float texAtlasIndices;\n                varying float texAtlasIndex;\n            `,\n        }\n        if (shaderType === 'fragment') return {\n            '!baseColor\\\\=texture2D\\\\(diffuseSampler,vDiffuseUV\\\\+uvOffset\\\\);':\n                `baseColor = texture(atlasTexture, vec3(vDiffuseUV, texAtlasIndex));`,\n            'CUSTOM_FRAGMENT_DEFINITIONS': `\n                uniform highp sampler2DArray atlasTexture;\n                varying float texAtlasIndex;\n            `,\n        }\n        return null\n    }\n}\n","\n\nvar defaults = {\n    texturePath: ''\n}\n\n// voxel ID now uses the whole Uint16Array element\nvar MAX_BLOCK_ID = (1 << 16) - 1\n\n\n\n\n\n/**\n * `noa.registry` - Where you register your voxel types, \n * materials, properties, and events.\n * \n * This module uses the following default options (from the options\n * object passed to the {@link Engine}):\n * \n * ```js\n * var defaults = {\n *     texturePath: ''\n * }\n * ```\n*/\n\nexport class Registry {\n\n\n    /** \n     * @internal \n     * @param {import('../index').Engine} noa\n    */\n    constructor(noa, opts) {\n        opts = Object.assign({}, defaults, opts)\n        /** @internal */\n        this.noa = noa\n\n        /** @internal */\n        this._texturePath = opts.texturePath\n\n        /** Maps block face material names to matIDs\n         * @type {Object.<string, number>} */\n        var matIDs = {}\n\n        // lookup arrays for block props and flags - all keyed by blockID\n        // fill in first value for the air block with id=0\n        var blockSolidity = [false]\n        var blockOpacity = [false]\n        var blockIsFluid = [false]\n        var blockIsObject = [false]\n        var blockProps = [null]     // less-often accessed properties\n        var blockMeshes = [null]    // custom mesh objects\n        var blockHandlers = [null]  // block event handlers\n        var blockIsPlain = [false]  // true if voxel is \"boring\" - solid/opaque, no special props\n\n        // this one is keyed by `blockID*6 + faceNumber`\n        var blockMats = [0, 0, 0, 0, 0, 0]\n\n        // and these are keyed by material id\n        var matColorLookup = [null]\n        var matAtlasIndexLookup = [-1]\n\n        /** \n         * Lookup array of block face material properties - keyed by matID (not blockID)\n         * @typedef MatDef\n         * @prop {number[]} color\n         * @prop {number} alpha\n         * @prop {string} texture\n         * @prop {boolean} texHasAlpha\n         * @prop {number} atlasIndex\n         * @prop {*} renderMat\n         */\n        /** @type {MatDef[]} */\n        var matDefs = []\n\n\n        /* \n         * \n         *      Block registration methods\n         * \n        */\n\n\n\n        /**\n         * Register (by integer ID) a block type and its parameters.\n         *  `id` param: integer, currently 1..65535. Generally you should \n         * specify sequential values for blocks, without gaps, but this \n         * isn't technically necessary.\n         * \n         * @param {number} id - sequential integer ID (from 1)\n         * @param {Partial<BlockOptions>} [options] \n         * @returns the `id` value specified\n         */\n        this.registerBlock = function (id = 1, options = null) {\n            var defaults = new BlockOptions(options && options.fluid)\n            var opts = Object.assign({}, defaults, options || {})\n\n            // console.log('register block: ', id, opts)\n            if (id < 1 || id > MAX_BLOCK_ID) throw 'Block id out of range: ' + id\n\n            // if block ID is greater than current highest ID, \n            // register fake blocks to avoid holes in lookup arrays\n            while (id > blockSolidity.length) {\n                this.registerBlock(blockSolidity.length, {})\n            }\n\n            // flags default to solid, opaque, nonfluid\n            blockSolidity[id] = !!opts.solid\n            blockOpacity[id] = !!opts.opaque\n            blockIsFluid[id] = !!opts.fluid\n\n            // store any custom mesh\n            blockIsObject[id] = !!opts.blockMesh\n            blockMeshes[id] = opts.blockMesh || null\n\n            // parse out material parameter\n            // always store 6 material IDs per blockID, so material lookup is monomorphic\n            var mat = opts.material || null\n            var mats\n            if (!mat) {\n                mats = [null, null, null, null, null, null]\n            } else if (typeof mat == 'string') {\n                mats = [mat, mat, mat, mat, mat, mat]\n            } else if (mat.length && mat.length == 2) {\n                // interpret as [top/bottom, sides]\n                mats = [mat[1], mat[1], mat[0], mat[0], mat[1], mat[1]]\n            } else if (mat.length && mat.length == 3) {\n                // interpret as [top, bottom, sides]\n                mats = [mat[2], mat[2], mat[0], mat[1], mat[2], mat[2]]\n            } else if (mat.length && mat.length == 6) {\n                // interpret as [-x, +x, -y, +y, -z, +z]\n                mats = mat\n            } else throw 'Invalid material parameter: ' + mat\n\n            // argument is material name, but store as material id, allocating one if needed\n            for (var i = 0; i < 6; ++i) {\n                blockMats[id * 6 + i] = getMaterialId(this, matIDs, mats[i], true)\n            }\n\n            // props data object - currently only used for fluid properties\n            blockProps[id] = {}\n\n            // if block is fluid, initialize properties if needed\n            if (blockIsFluid[id]) {\n                blockProps[id].fluidDensity = opts.fluidDensity\n                blockProps[id].viscosity = opts.viscosity\n            }\n\n            // event callbacks\n            var hasHandler = opts.onLoad || opts.onUnload || opts.onSet || opts.onUnset || opts.onCustomMeshCreate\n            blockHandlers[id] = (hasHandler) ? new BlockCallbackHolder(opts) : null\n\n            // special lookup for \"plain\"-ness\n            // plain means solid, opaque, not fluid, no mesh or events\n            var isPlain = blockSolidity[id] && blockOpacity[id]\n                && !hasHandler && !blockIsFluid[id] && !blockIsObject[id]\n            blockIsPlain[id] = isPlain\n\n            return id\n        }\n\n\n\n\n        /**\n         * Register (by name) a material and its parameters.\n         * \n         * @param {string} name of this material\n         * @param {Partial<MaterialOptions>} [options]\n         */\n\n        this.registerMaterial = function (name = '?', options = null) {\n            // catch calls to earlier signature\n            if (Array.isArray(options)) {\n                throw 'This API changed signatures in v0.33, please use: `noa.registry.registerMaterial(\"name\", optionsObj)`'\n            }\n\n            var opts = Object.assign(new MaterialOptions(), options || {})\n            var matID = matIDs[name] || matDefs.length\n            matIDs[name] = matID\n\n            var texURL = opts.textureURL ? this._texturePath + opts.textureURL : ''\n            var alpha = 1.0\n            var color = opts.color || [1.0, 1.0, 1.0]\n            if (color.length === 4) alpha = color.pop()\n            if (texURL) color = null\n\n            // populate lookup arrays for terrain meshing\n            matColorLookup[matID] = color\n            matAtlasIndexLookup[matID] = opts.atlasIndex\n\n            matDefs[matID] = {\n                color,\n                alpha,\n                texture: texURL,\n                texHasAlpha: !!opts.texHasAlpha,\n                atlasIndex: opts.atlasIndex,\n                renderMat: opts.renderMaterial,\n            }\n            return matID\n        }\n\n\n\n        /*\n         *      quick accessors for querying block ID stuff\n         */\n\n        /** \n         * block solidity (as in physics) \n         * @param id\n         */\n        this.getBlockSolidity = function (id) {\n            return blockSolidity[id]\n        }\n\n        /**\n         * block opacity - whether it obscures the whole voxel (dirt) or \n         * can be partially seen through (like a fencepost, etc)\n         * @param id\n         */\n        this.getBlockOpacity = function (id) {\n            return blockOpacity[id]\n        }\n\n        /** \n         * block is fluid or not\n         * @param id\n         */\n        this.getBlockFluidity = function (id) {\n            return blockIsFluid[id]\n        }\n\n        /** \n         * Get block property object passed in at registration\n         * @param id\n         */\n        this.getBlockProps = function (id) {\n            return blockProps[id]\n        }\n\n        // look up a block ID's face material\n        // dir is a value 0..5: [ +x, -x, +y, -y, +z, -z ]\n        this.getBlockFaceMaterial = function (blockId, dir) {\n            return blockMats[blockId * 6 + dir]\n        }\n\n\n        /**\n         * General lookup for all properties of a block material\n         * @param {number} matID \n         * @returns {MatDef}\n         */\n        this.getMaterialData = function (matID) {\n            return matDefs[matID]\n        }\n\n\n        /**\n         * Given a texture URL, does any material using that \n         * texture need alpha?\n         * @internal\n         * @returns {boolean}\n         */\n        this._textureNeedsAlpha = function (tex = '') {\n            return matDefs.some(def => {\n                if (def.texture !== tex) return false\n                return def.texHasAlpha\n            })\n        }\n\n\n\n\n\n        /*\n         * \n         *   Meant for internal use within the engine\n         * \n         */\n\n\n        // internal access to lookup arrays\n        /** @internal */\n        this._solidityLookup = blockSolidity\n        /** @internal */\n        this._opacityLookup = blockOpacity\n        /** @internal */\n        this._fluidityLookup = blockIsFluid\n        /** @internal */\n        this._objectLookup = blockIsObject\n        /** @internal */\n        this._blockMeshLookup = blockMeshes\n        /** @internal */\n        this._blockHandlerLookup = blockHandlers\n        /** @internal */\n        this._blockIsPlainLookup = blockIsPlain\n        /** @internal */\n        this._materialColorLookup = matColorLookup\n        /** @internal */\n        this._matAtlasIndexLookup = matAtlasIndexLookup\n\n\n\n        /*\n         * \n         *      default initialization\n         * \n         */\n\n        // add a default material and set ID=1 to it\n        // this is safe since registering new block data overwrites the old\n        this.registerMaterial('dirt', { color: [0.4, 0.3, 0] })\n        this.registerBlock(1, { material: 'dirt' })\n\n    }\n\n}\n\n/*\n * \n *          helpers\n * \n*/\n\n\n\n// look up material ID given its name\n// if lazy is set, pre-register the name and return an ID\nfunction getMaterialId(reg, matIDs, name, lazyInit) {\n    if (!name) return 0\n    var id = matIDs[name]\n    if (id === undefined && lazyInit) id = reg.registerMaterial(name)\n    return id\n}\n\n\n\n// data class for holding block callback references\nfunction BlockCallbackHolder(opts) {\n    this.onLoad = opts.onLoad || null\n    this.onUnload = opts.onUnload || null\n    this.onSet = opts.onSet || null\n    this.onUnset = opts.onUnset || null\n    this.onCustomMeshCreate = opts.onCustomMeshCreate || null\n}\n\n\n\n\n/**\n * Default options when registering a block type\n */\nfunction BlockOptions(isFluid = false) {\n    /** Solidity for physics purposes */\n    this.solid = (isFluid) ? false : true\n    /** Whether the block fully obscures neighboring blocks */\n    this.opaque = (isFluid) ? false : true\n    /** whether a nonsolid block is a fluid (buoyant, viscous..) */\n    this.fluid = false\n    /** The block material(s) for this voxel's faces. May be:\n     *   * one (String) material name\n     *   * array of 2 names: [top/bottom, sides]\n     *   * array of 3 names: [top, bottom, sides]\n     *   * array of 6 names: [-x, +x, -y, +y, -z, +z]\n     * @type {string|string[]}\n    */\n    this.material = null\n    /** Specifies a custom mesh for this voxel, instead of terrain  */\n    this.blockMesh = null\n    /** Fluid parameter for fluid blocks */\n    this.fluidDensity = 1.0\n    /** Fluid parameter for fluid blocks */\n    this.viscosity = 0.5\n    /** @type {(x:number, y:number, z:number) => void} */\n    this.onLoad = null\n    /** @type {(x:number, y:number, z:number) => void} */\n    this.onUnload = null\n    /** @type {(x:number, y:number, z:number) => void} */\n    this.onSet = null\n    /** @type {(x:number, y:number, z:number) => void} */\n    this.onUnset = null\n    /** @type {(mesh:TransformNode, x:number, y:number, z:number) => void} */\n    this.onCustomMeshCreate = null\n}\n\n/** @typedef {import('@babylonjs/core/Meshes').TransformNode} TransformNode */\n\n\n/**\n * Default options when registering a Block Material\n */\nfunction MaterialOptions() {\n    /** An array of 0..1 floats, either [R,G,B] or [R,G,B,A]\n     * @type {number[]}\n     */\n    this.color = null\n    /** Filename of texture image, if any\n     * @type {string}\n     */\n    this.textureURL = null\n    /** Whether the texture image has alpha */\n    this.texHasAlpha = false\n    /** Index into a (vertical strip) texture atlas, if applicable */\n    this.atlasIndex = -1\n    /**\n     * An optional Babylon.js `Material`. If specified, terrain for this voxel\n     * will be rendered with the supplied material (this can impact performance).\n     */\n    this.renderMaterial = null\n}\n","\nimport glvec3 from 'gl-vec3'\nimport { makeProfileHook } from './util'\n\nimport { SceneOctreeManager } from './sceneOctreeManager'\n\nimport { Scene, ScenePerformancePriority } from '@babylonjs/core/scene'\nimport { FreeCamera } from '@babylonjs/core/Cameras/freeCamera'\nimport { Engine } from '@babylonjs/core/Engines/engine'\nimport { DirectionalLight } from '@babylonjs/core/Lights/directionalLight'\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial'\nimport { Color3, Color4 } from '@babylonjs/core/Maths/math.color'\nimport { Vector3 } from '@babylonjs/core/Maths/math.vector'\nimport { TransformNode } from '@babylonjs/core/Meshes/transformNode'\nimport { CreateLines } from '@babylonjs/core/Meshes/Builders/linesBuilder'\nimport { CreatePlane } from '@babylonjs/core/Meshes/Builders/planeBuilder'\n\n\n\n\n// profiling flag\nvar PROFILE = 0\n\n\n\nvar defaults = {\n    showFPS: false,\n    antiAlias: true,\n    clearColor: [0.8, 0.9, 1],\n    ambientColor: [0.5, 0.5, 0.5],\n    lightDiffuse: [1, 1, 1],\n    lightSpecular: [1, 1, 1],\n    lightVector: [1, -1, 0.5],\n    useAO: true,\n    AOmultipliers: [0.93, 0.8, 0.5],\n    reverseAOmultiplier: 1.0,\n    preserveDrawingBuffer: true,\n    octreeBlockSize: 2,\n    renderOnResize: true,\n}\n\n\n\n/**\n * `noa.rendering` - \n * Manages all rendering, and the BABYLON scene, materials, etc.\n * \n * This module uses the following default options (from the options\n * object passed to the {@link Engine}):\n * ```js\n * {\n *     showFPS: false,\n *     antiAlias: true,\n *     clearColor: [0.8, 0.9, 1],\n *     ambientColor: [0.5, 0.5, 0.5],\n *     lightDiffuse: [1, 1, 1],\n *     lightSpecular: [1, 1, 1],\n *     lightVector: [1, -1, 0.5],\n *     useAO: true,\n *     AOmultipliers: [0.93, 0.8, 0.5],\n *     reverseAOmultiplier: 1.0,\n *     preserveDrawingBuffer: true,\n *     octreeBlockSize: 2,\n *     renderOnResize: true,\n * }\n * ```\n*/\n\nexport class Rendering {\n\n    /** \n     * @internal \n     * @param {import('../index').Engine} noa  \n    */\n    constructor(noa, opts, canvas) {\n        opts = Object.assign({}, defaults, opts)\n        /** @internal */\n        this.noa = noa\n\n        // settings\n        /** Whether to redraw the screen when the game is resized while paused */\n        this.renderOnResize = !!opts.renderOnResize\n\n        // internals\n        /** @internal */\n        this.useAO = !!opts.useAO\n        /** @internal */\n        this.aoVals = opts.AOmultipliers\n        /** @internal */\n        this.revAoVal = opts.reverseAOmultiplier\n        /** @internal */\n        this.meshingCutoffTime = 6 // ms\n\n        /** the Babylon.js Engine object for the scene */\n        this.engine = null\n        /** the Babylon.js Scene object for the world */\n        this.scene = null\n        /** a Babylon.js DirectionalLight that is added to the scene */\n        this.light = null\n        /** the Babylon.js FreeCamera that renders the scene */\n        this.camera = null\n\n        // sets up babylon scene, lights, etc\n        this._initScene(canvas, opts)\n\n        // for debugging\n        if (opts.showFPS) setUpFPS()\n    }\n\n\n\n\n    /**\n     * Constructor helper - set up the Babylon.js scene and basic components\n     * @internal\n     */\n    _initScene(canvas, opts) {\n\n        // init internal properties\n        this.engine = new Engine(canvas, opts.antiAlias, {\n            preserveDrawingBuffer: opts.preserveDrawingBuffer,\n        })\n        var scene = new Scene(this.engine)\n        this.scene = scene\n        // remove built-in listeners\n        scene.detachControl()\n\n        // this disables a few babylon features that noa doesn't use\n        scene.performancePriority = ScenePerformancePriority.Intermediate\n        scene.autoClear = true\n\n        // octree manager class\n        var blockSize = Math.round(opts.octreeBlockSize)\n        /** @internal */\n        this._octreeManager = new SceneOctreeManager(this, blockSize)\n\n        // camera, and a node to hold it and accumulate rotations\n        /** @internal */\n        this._cameraHolder = new TransformNode('camHolder', scene)\n        this.camera = new FreeCamera('camera', new Vector3(0, 0, 0), scene)\n        this.camera.parent = this._cameraHolder\n        this.camera.minZ = .01\n\n        // plane obscuring the camera - for overlaying an effect on the whole view\n        /** @internal */\n        this._camScreen = CreatePlane('camScreen', { size: 10 }, scene)\n        this.addMeshToScene(this._camScreen)\n        this._camScreen.position.z = .1\n        this._camScreen.parent = this.camera\n        /** @internal */\n        this._camScreenMat = this.makeStandardMaterial('camera_screen_mat')\n        this._camScreen.material = this._camScreenMat\n        this._camScreen.setEnabled(false)\n        this._camScreenMat.freeze()\n        /** @internal */\n        this._camLocBlock = 0\n\n        // apply some defaults\n        scene.clearColor = Color4.FromArray(opts.clearColor)\n        scene.ambientColor = Color3.FromArray(opts.ambientColor)\n\n        var lightVec = Vector3.FromArray(opts.lightVector)\n        this.light = new DirectionalLight('light', lightVec, scene)\n        this.light.diffuse = Color3.FromArray(opts.lightDiffuse)\n        this.light.specular = Color3.FromArray(opts.lightSpecular)\n\n        // scene options\n        scene.skipPointerMovePicking = true\n    }\n}\n\n\n\n/*\n *   PUBLIC API \n */\n\n\n/** The Babylon `scene` object representing the game world. */\nRendering.prototype.getScene = function () {\n    return this.scene\n}\n\n// per-tick listener for rendering-related stuff\n/** @internal */\nRendering.prototype.tick = function (dt) {\n    // nothing here at the moment\n}\n\n\n\n\n/** @internal */\nRendering.prototype.render = function () {\n    profile_hook('start')\n    updateCameraForRender(this)\n    profile_hook('updateCamera')\n    this.engine.beginFrame()\n    profile_hook('beginFrame')\n    this.scene.render()\n    profile_hook('render')\n    fps_hook()\n    this.engine.endFrame()\n    profile_hook('endFrame')\n    profile_hook('end')\n}\n\n\n/** @internal */\nRendering.prototype.postRender = function () {\n    // nothing currently\n}\n\n\n/** @internal */\nRendering.prototype.resize = function () {\n    this.engine.resize()\n    if (this.noa._paused && this.renderOnResize) {\n        this.scene.render()\n    }\n}\n\n\n/** @internal */\nRendering.prototype.highlightBlockFace = function (show, posArr, normArr) {\n    var m = getHighlightMesh(this)\n    if (show) {\n        // floored local coords for highlight mesh\n        this.noa.globalToLocal(posArr, null, hlpos)\n        // offset to avoid z-fighting, bigger when camera is far away\n        var dist = glvec3.dist(this.noa.camera._localGetPosition(), hlpos)\n        var slop = 0.001 + 0.001 * dist\n        for (var i = 0; i < 3; i++) {\n            if (normArr[i] === 0) {\n                hlpos[i] += 0.5\n            } else {\n                hlpos[i] += (normArr[i] > 0) ? 1 + slop : -slop\n            }\n        }\n        m.position.copyFromFloats(hlpos[0], hlpos[1], hlpos[2])\n        m.rotation.x = (normArr[1]) ? Math.PI / 2 : 0\n        m.rotation.y = (normArr[0]) ? Math.PI / 2 : 0\n    }\n    m.setEnabled(show)\n}\nvar hlpos = []\n\n\n\n\n/**\n * Adds a mesh to the engine's selection/octree logic so that it renders.\n * \n * @param mesh the mesh to add to the scene\n * @param isStatic pass in true if mesh never moves (i.e. never changes chunks)\n * @param pos (optional) global position where the mesh should be\n * @param containingChunk (optional) chunk to which the mesh is statically bound\n */\nRendering.prototype.addMeshToScene = function (mesh, isStatic = false, pos = null, containingChunk = null) {\n    if (!mesh.metadata) mesh.metadata = {}\n\n    // if mesh is already added, just make sure it's visisble\n    if (mesh.metadata[addedToSceneFlag]) {\n        this._octreeManager.setMeshVisibility(mesh, true)\n        return\n    }\n    mesh.metadata[addedToSceneFlag] = true\n\n    // find local position for mesh and move it there (unless it's parented)\n    if (!mesh.parent) {\n        if (!pos) pos = mesh.position.asArray()\n        var lpos = this.noa.globalToLocal(pos, null, [])\n        mesh.position.fromArray(lpos)\n    }\n\n    // add to the octree, and remove again on disposal\n    this._octreeManager.addMesh(mesh, isStatic, pos, containingChunk)\n    mesh.onDisposeObservable.add(() => {\n        this._octreeManager.removeMesh(mesh)\n        mesh.metadata[addedToSceneFlag] = false\n    })\n}\nvar addedToSceneFlag = 'noa_added_to_scene'\n\n\n\n\n/**\n * Use this to toggle the visibility of a mesh without disposing it or\n * removing it from the scene.\n * \n * @param {import('@babylonjs/core/Meshes').Mesh} mesh\n * @param {boolean} visible\n */\nRendering.prototype.setMeshVisibility = function (mesh, visible = false) {\n    if (!mesh.metadata) mesh.metadata = {}\n    if (mesh.metadata[addedToSceneFlag]) {\n        this._octreeManager.setMeshVisibility(mesh, visible)\n    } else {\n        if (visible) this.addMeshToScene(mesh)\n    }\n}\n\n\n\n\n\n\n\n\n/**\n * Create a default standardMaterial:      \n * flat, nonspecular, fully reflects diffuse and ambient light\n * @returns {StandardMaterial}\n */\nRendering.prototype.makeStandardMaterial = function (name) {\n    var mat = new StandardMaterial(name, this.scene)\n    mat.specularColor.copyFromFloats(0, 0, 0)\n    mat.ambientColor.copyFromFloats(1, 1, 1)\n    mat.diffuseColor.copyFromFloats(1, 1, 1)\n    return mat\n}\n\n\n\n\n\n\n\n/*\n *\n *   INTERNALS\n *\n */\n\n\n\n\n\n/*\n *\n * \n *   ACCESSORS FOR CHUNK ADD/REMOVAL/MESHING\n *\n * \n */\n/** @internal */\nRendering.prototype.prepareChunkForRendering = function (chunk) {\n    // currently no logic needed here, but I may need it again...\n}\n\n/** @internal */\nRendering.prototype.disposeChunkForRendering = function (chunk) {\n    // nothing currently\n}\n\n\n\n\n\n\n// change world origin offset, and rebase everything with a position\n/** @internal */\nRendering.prototype._rebaseOrigin = function (delta) {\n    var dvec = new Vector3(delta[0], delta[1], delta[2])\n\n    this.scene.meshes.forEach(mesh => {\n        // parented meshes don't live in the world coord system\n        if (mesh.parent) return\n\n        // move each mesh by delta (even though most are managed by components)\n        mesh.position.subtractInPlace(dvec)\n\n        if (mesh.isWorldMatrixFrozen) {\n            // paradoxically this unfreezes, then re-freezes the matrix\n            mesh.freezeWorldMatrix()\n        }\n    })\n\n    // updates position of all octree blocks\n    this._octreeManager.rebase(dvec)\n}\n\n\n\n\n\n// updates camera position/rotation to match settings from noa.camera\n\nfunction updateCameraForRender(self) {\n    var cam = self.noa.camera\n    var tgtLoc = cam._localGetTargetPosition()\n    self._cameraHolder.position.copyFromFloats(tgtLoc[0], tgtLoc[1], tgtLoc[2])\n    self._cameraHolder.rotation.x = cam.pitch\n    self._cameraHolder.rotation.y = cam.heading\n    self.camera.position.z = -cam.currentZoom\n\n    // applies screen effect when camera is inside a transparent voxel\n    var cloc = cam._localGetPosition()\n    var off = self.noa.worldOriginOffset\n    var cx = Math.floor(cloc[0] + off[0])\n    var cy = Math.floor(cloc[1] + off[1])\n    var cz = Math.floor(cloc[2] + off[2])\n    var id = self.noa.getBlock(cx, cy, cz)\n    checkCameraEffect(self, id)\n}\n\n\n\n//  If camera's current location block id has alpha color (e.g. water), apply/remove an effect\n\nfunction checkCameraEffect(self, id) {\n    if (id === self._camLocBlock) return\n    if (id === 0) {\n        self._camScreen.setEnabled(false)\n    } else {\n        var matId = self.noa.registry.getBlockFaceMaterial(id, 0)\n        if (matId) {\n            var matData = self.noa.registry.getMaterialData(matId)\n            var col = matData.color\n            var alpha = matData.alpha\n            if (col && alpha && alpha < 1) {\n                self._camScreenMat.diffuseColor.set(0, 0, 0)\n                self._camScreenMat.ambientColor.set(col[0], col[1], col[2])\n                self._camScreenMat.alpha = alpha\n                self._camScreen.setEnabled(true)\n            }\n        }\n    }\n    self._camLocBlock = id\n}\n\n\n\n\n\n\n// make or get a mesh for highlighting active voxel\nfunction getHighlightMesh(rendering) {\n    var mesh = rendering._highlightMesh\n    if (!mesh) {\n        mesh = CreatePlane(\"highlight\", { size: 1.0 }, rendering.scene)\n        var hlm = rendering.makeStandardMaterial('block_highlight_mat')\n        hlm.backFaceCulling = false\n        hlm.emissiveColor = new Color3(1, 1, 1)\n        hlm.alpha = 0.2\n        hlm.freeze()\n        mesh.material = hlm\n\n        // outline\n        var s = 0.5\n        var lines = CreateLines(\"hightlightLines\", {\n            points: [\n                new Vector3(s, s, 0),\n                new Vector3(s, -s, 0),\n                new Vector3(-s, -s, 0),\n                new Vector3(-s, s, 0),\n                new Vector3(s, s, 0)\n            ]\n        }, rendering.scene)\n        lines.color = new Color3(1, 1, 1)\n        lines.parent = mesh\n\n        rendering.addMeshToScene(mesh)\n        rendering.addMeshToScene(lines)\n        rendering._highlightMesh = mesh\n    }\n    return mesh\n}\n\n\n\n\n\n\n\n\n\n\n/*\n * \n *      sanity checks:\n * \n */\n/** @internal */\nRendering.prototype.debug_SceneCheck = function () {\n    var meshes = this.scene.meshes\n    var octree = this.scene._selectionOctree\n    var dyns = octree.dynamicContent\n    var octs = []\n    var numOcts = 0\n    var numSubs = 0\n    var mats = this.scene.materials\n    var allmats = []\n    mats.forEach(mat => {\n        // @ts-ignore\n        if (mat.subMaterials) mat.subMaterials.forEach(mat => allmats.push(mat))\n        else allmats.push(mat)\n    })\n    octree.blocks.forEach(function (block) {\n        numOcts++\n        block.entries.forEach(m => octs.push(m))\n    })\n    meshes.forEach(function (m) {\n        if (m.isDisposed()) warn(m, 'disposed mesh in scene')\n        if (empty(m)) return\n        if (missing(m, dyns, octs)) warn(m, 'non-empty mesh missing from octree')\n        if (!m.material) { warn(m, 'non-empty scene mesh with no material'); return }\n        numSubs += (m.subMeshes) ? m.subMeshes.length : 1\n        // @ts-ignore\n        var mats = m.material.subMaterials || [m.material]\n        mats.forEach(function (mat) {\n            if (missing(mat, mats)) warn(mat, 'mesh material not in scene')\n        })\n    })\n    var unusedMats = []\n    allmats.forEach(mat => {\n        var used = false\n        meshes.forEach(mesh => {\n            if (mesh.material === mat) used = true\n            if (!mesh.material) return\n            // @ts-ignore\n            var mats = mesh.material.subMaterials || [mesh.material]\n            if (mats.includes(mat)) used = true\n        })\n        if (!used) unusedMats.push(mat.name)\n    })\n    if (unusedMats.length) {\n        console.warn('Materials unused by any mesh: ', unusedMats.join(', '))\n    }\n    dyns.forEach(function (m) {\n        if (missing(m, meshes)) warn(m, 'octree/dynamic mesh not in scene')\n    })\n    octs.forEach(function (m) {\n        if (missing(m, meshes)) warn(m, 'octree block mesh not in scene')\n    })\n    var avgPerOct = Math.round(10 * octs.length / numOcts) / 10\n    console.log('meshes - octree:', octs.length, '  dynamic:', dyns.length,\n        '   subMeshes:', numSubs,\n        '   avg meshes/octreeBlock:', avgPerOct)\n\n    function warn(obj, msg) { console.warn(obj.name + ' --- ' + msg) }\n\n    function empty(mesh) { return (mesh.getIndices().length === 0) }\n\n    function missing(obj, list1, list2) {\n        if (!obj) return false\n        if (list1.includes(obj)) return false\n        if (list2 && list2.includes(obj)) return false\n        return true\n    }\n    return 'done.'\n}\n\n\n/** @internal */\nRendering.prototype.debug_MeshCount = function () {\n    var ct = {}\n    this.scene.meshes.forEach(m => {\n        var n = m.name || ''\n        n = n.replace(/-\\d+.*/, '#')\n        n = n.replace(/\\d+.*/, '#')\n        n = n.replace(/(rotHolder|camHolder|camScreen)/, 'rendering use')\n        n = n.replace(/atlas sprite .*/, 'atlas sprites')\n        ct[n] = ct[n] || 0\n        ct[n]++\n    })\n    for (var s in ct) console.log('   ' + (ct[s] + '       ').substr(0, 7) + s)\n}\n\n\n\n\n\n\n\nvar profile_hook = (PROFILE) ?\n    makeProfileHook(200, 'render internals') : () => { }\n\n\n\nvar fps_hook = function () { }\n\nfunction setUpFPS() {\n    var div = document.createElement('div')\n    div.id = 'noa_fps'\n    div.style.position = 'absolute'\n    div.style.top = '0'\n    div.style.right = '0'\n    div.style.zIndex = '0'\n    div.style.color = 'white'\n    div.style.backgroundColor = 'rgba(0,0,0,0.5)'\n    div.style.font = '14px monospace'\n    div.style.textAlign = 'center'\n    div.style.minWidth = '2em'\n    div.style.margin = '4px'\n    document.body.appendChild(div)\n    var every = 1000\n    var ct = 0\n    var longest = 0\n    var start = performance.now()\n    var last = start\n    fps_hook = function () {\n        ct++\n        var nt = performance.now()\n        if (nt - last > longest) longest = nt - last\n        last = nt\n        if (nt - start < every) return\n        var fps = Math.round(ct / (nt - start) * 1000)\n        var min = Math.round(1 / longest * 1000)\n        div.innerHTML = fps + '<br>' + min\n        ct = 0\n        longest = 0\n        start = nt\n    }\n}\n","\nimport { Vector3 } from '@babylonjs/core/Maths/math.vector'\nimport { Octree } from '@babylonjs/core/Culling/Octrees/octree'\nimport { OctreeBlock } from '@babylonjs/core/Culling/Octrees/octreeBlock'\nimport { OctreeSceneComponent } from '@babylonjs/core/Culling/Octrees/octreeSceneComponent'\n\nimport { locationHasher, removeUnorderedListItem } from './util'\n\n\n/*\n * \n * \n * \n *          simple class to manage scene octree and octreeBlocks\n * \n * \n * \n*/\n\n/** @internal */\nexport class SceneOctreeManager {\n\n    /** @internal */\n    constructor(rendering, blockSize) {\n        var scene = rendering.scene\n        scene._addComponent(new OctreeSceneComponent(scene))\n\n        // mesh metadata flags\n        var octreeBlock = 'noa_octree_block'\n        var inDynamicList = 'noa_in_dynamic_list'\n        var inOctreeBlock = 'noa_in_octree_block'\n\n        // the root octree object\n        var octree = new Octree(NOP)\n        scene._selectionOctree = octree\n        octree.blocks = []\n        var octBlocksHash = {}\n\n\n        /*\n         * \n         *          public API\n         * \n        */\n\n        this.rebase = (offset) => { recurseRebaseBlocks(octree, offset) }\n\n        this.addMesh = (mesh, isStatic, pos, chunk) => {\n            if (!mesh.metadata) mesh.metadata = {}\n\n            // dynamic content is just rendered from a list on the octree\n            if (!isStatic) {\n                if (mesh.metadata[inDynamicList]) return\n                octree.dynamicContent.push(mesh)\n                mesh.metadata[inDynamicList] = true\n                return\n            }\n\n            // octreeBlock-space integer coords of mesh position, and hashed key\n            var ci = Math.floor(pos[0] / bs)\n            var cj = Math.floor(pos[1] / bs)\n            var ck = Math.floor(pos[2] / bs)\n            var mapKey = locationHasher(ci, cj, ck)\n\n            // get or create octreeBlock\n            var block = octBlocksHash[mapKey]\n            if (!block) {\n                // lower corner of new octree block position, in global/local\n                var gloc = [ci * bs, cj * bs, ck * bs]\n                var loc = [0, 0, 0]\n                rendering.noa.globalToLocal(gloc, null, loc)\n                // make the new octree block and store it\n                block = makeOctreeBlock(loc, bs)\n                octree.blocks.push(block)\n                octBlocksHash[mapKey] = block\n                block._noaMapKey = mapKey\n            }\n\n            // do the actual adding logic\n            block.entries.push(mesh)\n            mesh.metadata[octreeBlock] = block\n            mesh.metadata[inOctreeBlock] = true\n\n            // rely on octrees for selection, skipping bounds checks\n            mesh.alwaysSelectAsActiveMesh = true\n        }\n\n\n\n        this.removeMesh = (mesh) => {\n            if (!mesh.metadata) return\n\n            if (mesh.metadata[inDynamicList]) {\n                removeUnorderedListItem(octree.dynamicContent, mesh)\n                mesh.metadata[inDynamicList] = false\n            }\n            if (mesh.metadata[inOctreeBlock]) {\n                var block = mesh.metadata[octreeBlock]\n                if (block && block.entries) {\n                    removeUnorderedListItem(block.entries, mesh)\n                    if (block.entries.length === 0) {\n                        delete octBlocksHash[block._noaMapKey]\n                        removeUnorderedListItem(octree.blocks, block)\n                    }\n                }\n                mesh.metadata[octreeBlock] = null\n                mesh.metadata[inOctreeBlock] = false\n            }\n        }\n\n\n\n        // experimental helper\n        this.setMeshVisibility = (mesh, visible = false) => {\n            if (mesh.metadata[octreeBlock]) {\n                // mesh is static\n                if (mesh.metadata[inOctreeBlock] === visible) return\n                var block = mesh.metadata[octreeBlock]\n                if (block && block.entries) {\n                    if (visible) {\n                        block.entries.push(mesh)\n                    } else {\n                        removeUnorderedListItem(block.entries, mesh)\n                    }\n                }\n                mesh.metadata[inOctreeBlock] = visible\n            } else {\n                // mesh is dynamic\n                if (mesh.metadata[inDynamicList] === visible) return\n                if (visible) {\n                    octree.dynamicContent.push(mesh)\n                } else {\n                    removeUnorderedListItem(octree.dynamicContent, mesh)\n                }\n                mesh.metadata[inDynamicList] = visible\n            }\n        }\n\n        /*\n         * \n         *          internals\n         * \n        */\n\n        var NOP = () => { }\n        var bs = blockSize * rendering.noa.world._chunkSize\n\n        var recurseRebaseBlocks = (parent, offset) => {\n            parent.blocks.forEach(child => {\n                child.minPoint.subtractInPlace(offset)\n                child.maxPoint.subtractInPlace(offset)\n                child._boundingVectors.forEach(v => v.subtractInPlace(offset))\n                if (child.blocks) recurseRebaseBlocks(child, offset)\n            })\n        }\n\n        var makeOctreeBlock = (minPt, size) => {\n            var min = new Vector3(minPt[0], minPt[1], minPt[2])\n            var max = new Vector3(minPt[0] + size, minPt[1] + size, minPt[2] + size)\n            return new OctreeBlock(min, max, undefined, undefined, undefined, NOP)\n        }\n\n    }\n\n}\n","\nimport { Physics as VoxelPhysics } from 'voxel-physics-engine'\n\n\n\n\nvar defaultOptions = {\n    gravity: [0, -10, 0],\n    airDrag: 0.1,\n}\n\n/**\n * `noa.physics` - Wrapper module for the physics engine.\n * \n * This module extends \n * [voxel-physics-engine](https://github.com/fenomas/voxel-physics-engine),\n * so turn on \"Inherited\" to see its APIs here, or view the base module \n * for full docs.\n * \n * This module uses the following default options (from the options\n * object passed to the {@link Engine}):\n * \n * ```js\n * {\n *     gravity: [0, -10, 0],\n *     airDrag: 0.1,\n *     fluidDrag: 0.4,\n *     fluidDensity: 2.0,\n *     minBounceImpulse: .5,      // cutoff for a bounce to occur\n * }\n * ```\n*/\n\nexport class Physics extends VoxelPhysics {\n\n    /** \n     * @internal \n     * @param {import('../index').Engine} noa\n    */\n    constructor(noa, opts) {\n        opts = Object.assign({}, defaultOptions, opts)\n        var world = noa.world\n        var solidLookup = noa.registry._solidityLookup\n        var fluidLookup = noa.registry._fluidityLookup\n\n        // physics engine runs in offset coords, so voxel getters need to match\n        var offset = noa.worldOriginOffset\n\n        var blockGetter = (x, y, z) => {\n            var id = world.getBlockID(x + offset[0], y + offset[1], z + offset[2])\n            return solidLookup[id]\n        }\n        var isFluidGetter = (x, y, z) => {\n            var id = world.getBlockID(x + offset[0], y + offset[1], z + offset[2])\n            return fluidLookup[id]\n        }\n\n        super(opts, blockGetter, isFluidGetter)\n    }\n\n}\n\n\n\n","\nimport EventEmitter from 'events'\nimport { Chunk } from './chunk'\nimport { LocationQueue, ChunkStorage, locationHasher } from './util'\n\nvar PROFILE_EVERY = 0               // ticks\nvar PROFILE_QUEUES_EVERY = 0        // ticks\n\n\n\n\n\n\nvar defaultOptions = {\n    chunkSize: 24,\n    chunkAddDistance: [2, 2],           // [horizontal, vertical]\n    chunkRemoveDistance: [3, 3],        // [horizontal, vertical]\n    worldGenWhilePaused: false,\n    manuallyControlChunkLoading: false,\n}\n\n/**\n * `noa.world` - manages world data, chunks, voxels.\n * \n * This module uses the following default options (from the options\n * object passed to the {@link Engine}):\n * ```js\n * var defaultOptions = {\n *   chunkSize: 24,\n *   chunkAddDistance: [2, 2],           // [horizontal, vertical]\n *   chunkRemoveDistance: [3, 3],        // [horizontal, vertical]\n *   worldGenWhilePaused: false,\n *   manuallyControlChunkLoading: false,\n * }\n * ```\n * \n * **Events:**\n *  + `worldDataNeeded = (requestID, dataArr, x, y, z, worldName)`  \n *    Alerts client that a new chunk of world data is needed.\n *  + `playerEnteredChunk => (i, j, k)`    \n *    Fires when player enters a new chunk\n *  + `chunkAdded => (chunk)`  \n *    Fires after a new chunk object is added to the world\n *  + `chunkBeingRemoved = (requestID, dataArr, userData)`  \n *    Fires before a chunk is removed from world\n*/\nexport class World extends EventEmitter {\n\n    /** @internal */\n    constructor(noa, opts) {\n        super()\n        opts = Object.assign({}, defaultOptions, opts)\n        /** @internal */\n        this.noa = noa\n\n        /** @internal */\n        this.playerChunkLoaded = false\n\n        /** @internal */\n        this.Chunk = Chunk // expose this class for ...reasons\n\n        /**\n         * Game clients should set this if they need to manually control \n         * which chunks to load and unload. When set, client should call \n         * `noa.world.manuallyLoadChunk` / `manuallyUnloadChunk` as needed.\n         */\n        this.manuallyControlChunkLoading = !!opts.manuallyControlChunkLoading\n\n        /**\n         * Defining this function sets a custom order in which to create chunks.\n         * The function should look like:\n         * ```js\n         *   (i, j, k) => 1 // return a smaller number for chunks to process first\n         * ```\n         */\n        this.chunkSortingDistFn = defaultSortDistance\n\n        /**\n         * Set this higher to cause chunks not to mesh until they have some neighbors.\n         * Max legal value is 26 (each chunk will mesh only when all neighbors are present)\n         */\n        this.minNeighborsToMesh = 6\n\n        /** When true, worldgen queues will keep running if engine is paused. */\n        this.worldGenWhilePaused = !!opts.worldGenWhilePaused\n\n        /** Limit the size of internal chunk processing queues \n         * @type {number} \n        */\n        this.maxChunksPendingCreation = 50\n\n        /** Limit the size of internal chunk processing queues \n         * @type {number} \n        */\n        this.maxChunksPendingMeshing = 50\n\n        /** Cutoff (in ms) of time spent each **tick** \n         * @type {number}\n        */\n        this.maxProcessingPerTick = 5\n\n        /** Cutoff (in ms) of time spent each **render** \n         * @type {number}\n        */\n        this.maxProcessingPerRender = 3\n\n\n        // set up internal state\n\n\n        /** @internal */\n        this._chunkSize = opts.chunkSize\n        /** @internal */\n        this._chunkAddDistance = [2, 2]\n        /** @internal */\n        this._chunkRemoveDistance = [3, 3]\n        /** @internal */\n        this._addDistanceFn = null\n        /** @internal */\n        this._remDistanceFn = null\n        /** @internal */\n        this._prevWorldName = ''\n        /** @internal */\n        this._prevPlayerChunkHash = 0\n        /** @internal */\n        this._chunkAddSearchFrom = 0\n        /** @internal */\n        this._prevSortingFn = null\n        /** @internal */\n        this._sortMeshQueueEvery = 0\n\n\n        // Init internal chunk queues:\n\n        /** @internal All chunks existing in any queue */\n        this._chunksKnown = new LocationQueue()\n\n        /** @internal in range but not yet requested from client */\n        this._chunksToRequest = new LocationQueue()\n        /** @internal known to have invalid data (wrong world, eg) */\n        this._chunksInvalidated = new LocationQueue()\n        /** @internal out of range, and waiting to be removed */\n        this._chunksToRemove = new LocationQueue()\n\n        /** @internal requested, awaiting data event from client */\n        this._chunksPending = new LocationQueue()\n        /** @internal has data, waiting to be (re-)meshed */\n        this._chunksToMesh = new LocationQueue()\n        /** @internal priority queue for chunks to re-mesh */\n        this._chunksToMeshFirst = new LocationQueue()\n\n        /** \n         * @internal A queue of chunk locations, rather than chunk references.\n         * Has only the positive 1/16 quadrant, sorted (reverse order!) */\n        this._chunksSortedLocs = new LocationQueue()\n\n        // validate add/remove sizes through a setter that clients can use later\n        this.setAddRemoveDistance(opts.chunkAddDistance, opts.chunkRemoveDistance)\n\n        // chunks stored in a data structure for quick lookup\n        // note that the hash wraps around every 1024 chunk indexes!!\n        // i.e. two chunks that far apart can't be loaded at the same time\n        /** @internal */\n        this._storage = new ChunkStorage()\n\n        // coordinate converter functions - default versions first:\n        var cs = this._chunkSize\n        /** @internal */\n        this._coordsToChunkIndexes = chunkCoordsToIndexesGeneral\n        /** @internal */\n        this._coordsToChunkLocals = chunkCoordsToLocalsGeneral\n\n        // when chunk size is a power of two, override with bit-twiddling:\n        var powerOfTwo = ((cs & cs - 1) === 0)\n        if (powerOfTwo) {\n            /** @internal */\n            this._coordShiftBits = Math.log2(cs) | 0\n            /** @internal */\n            this._coordMask = (cs - 1) | 0\n            this._coordsToChunkIndexes = chunkCoordsToIndexesPowerOfTwo\n            this._coordsToChunkLocals = chunkCoordsToLocalsPowerOfTwo\n        }\n    }\n}\n\n\n\n\n\n/*\n *\n *\n *\n *\n *                  PUBLIC API \n *\n *\n *\n *\n*/\n\nWorld.prototype.getBlockID = function (x = 0, y = 0, z = 0) {\n    var [ci, cj, ck] = this._coordsToChunkIndexes(x, y, z)\n    var chunk = this._storage.getChunkByIndexes(ci, cj, ck)\n    if (!chunk) return 0\n    var [i, j, k] = this._coordsToChunkLocals(x, y, z)\n    return chunk.voxels.get(i, j, k)\n}\n\nWorld.prototype.getBlockSolidity = function (x = 0, y = 0, z = 0) {\n    var [ci, cj, ck] = this._coordsToChunkIndexes(x, y, z)\n    var chunk = this._storage.getChunkByIndexes(ci, cj, ck)\n    if (!chunk) return false\n    var [i, j, k] = this._coordsToChunkLocals(x, y, z)\n    return !!chunk.getSolidityAt(i, j, k)\n}\n\nWorld.prototype.getBlockOpacity = function (x = 0, y = 0, z = 0) {\n    var id = this.getBlockID(x, y, z)\n    return this.noa.registry.getBlockOpacity(id)\n}\n\nWorld.prototype.getBlockFluidity = function (x = 0, y = 0, z = 0) {\n    var id = this.getBlockID(x, y, z)\n    return this.noa.registry.getBlockFluidity(id)\n}\n\nWorld.prototype.getBlockProperties = function (x = 0, y = 0, z = 0) {\n    var id = this.getBlockID(x, y, z)\n    return this.noa.registry.getBlockProps(id)\n}\n\n\nWorld.prototype.setBlockID = function (id = 0, x = 0, y = 0, z = 0) {\n    var [ci, cj, ck] = this._coordsToChunkIndexes(x, y, z)\n    var chunk = this._storage.getChunkByIndexes(ci, cj, ck)\n    if (!chunk) return\n    var [i, j, k] = this._coordsToChunkLocals(x, y, z)\n    return chunk.set(i, j, k, id)\n}\n\n\n/** @param box */\nWorld.prototype.isBoxUnobstructed = function (box) {\n    var base = box.base\n    var max = box.max\n    for (var i = Math.floor(base[0]); i < max[0] + 1; i++) {\n        for (var j = Math.floor(base[1]); j < max[1] + 1; j++) {\n            for (var k = Math.floor(base[2]); k < max[2] + 1; k++) {\n                if (this.getBlockSolidity(i, j, k)) return false\n            }\n        }\n    }\n    return true\n}\n\n\n/** \n * Clients should call this after creating a chunk's worth of data (as an ndarray)  \n * If userData is passed in it will be attached to the chunk\n * @param {string} id - the string specified when the chunk was requested \n * @param {*} array - an ndarray of voxel data\n * @param {*} userData - an arbitrary value for game client use\n * @param {number} fillVoxelID - specify a voxel ID here if you want to signify that \n * the entire chunk should be solidly filled with that voxel (e.g. `0` for air). \n * If you do this, the voxel array data will be overwritten and the engine will \n * take a fast path through some initialization steps.\n */\nWorld.prototype.setChunkData = function (id, array, userData = null, fillVoxelID = -1) {\n    setChunkData(this, id, array, userData, fillVoxelID)\n}\n\n\n\n/** \n * Sets the distances within which to load new chunks, and beyond which \n * to unload them. Generally you want the remove distance to be somewhat\n * farther, so that moving back and forth across the same chunk border doesn't\n * keep loading/unloading the same distant chunks.\n * \n * Both arguments can be numbers (number of voxels), or arrays like:\n * `[horiz, vert]` specifying different horizontal and vertical distances.\n * @param {number | number[]} addDist\n * @param {number | number[]} remDist\n */\nWorld.prototype.setAddRemoveDistance = function (addDist = 2, remDist = 3) {\n    var addArr = Array.isArray(addDist) ? addDist : [addDist, addDist]\n    var remArr = Array.isArray(remDist) ? remDist : [remDist, remDist]\n    var minGap = 1\n    if (remArr[0] < addArr[0] + minGap) remArr[0] = addArr[0] + minGap\n    if (remArr[1] < addArr[1] + minGap) remArr[1] = addArr[1] + minGap\n    this._chunkAddDistance = addArr\n    this._chunkRemoveDistance = remArr\n    // rebuild chunk distance functions and add search locations\n    this._addDistanceFn = makeDistanceTestFunction(addArr[0], addArr[1])\n    this._remDistanceFn = makeDistanceTestFunction(remArr[0], remArr[1])\n    this._chunksSortedLocs.empty()\n    // this queue holds only 1/16th the search space: i=0..max, j=0..i, k=0..max\n    for (var i = 0; i <= addArr[0]; i++) {\n        for (var k = 0; k <= i; k++) {\n            for (var j = 0; j <= addArr[1]; j++) {\n                if (!this._addDistanceFn(i, j, k)) continue\n                this._chunksSortedLocs.add(i, j, k)\n            }\n        }\n    }\n    // resets state of nearby chunk search\n    this._prevSortingFn = null\n    this._chunkAddSearchFrom = 0\n}\n\n\n\n\n\n\n/** \n * Tells noa to discard voxel data within a given `AABB` (e.g. because \n * the game client received updated data from a server). \n * The engine will mark all affected chunks for removal, and will later emit \n * new `worldDataNeeded` events (if the chunk is still in draw range).\n */\nWorld.prototype.invalidateVoxelsInAABB = function (box) {\n    invalidateChunksInBox(this, box)\n}\n\n\n/** When manually controlling chunk loading, tells the engine that the \n * chunk containing the specified (x,y,z) needs to be created and loaded.\n * > Note: throws unless `noa.world.manuallyControlChunkLoading` is set.\n * @param x, y, z\n */\nWorld.prototype.manuallyLoadChunk = function (x = 0, y = 0, z = 0) {\n    if (!this.manuallyControlChunkLoading) throw manualErr\n    var [i, j, k] = this._coordsToChunkIndexes(x, y, z)\n    this._chunksKnown.add(i, j, k)\n    this._chunksToRequest.add(i, j, k)\n}\n\n/** When manually controlling chunk loading, tells the engine that the \n * chunk containing the specified (x,y,z) needs to be unloaded and disposed.\n * > Note: throws unless `noa.world.manuallyControlChunkLoading` is set.\n * @param x, y, z\n */\nWorld.prototype.manuallyUnloadChunk = function (x = 0, y = 0, z = 0) {\n    if (!this.manuallyControlChunkLoading) throw manualErr\n    var [i, j, k] = this._coordsToChunkIndexes(x, y, z)\n    this._chunksToRemove.add(i, j, k)\n    this._chunksToMesh.remove(i, j, k)\n    this._chunksToRequest.remove(i, j, k)\n    this._chunksToMeshFirst.remove(i, j, k)\n}\nvar manualErr = 'Set `noa.world.manuallyControlChunkLoading` if you need this API'\n\n\n\n\n/*\n * \n * \n * \n *                  internals:\n * \n *          tick functions that process queues and trigger events\n * \n * \n * \n*/\n\n/** @internal */\nWorld.prototype.tick = function () {\n    var tickStartTime = performance.now()\n\n    // get indexes of player's current chunk, and has it changed since last tick?\n    var [ci, cj, ck] = getPlayerChunkIndexes(this)\n    var chunkLocHash = locationHasher(ci, cj, ck)\n    var changedChunks = (chunkLocHash !== this._prevPlayerChunkHash)\n    if (changedChunks) {\n        this.emit('playerEnteredChunk', ci, cj, ck)\n        this._prevPlayerChunkHash = chunkLocHash\n        this._chunkAddSearchFrom = 0\n    }\n\n    // if world has changed, invalidate everything and ping\n    // removals queue so that player's chunk gets loaded back quickly\n    if (this._prevWorldName !== this.noa.worldName) {\n        if (!this.manuallyControlChunkLoading) {\n            markAllChunksInvalid(this)\n            this._chunkAddSearchFrom = 0\n            processRemoveQueue(this)\n        }\n        this._prevWorldName = this.noa.worldName\n    }\n\n    profile_hook('start')\n    profile_queues_hook('start')\n\n    // scan for chunks to add/remove (unless client handles manually)\n    if (!this.manuallyControlChunkLoading) {\n        findDistantChunksToRemove(this, ci, cj, ck)\n        profile_hook('remQueue')\n        findChunksToRequest(this, ci, cj, ck)\n        profile_hook('addQueue')\n    }\n\n    // possibly scan for additions to meshing queue if it's empty\n    findChunksToMesh(this)\n\n    // process (create or mesh) some chunks, up to max iteration time\n    var t = performance.now()\n    var t1 = tickStartTime + (this.maxProcessingPerTick || 0)\n    if (t < t1) t1 = t + 1\n    var done1 = false\n    var done2 = false\n    var done3 = false\n    while (t < t1) {\n        if (!done1) {\n            done1 = processRemoveQueue(this)\n                || processRemoveQueue(this)\n            profile_hook('removes')\n        }\n        if (!done2) {\n            done2 = processRequestQueue(this)\n            profile_hook('requests')\n        }\n        if (!done3) {\n            done3 = processMeshingQueue(this, false)\n            profile_hook('meshes')\n        }\n        if (done1 && done2 && done3) break\n        t = performance.now()\n    }\n\n    // track whether the player's local chunk is loaded and ready or not\n    var pChunk = this._storage.getChunkByIndexes(ci, cj, ck)\n    this.playerChunkLoaded = !!pChunk\n\n    profile_queues_hook('end', this)\n    profile_hook('end')\n}\n\n\n/** @internal */\nWorld.prototype.render = function () {\n    // on render, quickly process the high-priority meshing queue\n    // to help avoid flashes of background while neighboring chunks update\n    var t = performance.now()\n    var t1 = t + this.maxProcessingPerRender\n    while (t < t1) {\n        var done = processMeshingQueue(this, true)\n        if (done) break\n        t = performance.now()\n    }\n}\n\n\n/** @internal */\nWorld.prototype._getChunkByCoords = function (x = 0, y = 0, z = 0) {\n    // let internal modules request a chunk object\n    var [i, j, k] = this._coordsToChunkIndexes(x, y, z)\n    return this._storage.getChunkByIndexes(i, j, k)\n}\n\n\n\n\n\n\n\n\n\n\n/*\n * \n * \n * \n *              chunk queues and queue processing\n * \n * \n * \n*/\n\n// internal accessor for chunks to queue themeselves for remeshing \n// after their data changes\nWorld.prototype._queueChunkForRemesh = function (chunk) {\n    possiblyQueueChunkForMeshing(this, chunk)\n}\n\n\n\n/** \n * helper - chunk indexes of where the player is\n * @param {World} world \n*/\nfunction getPlayerChunkIndexes(world) {\n    var [x, y, z] = world.noa.entities.getPosition(world.noa.playerEntity)\n    return world._coordsToChunkIndexes(x, y, z)\n}\n\n\n\n\n/** \n * Gradually scan neighborhood chunk locs; add missing ones to \"toRequest\".\n * @param {World} world \n*/\nfunction findChunksToRequest(world, ci, cj, ck) {\n    var toRequest = world._chunksToRequest\n    var numQueued = toRequest.count()\n    var maxQueued = 50\n    if (numQueued >= maxQueued) return\n\n    // handle changes to chunk sorting function\n    var sortDistFn = world.chunkSortingDistFn || defaultSortDistance\n    if (sortDistFn !== world._prevSortingFn) {\n        sortQueueByDistanceFrom(world, world._chunksSortedLocs, 0, 0, 0, true)\n        world._prevSortingFn = sortDistFn\n    }\n\n    // consume the pre-sorted positions array, checking each loc and \n    // its reflections for locations that need to be added to request queue\n    var locsArr = world._chunksSortedLocs.arr\n    var ix = world._chunkAddSearchFrom\n    var maxIter = Math.min(20, locsArr.length / 10)\n    for (var ct = 0; ct < maxIter; ct++) {\n        var [di, dj, dk] = locsArr[ix++ % locsArr.length]\n        checkReflectedLocations(world, ci, cj, ck, di, dj, dk)\n        if (toRequest.count() >= maxQueued) break\n    }\n\n    // only advance start point if nothing is invalidated, \n    // so that nearyby chunks stay at high priority in that case\n    if (world._chunksInvalidated.isEmpty()) {\n        world._chunkAddSearchFrom = ix % locsArr.length\n    }\n\n    // queue should be mostly sorted, but may not have been empty\n    sortQueueByDistanceFrom(world, toRequest, ci, cj, ck, false)\n}\n\n// Helpers for checking whether to add a location, and reflections of it\nvar checkReflectedLocations = (world, ci, cj, ck, i, j, k) => {\n    checkOneLocation(world, ci + i, cj + j, ck + k)\n    if (i !== k) checkOneLocation(world, ci + k, cj + j, ck + i)\n    if (i > 0) checkReflectedLocations(world, ci, cj, ck, -i, j, k)\n    if (j > 0) checkReflectedLocations(world, ci, cj, ck, i, -j, k)\n    if (k > 0) checkReflectedLocations(world, ci, cj, ck, i, j, -k)\n}\n// finally, the logic for each reflected location checked\nvar checkOneLocation = (world, i, j, k) => {\n    if (world._chunksKnown.includes(i, j, k)) return\n    world._chunksKnown.add(i, j, k)\n    world._chunksToRequest.add(i, j, k, true)\n}\n\n\n\n\n\n/** \n * Incrementally scan known chunks for any that are no longer in range.\n * Assume that the order they're removed in isn't very important.\n * @param {World} world \n*/\nfunction findDistantChunksToRemove(world, ci, cj, ck) {\n    var distCheck = world._remDistanceFn\n    var toRemove = world._chunksToRemove\n    var numQueued = toRemove.count() + world._chunksInvalidated.count()\n    var maxQueued = 50\n    if (numQueued >= maxQueued) return\n\n    var knownArr = world._chunksKnown.arr\n    if (knownArr.length === 0) return\n    var maxIter = Math.min(100, knownArr.length / 10)\n    var found = false\n    for (var ct = 0; ct < maxIter; ct++) {\n        var [i, j, k] = knownArr[removeCheckIndex++ % knownArr.length]\n        if (toRemove.includes(i, j, k)) continue\n        if (distCheck(i - ci, j - cj, k - ck)) continue\n        // flag chunk for removal and remove it from work queues\n        world._chunksToRemove.add(i, j, k)\n        world._chunksToRequest.remove(i, j, k)\n        world._chunksToMesh.remove(i, j, k)\n        world._chunksToMeshFirst.remove(i, j, k)\n        found = true\n        numQueued++\n        if (numQueued > maxQueued) break\n    }\n    removeCheckIndex = removeCheckIndex % knownArr.length\n    if (found) sortQueueByDistanceFrom(world, toRemove, ci, cj, ck)\n}\nvar removeCheckIndex = 0\n\n\n/** \n * Incrementally look for chunks that could be re-meshed\n * @param {World} world \n*/\nfunction findChunksToMesh(world) {\n    var maxQueued = 10\n    var numQueued = world._chunksToMesh.count() + world._chunksToMeshFirst.count()\n    if (numQueued > maxQueued) return\n    var knownArr = world._chunksKnown.arr\n    var maxIter = Math.min(50, knownArr.length / 10)\n    for (var ct = 0; ct < maxIter; ct++) {\n        var [i, j, k] = knownArr[meshCheckIndex++ % knownArr.length]\n        var chunk = world._storage.getChunkByIndexes(i, j, k)\n        if (!chunk) continue\n        var res = possiblyQueueChunkForMeshing(world, chunk)\n        if (res) numQueued++\n        if (numQueued > maxQueued) break\n    }\n    meshCheckIndex %= knownArr.length\n}\nvar meshCheckIndex = 0\n\n\n\n\n\n\n/** \n * invalidate chunks overlapping the given AABB\n * @param {World} world \n*/\nfunction invalidateChunksInBox(world, box) {\n    var min = world._coordsToChunkIndexes(box.base[0], box.base[1], box.base[2])\n    var max = world._coordsToChunkIndexes(box.max[0], box.max[1], box.max[2])\n    for (var i = 0; i < 3; i++) {\n        if (!Number.isFinite(box.base[i])) min[i] = box.base[i]\n        if (!Number.isFinite(box.max[i])) max[i] = box.max[i]\n    }\n    world._chunksKnown.forEach(loc => {\n        var [i, j, k] = loc\n        if (i < min[0] || i >= max[0]) return\n        if (j < min[1] || j >= max[1]) return\n        if (k < min[2] || k >= max[2]) return\n        world._chunksInvalidated.add(i, j, k)\n        world._chunksToRemove.remove(i, j, k)\n        world._chunksToRequest.remove(i, j, k)\n        world._chunksToMesh.remove(i, j, k)\n        world._chunksToMeshFirst.remove(i, j, k)\n    })\n}\n\n\n\n/** \n * when current world changes - empty work queues and mark all for removal\n * @param {World} world \n*/\nexport function markAllChunksInvalid(world) {\n    world._chunksInvalidated.copyFrom(world._chunksKnown)\n    world._chunksToRemove.empty()\n    world._chunksToRequest.empty()\n    world._chunksToMesh.empty()\n    world._chunksToMeshFirst.empty()\n    sortQueueByDistanceFrom(world, world._chunksInvalidated)\n}\n\n\n\n\n\n\n\n\n/** \n * Run through chunk tracking queues looking for work to do next\n * @param {World} world \n*/\nfunction processRequestQueue(world) {\n    var toRequest = world._chunksToRequest\n    if (toRequest.isEmpty()) return true\n    // skip if too many outstanding requests, or if meshing queue is full\n    var pending = world._chunksPending.count()\n    var toMesh = world._chunksToMesh.count()\n    if (pending >= world.maxChunksPendingCreation) return true\n    if (toMesh >= world.maxChunksPendingMeshing) return true\n    var [i, j, k] = toRequest.pop()\n    requestNewChunk(world, i, j, k)\n    return toRequest.isEmpty()\n}\n\n\n/** @param {World} world */\nfunction processRemoveQueue(world) {\n    var queue = world._chunksInvalidated\n    if (queue.isEmpty()) queue = world._chunksToRemove\n    if (queue.isEmpty()) return true\n    var [i, j, k] = queue.pop()\n    removeChunk(world, i, j, k)\n    return (queue.isEmpty())\n}\n\n\n/** \n * similar to above but for chunks waiting to be meshed\n * @param {World} world \n*/\nfunction processMeshingQueue(world, firstOnly) {\n    var queue = world._chunksToMeshFirst\n    if (queue.isEmpty() && !firstOnly) queue = world._chunksToMesh\n    if (queue.isEmpty()) return true\n    var [i, j, k] = queue.pop()\n    if (world._chunksToRemove.includes(i, j, k)) return\n    var chunk = world._storage.getChunkByIndexes(i, j, k)\n    if (chunk) doChunkRemesh(world, chunk)\n}\n\n\n/** @param {World} world */\nfunction possiblyQueueChunkForMeshing(world, chunk) {\n    if (!(chunk._terrainDirty || chunk._objectsDirty)) return false\n    if (chunk._neighborCount < chunk.minNeighborsToMesh) return false\n    if (world._chunksToMesh.includes(chunk.i, chunk.j, chunk.k)) return false\n    if (world._chunksToMeshFirst.includes(chunk.i, chunk.j, chunk.k)) return false\n    var queue = (chunk._neighborCount === 26) ?\n        world._chunksToMeshFirst : world._chunksToMesh\n    queue.add(chunk.i, chunk.j, chunk.k)\n    world._sortMeshQueueEvery++\n    if (world._sortMeshQueueEvery > 20) {\n        sortQueueByDistanceFrom(world, queue)\n        world._sortMeshQueueEvery = 0\n    }\n    return true\n}\n\n\n\n\n\n\n/*\n * \n * \n * \n *              chunk lifecycle - create / set / remove / modify\n * \n * \n * \n*/\n\n\n/** \n * create chunk object and request voxel data from client\n * @param {World} world \n*/\nfunction requestNewChunk(world, i, j, k) {\n    var size = world._chunkSize\n    var dataArr = Chunk._createVoxelArray(world._chunkSize)\n    var worldName = world.noa.worldName\n    var requestID = [i, j, k, worldName].join('|')\n    var x = i * size\n    var y = j * size\n    var z = k * size\n    world._chunksPending.add(i, j, k)\n    world.emit('worldDataNeeded', requestID, dataArr, x, y, z, worldName)\n    profile_queues_hook('request')\n}\n\n/** \n * called when client sets a chunk's voxel data\n * If userData is passed in it will be attached to the chunk\n * @param {World} world \n*/\nfunction setChunkData(world, reqID, array, userData, fillVoxelID) {\n    var arr = reqID.split('|')\n    var i = parseInt(arr.shift())\n    var j = parseInt(arr.shift())\n    var k = parseInt(arr.shift())\n    var worldName = arr.join('|')\n    world._chunksPending.remove(i, j, k)\n    // discard data if it's for a world that's no longer current\n    if (worldName !== world.noa.worldName) return\n    // discard if chunk is no longer needed\n    if (!world._chunksKnown.includes(i, j, k)) return\n    if (world._chunksToRemove.includes(i, j, k)) return\n\n    var chunk = world._storage.getChunkByIndexes(i, j, k)\n    if (!chunk) {\n        // if chunk doesn't exist, create and init\n        var size = world._chunkSize\n        chunk = new Chunk(world.noa, reqID, i, j, k, size, array, fillVoxelID)\n        world._storage.storeChunkByIndexes(i, j, k, chunk)\n        chunk.userData = userData\n        world.noa.rendering.prepareChunkForRendering(chunk)\n        world.emit('chunkAdded', chunk)\n    } else {\n        // else we're updating data for an existing chunk\n        chunk._updateVoxelArray(array, fillVoxelID)\n    }\n    // chunk can now be meshed, and ping neighbors\n    possiblyQueueChunkForMeshing(world, chunk)\n    updateNeighborsOfChunk(world, i, j, k, chunk)\n\n    profile_queues_hook('receive')\n}\n\n\n\n/** \n * remove a chunk that wound up in the remove queue\n * @param {World} world \n*/\nfunction removeChunk(world, i, j, k) {\n    var chunk = world._storage.getChunkByIndexes(i, j, k)\n\n    if (chunk) {\n        world.emit('chunkBeingRemoved', chunk.requestID, chunk.voxels, chunk.userData)\n        world.noa.rendering.disposeChunkForRendering(chunk)\n        chunk.dispose()\n        profile_queues_hook('dispose')\n        updateNeighborsOfChunk(world, i, j, k, null)\n    }\n\n    world._storage.removeChunkByIndexes(i, j, k)\n    world._chunksKnown.remove(i, j, k)\n    world._chunksToMesh.remove(i, j, k)\n    world._chunksToRemove.remove(i, j, k)\n    world._chunksToMeshFirst.remove(i, j, k)\n}\n\n\n/** @param {World} world */\nfunction doChunkRemesh(world, chunk) {\n    world._chunksToMesh.remove(chunk.i, chunk.j, chunk.k)\n    world._chunksToMeshFirst.remove(chunk.i, chunk.j, chunk.k)\n    chunk.updateMeshes()\n    profile_queues_hook('mesh')\n}\n\n\n\n\n\n\n\n\n\n\n/*\n * \n * \n *          two different versions of logic to convert\n *          chunk coords to chunk indexes or local scope\n * \n * \n*/\n\nfunction chunkCoordsToIndexesGeneral(x, y, z) {\n    var cs = this._chunkSize\n    return [Math.floor(x / cs) | 0, Math.floor(y / cs) | 0, Math.floor(z / cs) | 0]\n}\nfunction chunkCoordsToLocalsGeneral(x, y, z) {\n    var cs = this._chunkSize\n    var i = (x % cs) | 0; if (i < 0) i += cs\n    var j = (y % cs) | 0; if (j < 0) j += cs\n    var k = (z % cs) | 0; if (k < 0) k += cs\n    return [i, j, k]\n}\nfunction chunkCoordsToIndexesPowerOfTwo(x, y, z) {\n    var shift = this._coordShiftBits\n    return [(x >> shift) | 0, (y >> shift) | 0, (z >> shift) | 0]\n}\nfunction chunkCoordsToLocalsPowerOfTwo(x, y, z) {\n    var mask = this._coordMask\n    return [(x & mask) | 0, (y & mask) | 0, (z & mask) | 0]\n}\n\n\n\n\n\n\n\n/*\n * \n * \n * \n *          misc helpers and implementation functions\n * \n * \n * \n*/\n\n/** \n * sorts DESCENDING, unless reversed\n * @param {World} world \n*/\nfunction sortQueueByDistanceFrom(world, queue, pi, pj, pk, reverse = false) {\n    var distFn = world.chunkSortingDistFn || defaultSortDistance\n    var localDist = (i, j, k) => distFn(pi - i, pj - j, pk - k)\n    if (pi === undefined) {\n        [pi, pj, pk] = getPlayerChunkIndexes(world)\n    }\n    queue.sortByDistance(localDist, reverse)\n}\nvar defaultSortDistance = (i, j, k) => (i * i) + (j * j) + (k * k)\n\n\n\n\n/** \n * keep neighbor data updated when chunk is added or removed\n * @param {World} world \n*/\nfunction updateNeighborsOfChunk(world, ci, cj, ck, chunk) {\n    var terrainChanged = (!chunk) || (chunk && !chunk.isEmpty)\n    for (var i = -1; i <= 1; i++) {\n        for (var j = -1; j <= 1; j++) {\n            for (var k = -1; k <= 1; k++) {\n                if ((i | j | k) === 0) continue\n                var neighbor = world._storage.getChunkByIndexes(ci + i, cj + j, ck + k)\n                if (!neighbor) continue\n                // flag neighbor, assume terrain needs remeshing\n                if (terrainChanged) neighbor._terrainDirty = true\n                // update neighbor counts and references, both ways\n                if (chunk && !chunk._neighbors.get(i, j, k)) {\n                    chunk._neighborCount++\n                    chunk._neighbors.set(i, j, k, neighbor)\n                }\n                var nabRef = neighbor._neighbors.get(-i, -j, -k)\n                if (chunk && !nabRef) {\n                    neighbor._neighborCount++\n                    neighbor._neighbors.set(-i, -j, -k, chunk)\n                    // immediately queue neighbor if it's surrounded\n                    if (neighbor._neighborCount === 26) {\n                        possiblyQueueChunkForMeshing(world, neighbor)\n                    }\n                }\n                if (!chunk && nabRef) {\n                    neighbor._neighborCount--\n                    neighbor._neighbors.set(-i, -j, -k, null)\n                }\n            }\n        }\n    }\n}\n\n\n// make a function to check if an (i,j,k) is within a sphere/ellipse of given size\nfunction makeDistanceTestFunction(xsize, ysize) {\n    var asq = xsize * xsize\n    var bsq = ysize * ysize\n    // spherical case\n    if (xsize === ysize) return (i, j, k) => (i * i + j * j + k * k <= asq)\n    // otherwise do clipped spheres for now\n    if (xsize > ysize) return (i, j, k) => {\n        if (Math.abs(j) > ysize) return false\n        return (i * i + j * j + k * k <= asq)\n    }\n    return (i, j, k) => {\n        var dxsq = i * i + k * k\n        if (dxsq > asq) return false\n        return (dxsq + j * j <= bsq)\n    }\n}\n\n\n\n\n\n\n\n\n\n\n/*\n * \n * \n * \n * \n *                  debugging\n * \n * \n * \n * \n*/\n\n/** @internal */\nWorld.prototype.report = function () {\n    console.log('World report - playerChunkLoaded: ', this.playerChunkLoaded)\n    _report(this, '  known:     ', this._chunksKnown.arr, true)\n    _report(this, '  to request:', this._chunksToRequest.arr, 0)\n    _report(this, '  to remove: ', this._chunksToRemove.arr, 0)\n    _report(this, '  invalid:   ', this._chunksInvalidated.arr, 0)\n    _report(this, '  creating:  ', this._chunksPending.arr, 0)\n    _report(this, '  to mesh:   ', this._chunksToMesh.arr, 0)\n    _report(this, '  mesh 1st:  ', this._chunksToMeshFirst.arr, 0)\n}\n\nfunction _report(world, name, arr, ext) {\n    var full = 0,\n        empty = 0,\n        exist = 0,\n        surrounded = 0,\n        remeshes = []\n    arr.forEach(loc => {\n        var chunk = world._storage.getChunkByIndexes(loc[0], loc[1], loc[2])\n        if (!chunk) return\n        exist++\n        remeshes.push(chunk._timesMeshed)\n        if (chunk._isFull) full++\n        if (chunk._isEmpty) empty++\n        if (chunk._neighborCount === 26) surrounded++\n    })\n    var out = arr.length.toString().padEnd(8)\n    out += ('exist: ' + exist).padEnd(12)\n    out += ('full: ' + full).padEnd(12)\n    out += ('empty: ' + empty).padEnd(12)\n    out += ('surr: ' + surrounded).padEnd(12)\n    if (ext) {\n        var sum = remeshes.reduce((acc, val) => acc + val, 0)\n        var max = remeshes.reduce((acc, val) => Math.max(acc, val), 0)\n        var min = remeshes.reduce((acc, val) => Math.min(acc, val), 0)\n        out += 'times meshed: avg ' + (sum / exist).toFixed(2)\n        out += '  max ' + max\n        out += '  min ' + min\n    }\n    console.log(name, out)\n}\n\n\nimport { makeProfileHook } from './util'\nvar profile_hook = makeProfileHook(PROFILE_EVERY, 'world ticks:', 1)\nvar profile_queues_hook = ((every) => {\n    if (!(every > 0)) return () => { }\n    var iter = 0\n    var counts = {}\n    var queues = {}\n    var started = performance.now()\n    return function profile_queues_hook(state, world) {\n        if (state === 'start') return\n        if (state !== 'end') return counts[state] = (counts[state] || 0) + 1\n        queues.toreq = (queues.toreq || 0) + world._chunksToRequest.count()\n        queues.toget = (queues.toget || 0) + world._chunksPending.count()\n        queues.tomesh = (queues.tomesh || 0) + world._chunksToMesh.count() + world._chunksToMeshFirst.count()\n        queues.tomesh1 = (queues.tomesh1 || 0) + world._chunksToMeshFirst.count()\n        queues.torem = (queues.torem || 0) + world._chunksToRemove.count()\n        if (++iter < every) return\n        var t = performance.now(), dt = t - started\n        var res = {}\n        Object.keys(queues).forEach(k => {\n            var num = Math.round((queues[k] || 0) / iter)\n            res[k] = `[${num}]`.padStart(5)\n        })\n        Object.keys(counts).forEach(k => {\n            var num = Math.round((counts[k] || 0) * 1000 / dt)\n            res[k] = ('' + num).padStart(3)\n        })\n        console.log('chunk flow: ',\n            `${res.toreq}-> ${res.request || 0} req/s  `,\n            `${res.toget}-> ${res.receive || 0} got/s  `,\n            `${(res.tomesh)}-> ${res.mesh || 0} mesh/s  `,\n            `${res.torem}-> ${res.dispose || 0} rem/s  `,\n            `(meshFirst: ${res.tomesh1.trim()})`,\n        )\n        iter = 0\n        counts = {}\n        queues = {}\n        started = performance.now()\n    }\n})(PROFILE_QUEUES_EVERY)\n","\nimport { LocationQueue } from './util'\nimport ndarray from 'ndarray'\n\n\n\n/* \n * \n *   Chunk\n * \n *  Stores and manages voxel ids and flags for each voxel within chunk\n * \n */\n\n\n\n\n\n/*\n *\n *    Chunk constructor\n *\n */\n\n/** @param {import('../index').Engine} noa */\nexport function Chunk(noa, requestID, ci, cj, ck, size, dataArray, fillVoxelID = -1) {\n    this.noa = noa\n    this.isDisposed = false\n\n    // arbitrary data passed in by client when generating world\n    this.userData = null\n\n    // voxel data and properties\n    this.requestID = requestID     // id sent to game client\n    this.voxels = dataArray\n    this.i = ci\n    this.j = cj\n    this.k = ck\n    this.size = size\n    this.x = ci * size\n    this.y = cj * size\n    this.z = ck * size\n    this.pos = [this.x, this.y, this.z]\n\n    // flags to track if things need re-meshing\n    this._terrainDirty = false\n    this._objectsDirty = false\n\n    // inits state of terrain / object meshing\n    this._terrainMeshes = []\n    noa._terrainMesher.initChunk(this)\n    noa._objectMesher.initChunk(this)\n\n    this._isFull = false\n    this._isEmpty = false\n\n    this._wholeLayerVoxel = Array(size).fill(-1)\n    if (fillVoxelID >= 0) {\n        this.voxels.data.fill(fillVoxelID, 0, this.voxels.size)\n        this._wholeLayerVoxel.fill(fillVoxelID)\n    }\n\n    // references to neighboring chunks, if they exist (filled in by `world`)\n    var narr = Array.from(Array(27), () => null)\n    this._neighbors = ndarray(narr, [3, 3, 3]).lo(1, 1, 1)\n    this._neighbors.set(0, 0, 0, this)\n    this._neighborCount = 0\n    this._timesMeshed = 0\n\n    // location queue of voxels in this chunk with block handlers (assume it's rare)\n    /** @internal */\n    this._blockHandlerLocs = new LocationQueue()\n\n    // passes through voxel contents, calling block handlers etc.\n    scanVoxelData(this)\n}\n\n\n// expose logic internally to create and update the voxel data array\nChunk._createVoxelArray = function (size) {\n    var arr = new Uint16Array(size * size * size)\n    return ndarray(arr, [size, size, size])\n}\n\nChunk.prototype._updateVoxelArray = function (dataArray, fillVoxelID = -1) {\n    // dispose current object blocks\n    callAllBlockHandlers(this, 'onUnload')\n    this.noa._objectMesher.disposeChunk(this)\n    this.noa._terrainMesher.disposeChunk(this)\n    this.voxels = dataArray\n    this._terrainDirty = false\n    this._objectsDirty = false\n    this._blockHandlerLocs.empty()\n    this.noa._objectMesher.initChunk(this)\n    this.noa._terrainMesher.initChunk(this)\n\n    if (fillVoxelID >= 0) {\n        this._wholeLayerVoxel.fill(fillVoxelID)\n    } else {\n        this._wholeLayerVoxel.fill(-1)\n    }\n\n    scanVoxelData(this)\n}\n\n\n\n\n\n\n\n\n/*\n *\n *    Chunk API\n *\n */\n\n// get/set deal with block IDs, so that this class acts like an ndarray\n\nChunk.prototype.get = function (i, j, k) {\n    return this.voxels.get(i, j, k)\n}\n\nChunk.prototype.getSolidityAt = function (i, j, k) {\n    var solidLookup = this.noa.registry._solidityLookup\n    return solidLookup[this.voxels.get(i, j, k)]\n}\n\nChunk.prototype.set = function (i, j, k, newID) {\n    var oldID = this.voxels.get(i, j, k)\n    if (newID === oldID) return\n\n    // update voxel data\n    this.voxels.set(i, j, k, newID)\n\n    // lookup tables from registry, etc\n    var solidLookup = this.noa.registry._solidityLookup\n    var objectLookup = this.noa.registry._objectLookup\n    var opaqueLookup = this.noa.registry._opacityLookup\n    var handlerLookup = this.noa.registry._blockHandlerLookup\n\n    // track invariants about chunk data\n    if (!opaqueLookup[newID]) this._isFull = false\n    if (newID !== 0) this._isEmpty = false\n    if (this._wholeLayerVoxel[j] !== newID) this._wholeLayerVoxel[j] = -1\n\n    // voxel lifecycle handling\n    var hold = handlerLookup[oldID]\n    var hnew = handlerLookup[newID]\n    if (hold) callBlockHandler(this, hold, 'onUnset', i, j, k)\n    if (hnew) {\n        callBlockHandler(this, hnew, 'onSet', i, j, k)\n        this._blockHandlerLocs.add(i, j, k)\n    } else {\n        this._blockHandlerLocs.remove(i, j, k)\n    }\n\n    // track object block states\n    var objMesher = this.noa._objectMesher\n    var objOld = objectLookup[oldID]\n    var objNew = objectLookup[newID]\n    if (objOld) objMesher.setObjectBlock(this, 0, i, j, k)\n    if (objNew) objMesher.setObjectBlock(this, newID, i, j, k)\n\n    // decide dirtiness states\n    var solidityChanged = (solidLookup[oldID] !== solidLookup[newID])\n    var opacityChanged = (opaqueLookup[oldID] !== opaqueLookup[newID])\n    var wasTerrain = !objOld && (oldID !== 0)\n    var nowTerrain = !objNew && (newID !== 0)\n\n    if (objOld || objNew) this._objectsDirty = true\n    if (solidityChanged || opacityChanged || wasTerrain || nowTerrain) {\n        this._terrainDirty = true\n    }\n\n    if (this._terrainDirty || this._objectsDirty) {\n        this.noa.world._queueChunkForRemesh(this)\n    }\n\n    // neighbors only affected if solidity or opacity changed on an edge\n    if (solidityChanged || opacityChanged) {\n        var edge = this.size - 1\n        var imin = (i === 0) ? -1 : 0\n        var jmin = (j === 0) ? -1 : 0\n        var kmin = (k === 0) ? -1 : 0\n        var imax = (i === edge) ? 1 : 0\n        var jmax = (j === edge) ? 1 : 0\n        var kmax = (k === edge) ? 1 : 0\n        for (var ni = imin; ni <= imax; ni++) {\n            for (var nj = jmin; nj <= jmax; nj++) {\n                for (var nk = kmin; nk <= kmax; nk++) {\n                    if ((ni | nj | nk) === 0) continue\n                    var nab = this._neighbors.get(ni, nj, nk)\n                    if (!nab) continue\n                    nab._terrainDirty = true\n                    this.noa.world._queueChunkForRemesh(nab)\n                }\n            }\n        }\n    }\n}\n\n\n\n// helper to call handler of a given type at a particular xyz\nfunction callBlockHandler(chunk, handlers, type, i, j, k) {\n    var handler = handlers[type]\n    if (!handler) return\n    handler(chunk.x + i, chunk.y + j, chunk.z + k)\n}\n\n\n// gets called by World when this chunk has been queued for remeshing\nChunk.prototype.updateMeshes = function () {\n    if (this._terrainDirty) {\n        this.noa._terrainMesher.meshChunk(this)\n        this._timesMeshed++\n        this._terrainDirty = false\n    }\n    if (this._objectsDirty) {\n        this.noa._objectMesher.buildObjectMeshes()\n        this._objectsDirty = false\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n * \n *      Init\n * \n *  Scans voxel data, processing object blocks and setting chunk flags\n * \n*/\n\nfunction scanVoxelData(chunk) {\n    var voxels = chunk.voxels\n    var data = voxels.data\n    var len = voxels.shape[0]\n    var opaqueLookup = chunk.noa.registry._opacityLookup\n    var handlerLookup = chunk.noa.registry._blockHandlerLookup\n    var objectLookup = chunk.noa.registry._objectLookup\n    var plainLookup = chunk.noa.registry._blockIsPlainLookup\n    var objMesher = chunk.noa._objectMesher\n\n    // flags for tracking if chunk is entirely opaque or transparent\n    var fullyOpaque = true\n    var fullyAir = true\n\n    // scan vertically..\n    for (var j = 0; j < len; ++j) {\n\n        // fastest case where whole layer is air/dirt/etc\n        var layerID = chunk._wholeLayerVoxel[j]\n        if (layerID >= 0 && !objMesher[layerID] && !handlerLookup[layerID]) {\n            if (!opaqueLookup[layerID]) fullyOpaque = false\n            if (layerID !== 0) fullyAir = false\n            continue\n        }\n\n        var constantID = voxels.get(0, j, 0)\n\n        for (var i = 0; i < len; ++i) {\n            var index = voxels.index(i, j, 0)\n            for (var k = 0; k < len; ++k, ++index) {\n                var id = data[index]\n\n                // detect constant layer ID if there is one\n                if (constantID >= 0 && id !== constantID) constantID = -1\n\n                // most common cases: air block...\n                if (id === 0) {\n                    fullyOpaque = false\n                    continue\n                }\n                // ...or plain boring block (no mesh, handlers, etc)\n                if (plainLookup[id]) {\n                    fullyAir = false\n                    continue\n                }\n                // otherwise check opacity, object mesh, and handlers\n                fullyOpaque = fullyOpaque && opaqueLookup[id]\n                fullyAir = false\n                if (objectLookup[id]) {\n                    objMesher.setObjectBlock(chunk, id, i, j, k)\n                    chunk._objectsDirty = true\n                }\n                var handlers = handlerLookup[id]\n                if (handlers) {\n                    chunk._blockHandlerLocs.add(i, j, k)\n                    callBlockHandler(chunk, handlers, 'onLoad', i, j, k)\n                }\n            }\n        }\n\n        if (constantID >= 0) chunk._wholeLayerVoxel[j] = constantID\n    }\n\n    chunk._isFull = fullyOpaque\n    chunk._isEmpty = fullyAir\n    chunk._terrainDirty = !chunk._isEmpty\n}\n\n\n\n\n\n\n\n\n\n\n// dispose function - just clears properties and references\n\nChunk.prototype.dispose = function () {\n    // look through the data for onUnload handlers\n    callAllBlockHandlers(this, 'onUnload')\n    this._blockHandlerLocs.empty()\n\n    // let meshers dispose their stuff\n    this.noa._objectMesher.disposeChunk(this)\n    this.noa._terrainMesher.disposeChunk(this)\n\n    // apparently there's no way to dispose typed arrays, so just null everything\n    this.voxels.data = null\n    this.voxels = null\n    this._neighbors.data = null\n    this._neighbors = null\n\n    this.isDisposed = true\n}\n\n\n\n// helper to call a given handler for all blocks in the chunk\nfunction callAllBlockHandlers(chunk, type) {\n    var voxels = chunk.voxels\n    var handlerLookup = chunk.noa.registry._blockHandlerLookup\n    chunk._blockHandlerLocs.arr.forEach(([i, j, k]) => {\n        var id = voxels.get(i, j, k)\n        callBlockHandler(chunk, handlerLookup[id], type, i, j, k)\n    })\n}\n"],"names":[],"version":3,"file":"index.js.map"}